<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="150" onload="init(evt)" viewBox="0 0 1200 150" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="150" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">faucet-lock-fee</text><text id="details" fill="rgb(0,0,0)" x="10" y="133.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="133.00"> </text><svg id="frames" x="10" width="1180" total_samples="2741356"><g><title>CreateNode(4) (674 Execution Cost Units, 0.02%)</title><rect x="0.0177%" y="85" width="0.0246%" height="15" fill="rgb(227,0,7)" fg:x="484" fg:w="674"/><text x="0.2677%" y="95.50"></text></g><g><title>DropNode(563) (1,361 Execution Cost Units, 0.05%)</title><rect x="0.0422%" y="85" width="0.0496%" height="15" fill="rgb(217,0,24)" fg:x="1158" fg:w="1361"/><text x="0.2922%" y="95.50"></text></g><g><title>CreateNode(463) (918 Execution Cost Units, 0.03%)</title><rect x="0.1829%" y="69" width="0.0335%" height="15" fill="rgb(221,193,54)" fg:x="5015" fg:w="918"/><text x="0.4329%" y="79.50"></text></g><g><title>CreateNode(47) (644 Execution Cost Units, 0.02%)</title><rect x="0.2164%" y="69" width="0.0235%" height="15" fill="rgb(248,212,6)" fg:x="5933" fg:w="644"/><text x="0.4664%" y="79.50"></text></g><g><title>CreateNode(61) (918 Execution Cost Units, 0.03%)</title><rect x="0.2399%" y="69" width="0.0335%" height="15" fill="rgb(208,68,35)" fg:x="6577" fg:w="918"/><text x="0.4899%" y="79.50"></text></g><g><title>DropNode(461) (1,605 Execution Cost Units, 0.06%)</title><rect x="0.2734%" y="69" width="0.0585%" height="15" fill="rgb(232,128,0)" fg:x="7495" fg:w="1605"/><text x="0.5234%" y="79.50"></text></g><g><title>DropNode(548) (1,605 Execution Cost Units, 0.06%)</title><rect x="0.3320%" y="69" width="0.0585%" height="15" fill="rgb(207,160,47)" fg:x="9100" fg:w="1605"/><text x="0.5820%" y="79.50"></text></g><g><title>DropNode(532) (1,331 Execution Cost Units, 0.05%)</title><rect x="0.4389%" y="53" width="0.0486%" height="15" fill="rgb(228,23,34)" fg:x="12032" fg:w="1331"/><text x="0.6889%" y="63.50"></text></g><g><title>OpenSubstate::GlobalPackage(487) (541 Execution Cost Units, 0.02%)</title><rect x="0.4875%" y="53" width="0.0197%" height="15" fill="rgb(218,30,26)" fg:x="13363" fg:w="541"/><text x="0.7375%" y="63.50"></text></g><g><title>OpenSubstate::GlobalPackage(491) (40,001 Execution Cost Units, 1.46%)</title><rect x="0.5072%" y="53" width="1.4592%" height="15" fill="rgb(220,122,19)" fg:x="13904" fg:w="40001"/><text x="0.7572%" y="63.50"></text></g><g><title>OpenSubstate::GlobalPackage(493) (339 Execution Cost Units, 0.01%)</title><rect x="1.9664%" y="53" width="0.0124%" height="15" fill="rgb(250,228,42)" fg:x="53905" fg:w="339"/><text x="2.2164%" y="63.50"></text></g><g><title>OpenSubstate::GlobalPackage(497) (40,082 Execution Cost Units, 1.46%)</title><rect x="1.9787%" y="53" width="1.4621%" height="15" fill="rgb(240,193,28)" fg:x="54244" fg:w="40082"/><text x="2.2287%" y="63.50"></text></g><g><title>OpenSubstate::GlobalPackage(499) (1,957 Execution Cost Units, 0.07%)</title><rect x="3.4409%" y="53" width="0.0714%" height="15" fill="rgb(216,20,37)" fg:x="94326" fg:w="1957"/><text x="3.6909%" y="63.50"></text></g><g><title>OpenSubstate::GlobalPackage(507) (339 Execution Cost Units, 0.01%)</title><rect x="3.5122%" y="53" width="0.0124%" height="15" fill="rgb(206,188,39)" fg:x="96283" fg:w="339"/><text x="3.7622%" y="63.50"></text></g><g><title>OpenSubstate::GlobalPackage(511) (355 Execution Cost Units, 0.01%)</title><rect x="3.5246%" y="53" width="0.0129%" height="15" fill="rgb(217,207,13)" fg:x="96622" fg:w="355"/><text x="3.7746%" y="63.50"></text></g><g><title>OpenSubstate::InternalGenericComponent(503) (461 Execution Cost Units, 0.02%)</title><rect x="3.5376%" y="53" width="0.0168%" height="15" fill="rgb(231,73,38)" fg:x="96977" fg:w="461"/><text x="3.7876%" y="63.50"></text></g><g><title>OpenSubstate::InternalGenericComponent(516) (333 Execution Cost Units, 0.01%)</title><rect x="3.5544%" y="53" width="0.0121%" height="15" fill="rgb(225,20,46)" fg:x="97438" fg:w="333"/><text x="3.8044%" y="63.50"></text></g><g><title>OpenSubstate::InternalGenericComponent(522) (461 Execution Cost Units, 0.02%)</title><rect x="3.5665%" y="53" width="0.0168%" height="15" fill="rgb(210,31,41)" fg:x="97771" fg:w="461"/><text x="3.8165%" y="63.50"></text></g><g><title>OpenSubstate::InternalGenericComponent(527) (461 Execution Cost Units, 0.02%)</title><rect x="3.5833%" y="53" width="0.0168%" height="15" fill="rgb(221,200,47)" fg:x="98232" fg:w="461"/><text x="3.8333%" y="63.50"></text></g><g><title>ReadSubstate(488) (351 Execution Cost Units, 0.01%)</title><rect x="3.6002%" y="53" width="0.0128%" height="15" fill="rgb(226,26,5)" fg:x="98693" fg:w="351"/><text x="3.8502%" y="63.50"></text></g><g><title>ReadSubstate(500) (1,767 Execution Cost Units, 0.06%)</title><rect x="3.6184%" y="53" width="0.0645%" height="15" fill="rgb(249,33,26)" fg:x="99193" fg:w="1767"/><text x="3.8684%" y="63.50"></text></g><g><title>RunNativeCode::Worktop_drop(514) (17,918 Execution Cost Units, 0.65%)</title><rect x="3.7222%" y="53" width="0.6536%" height="15" fill="rgb(235,183,28)" fg:x="102038" fg:w="17918"/><text x="3.9722%" y="63.50"></text></g><g><title>Invocation: Function &lt;package_sim1pkgxxxxxxxxxresrcexxxxxxxxx000538436477xxxxxxxxxaj0zg9&gt;::Worktop::Worktop_drop (484) (109,499 Execution Cost Units, 3.99%)</title><rect x="0.3905%" y="69" width="3.9943%" height="15" fill="rgb(221,5,38)" fg:x="10705" fg:w="109499"/><text x="0.6405%" y="79.50">Invo..</text></g><g><title>CreateNode(178) (980 Execution Cost Units, 0.04%)</title><rect x="4.5353%" y="53" width="0.0357%" height="15" fill="rgb(247,18,42)" fg:x="124329" fg:w="980"/><text x="4.7853%" y="63.50"></text></g><g><title>CreateNode(311) (980 Execution Cost Units, 0.04%)</title><rect x="4.5711%" y="53" width="0.0357%" height="15" fill="rgb(241,131,45)" fg:x="125309" fg:w="980"/><text x="4.8211%" y="63.50"></text></g><g><title>DropNode(281) (1,667 Execution Cost Units, 0.06%)</title><rect x="4.6068%" y="53" width="0.0608%" height="15" fill="rgb(249,31,29)" fg:x="126289" fg:w="1667"/><text x="4.8568%" y="63.50"></text></g><g><title>DropNode(418) (1,667 Execution Cost Units, 0.06%)</title><rect x="4.6676%" y="53" width="0.0608%" height="15" fill="rgb(225,111,53)" fg:x="127956" fg:w="1667"/><text x="4.9176%" y="63.50"></text></g><g><title>OpenSubstate::GlobalPackage(201) (40,011 Execution Cost Units, 1.46%)</title><rect x="4.7853%" y="37" width="1.4595%" height="15" fill="rgb(238,160,17)" fg:x="131183" fg:w="40011"/><text x="5.0353%" y="47.50"></text></g><g><title>OpenSubstate::GlobalPackage(203) (541 Execution Cost Units, 0.02%)</title><rect x="6.2449%" y="37" width="0.0197%" height="15" fill="rgb(214,148,48)" fg:x="171194" fg:w="541"/><text x="6.4949%" y="47.50"></text></g><g><title>OpenSubstate::GlobalPackage(207) (40,001 Execution Cost Units, 1.46%)</title><rect x="6.2646%" y="37" width="1.4592%" height="15" fill="rgb(232,36,49)" fg:x="171735" fg:w="40001"/><text x="6.5146%" y="47.50"></text></g><g><title>OpenSubstate::GlobalPackage(209) (339 Execution Cost Units, 0.01%)</title><rect x="7.7238%" y="37" width="0.0124%" height="15" fill="rgb(209,103,24)" fg:x="211736" fg:w="339"/><text x="7.9738%" y="47.50"></text></g><g><title>OpenSubstate::GlobalPackage(213) (40,293 Execution Cost Units, 1.47%)</title><rect x="7.7361%" y="37" width="1.4698%" height="15" fill="rgb(229,88,8)" fg:x="212075" fg:w="40293"/><text x="7.9861%" y="47.50"></text></g><g><title>OpenSubstate::GlobalPackage(215) (6,171 Execution Cost Units, 0.23%)</title><rect x="9.2060%" y="37" width="0.2251%" height="15" fill="rgb(213,181,19)" fg:x="252368" fg:w="6171"/><text x="9.4560%" y="47.50"></text></g><g><title>OpenSubstate::GlobalPackage(223) (40,179 Execution Cost Units, 1.47%)</title><rect x="9.4311%" y="37" width="1.4657%" height="15" fill="rgb(254,191,54)" fg:x="258539" fg:w="40179"/><text x="9.6811%" y="47.50"></text></g><g><title>OpenSubstate::GlobalPackage(225) (3,883 Execution Cost Units, 0.14%)</title><rect x="10.8967%" y="37" width="0.1416%" height="15" fill="rgb(241,83,37)" fg:x="298718" fg:w="3883"/><text x="11.1467%" y="47.50"></text></g><g><title>OpenSubstate::GlobalPackage(229) (40,001 Execution Cost Units, 1.46%)</title><rect x="11.0384%" y="37" width="1.4592%" height="15" fill="rgb(233,36,39)" fg:x="302601" fg:w="40001"/><text x="11.2884%" y="47.50"></text></g><g><title>OpenSubstate::GlobalPackage(231) (339 Execution Cost Units, 0.01%)</title><rect x="12.4975%" y="37" width="0.0124%" height="15" fill="rgb(226,3,54)" fg:x="342602" fg:w="339"/><text x="12.7475%" y="47.50"></text></g><g><title>OpenSubstate::GlobalPackage(235) (40,002 Execution Cost Units, 1.46%)</title><rect x="12.5099%" y="37" width="1.4592%" height="15" fill="rgb(245,192,40)" fg:x="342941" fg:w="40002"/><text x="12.7599%" y="47.50"></text></g><g><title>OpenSubstate::GlobalPackage(237) (355 Execution Cost Units, 0.01%)</title><rect x="13.9691%" y="37" width="0.0129%" height="15" fill="rgb(238,167,29)" fg:x="382943" fg:w="355"/><text x="14.2191%" y="47.50"></text></g><g><title>OpenSubstate::InternalFungibleVault(219) (535 Execution Cost Units, 0.02%)</title><rect x="13.9821%" y="37" width="0.0195%" height="15" fill="rgb(232,182,51)" fg:x="383298" fg:w="535"/><text x="14.2321%" y="47.50"></text></g><g><title>OpenSubstate::InternalFungibleVault(242) (535 Execution Cost Units, 0.02%)</title><rect x="14.0016%" y="37" width="0.0195%" height="15" fill="rgb(231,60,39)" fg:x="383833" fg:w="535"/><text x="14.2516%" y="47.50"></text></g><g><title>OpenSubstate::InternalFungibleVault(246) (40,003 Execution Cost Units, 1.46%)</title><rect x="14.0211%" y="37" width="1.4592%" height="15" fill="rgb(208,69,12)" fg:x="384368" fg:w="40003"/><text x="14.2711%" y="47.50"></text></g><g><title>OpenSubstate::InternalFungibleVault(248) (377 Execution Cost Units, 0.01%)</title><rect x="15.4803%" y="37" width="0.0138%" height="15" fill="rgb(235,93,37)" fg:x="424371" fg:w="377"/><text x="15.7303%" y="47.50"></text></g><g><title>OpenSubstate::InternalFungibleVault(252) (535 Execution Cost Units, 0.02%)</title><rect x="15.4941%" y="37" width="0.0195%" height="15" fill="rgb(213,116,39)" fg:x="424748" fg:w="535"/><text x="15.7441%" y="47.50"></text></g><g><title>OpenSubstate::InternalFungibleVault(258) (339 Execution Cost Units, 0.01%)</title><rect x="15.5136%" y="37" width="0.0124%" height="15" fill="rgb(222,207,29)" fg:x="425283" fg:w="339"/><text x="15.7636%" y="47.50"></text></g><g><title>ReadSubstate(204) (351 Execution Cost Units, 0.01%)</title><rect x="15.5260%" y="37" width="0.0128%" height="15" fill="rgb(206,96,30)" fg:x="425622" fg:w="351"/><text x="15.7760%" y="47.50"></text></g><g><title>ReadSubstate(216) (5,981 Execution Cost Units, 0.22%)</title><rect x="15.5442%" y="37" width="0.2182%" height="15" fill="rgb(218,138,4)" fg:x="426122" fg:w="5981"/><text x="15.7942%" y="47.50"></text></g><g><title>ReadSubstate(220) (345 Execution Cost Units, 0.01%)</title><rect x="15.7624%" y="37" width="0.0126%" height="15" fill="rgb(250,191,14)" fg:x="432103" fg:w="345"/><text x="16.0124%" y="47.50"></text></g><g><title>ReadSubstate(226) (3,693 Execution Cost Units, 0.13%)</title><rect x="15.7750%" y="37" width="0.1347%" height="15" fill="rgb(239,60,40)" fg:x="432448" fg:w="3693"/><text x="16.0250%" y="47.50"></text></g><g><title>ReadSubstate(243) (345 Execution Cost Units, 0.01%)</title><rect x="15.9211%" y="37" width="0.0126%" height="15" fill="rgb(206,27,48)" fg:x="436455" fg:w="345"/><text x="16.1711%" y="47.50"></text></g><g><title>ReadSubstate(253) (345 Execution Cost Units, 0.01%)</title><rect x="15.9405%" y="37" width="0.0126%" height="15" fill="rgb(225,35,8)" fg:x="436987" fg:w="345"/><text x="16.1905%" y="47.50"></text></g><g><title>Invocation: Method &lt;internal_vault_sim1tz9uaalv8g3ahmwep2trlyj2m3zn7rstm9pwessa3k56me2fcduq2u&gt;::FungibleVault::get_amount (198) (322,160 Execution Cost Units, 11.75%)</title><rect x="4.7284%" y="53" width="11.7518%" height="15" fill="rgb(250,213,24)" fg:x="129623" fg:w="322160"/><text x="4.9784%" y="63.50">Invocation: Metho..</text></g><g><title>RunNativeCode::get_amount_FungibleVault(240) (14,451 Execution Cost Units, 0.53%)</title><rect x="15.9531%" y="37" width="0.5271%" height="15" fill="rgb(247,123,22)" fg:x="437332" fg:w="14451"/><text x="16.2031%" y="47.50"></text></g><g><title>EmitEvent(391) (556 Execution Cost Units, 0.02%)</title><rect x="16.5511%" y="37" width="0.0203%" height="15" fill="rgb(231,138,38)" fg:x="453725" fg:w="556"/><text x="16.8011%" y="47.50"></text></g><g><title>LockFee(390) (500 Execution Cost Units, 0.02%)</title><rect x="16.5714%" y="37" width="0.0182%" height="15" fill="rgb(231,145,46)" fg:x="454281" fg:w="500"/><text x="16.8214%" y="47.50"></text></g><g><title>OpenSubstate::GlobalFungibleResourceManager(360) (40,014 Execution Cost Units, 1.46%)</title><rect x="16.5896%" y="37" width="1.4596%" height="15" fill="rgb(251,118,11)" fg:x="454781" fg:w="40014"/><text x="16.8396%" y="47.50"></text></g><g><title>OpenSubstate::GlobalFungibleResourceManager(362) (593 Execution Cost Units, 0.02%)</title><rect x="18.0493%" y="37" width="0.0216%" height="15" fill="rgb(217,147,25)" fg:x="494795" fg:w="593"/><text x="18.2993%" y="47.50"></text></g><g><title>OpenSubstate::GlobalFungibleResourceManager(375) (593 Execution Cost Units, 0.02%)</title><rect x="18.0709%" y="37" width="0.0216%" height="15" fill="rgb(247,81,37)" fg:x="495388" fg:w="593"/><text x="18.3209%" y="47.50"></text></g><g><title>OpenSubstate::GlobalFungibleResourceManager(385) (40,001 Execution Cost Units, 1.46%)</title><rect x="18.0925%" y="37" width="1.4592%" height="15" fill="rgb(209,12,38)" fg:x="495981" fg:w="40001"/><text x="18.3425%" y="47.50"></text></g><g><title>OpenSubstate::GlobalFungibleResourceManager(387) (331 Execution Cost Units, 0.01%)</title><rect x="19.5517%" y="37" width="0.0121%" height="15" fill="rgb(227,1,9)" fg:x="535982" fg:w="331"/><text x="19.8017%" y="47.50"></text></g><g><title>OpenSubstate::GlobalPackage(334) (541 Execution Cost Units, 0.02%)</title><rect x="19.5638%" y="37" width="0.0197%" height="15" fill="rgb(248,47,43)" fg:x="536313" fg:w="541"/><text x="19.8138%" y="47.50"></text></g><g><title>OpenSubstate::GlobalPackage(338) (339 Execution Cost Units, 0.01%)</title><rect x="19.5835%" y="37" width="0.0124%" height="15" fill="rgb(221,10,30)" fg:x="536854" fg:w="339"/><text x="19.8335%" y="47.50"></text></g><g><title>OpenSubstate::GlobalPackage(346) (339 Execution Cost Units, 0.01%)</title><rect x="19.5959%" y="37" width="0.0124%" height="15" fill="rgb(210,229,1)" fg:x="537193" fg:w="339"/><text x="19.8459%" y="47.50"></text></g><g><title>OpenSubstate::GlobalPackage(350) (355 Execution Cost Units, 0.01%)</title><rect x="19.6083%" y="37" width="0.0129%" height="15" fill="rgb(222,148,37)" fg:x="537532" fg:w="355"/><text x="19.8583%" y="47.50"></text></g><g><title>OpenSubstate::GlobalPackage(379) (40,292 Execution Cost Units, 1.47%)</title><rect x="19.6212%" y="37" width="1.4698%" height="15" fill="rgb(234,67,33)" fg:x="537887" fg:w="40292"/><text x="19.8712%" y="47.50"></text></g><g><title>OpenSubstate::GlobalPackage(381) (6,153 Execution Cost Units, 0.22%)</title><rect x="21.0910%" y="37" width="0.2245%" height="15" fill="rgb(247,98,35)" fg:x="578179" fg:w="6153"/><text x="21.3410%" y="47.50"></text></g><g><title>OpenSubstate::InternalFungibleVault(342) (535 Execution Cost Units, 0.02%)</title><rect x="21.3154%" y="37" width="0.0195%" height="15" fill="rgb(247,138,52)" fg:x="584332" fg:w="535"/><text x="21.5654%" y="47.50"></text></g><g><title>OpenSubstate::InternalFungibleVault(356) (535 Execution Cost Units, 0.02%)</title><rect x="21.3350%" y="37" width="0.0195%" height="15" fill="rgb(213,79,30)" fg:x="584867" fg:w="535"/><text x="21.5850%" y="47.50"></text></g><g><title>OpenSubstate::InternalFungibleVault(367) (535 Execution Cost Units, 0.02%)</title><rect x="21.3545%" y="37" width="0.0195%" height="15" fill="rgb(246,177,23)" fg:x="585402" fg:w="535"/><text x="21.6045%" y="47.50"></text></g><g><title>OpenSubstate::InternalFungibleVault(371) (535 Execution Cost Units, 0.02%)</title><rect x="21.3740%" y="37" width="0.0195%" height="15" fill="rgb(230,62,27)" fg:x="585937" fg:w="535"/><text x="21.6240%" y="47.50"></text></g><g><title>OpenSubstate::InternalFungibleVault(393) (535 Execution Cost Units, 0.02%)</title><rect x="21.3935%" y="37" width="0.0195%" height="15" fill="rgb(216,154,8)" fg:x="586472" fg:w="535"/><text x="21.6435%" y="47.50"></text></g><g><title>OpenSubstate::InternalFungibleVault(397) (377 Execution Cost Units, 0.01%)</title><rect x="21.4130%" y="37" width="0.0138%" height="15" fill="rgb(244,35,45)" fg:x="587007" fg:w="377"/><text x="21.6630%" y="47.50"></text></g><g><title>QueryActor(354) (500 Execution Cost Units, 0.02%)</title><rect x="21.4268%" y="37" width="0.0182%" height="15" fill="rgb(251,115,12)" fg:x="587384" fg:w="500"/><text x="21.6768%" y="47.50"></text></g><g><title>QueryActor(365) (500 Execution Cost Units, 0.02%)</title><rect x="21.4450%" y="37" width="0.0182%" height="15" fill="rgb(240,54,50)" fg:x="587884" fg:w="500"/><text x="21.6950%" y="47.50"></text></g><g><title>ReadSubstate(335) (351 Execution Cost Units, 0.01%)</title><rect x="21.4632%" y="37" width="0.0128%" height="15" fill="rgb(233,84,52)" fg:x="588384" fg:w="351"/><text x="21.7132%" y="47.50"></text></g><g><title>ReadSubstate(343) (345 Execution Cost Units, 0.01%)</title><rect x="21.4815%" y="37" width="0.0126%" height="15" fill="rgb(207,117,47)" fg:x="588884" fg:w="345"/><text x="21.7315%" y="47.50"></text></g><g><title>ReadSubstate(357) (345 Execution Cost Units, 0.01%)</title><rect x="21.5055%" y="37" width="0.0126%" height="15" fill="rgb(249,43,39)" fg:x="589543" fg:w="345"/><text x="21.7555%" y="47.50"></text></g><g><title>ReadSubstate(363) (403 Execution Cost Units, 0.01%)</title><rect x="21.5181%" y="37" width="0.0147%" height="15" fill="rgb(209,38,44)" fg:x="589888" fg:w="403"/><text x="21.7681%" y="47.50"></text></g><g><title>ReadSubstate(368) (345 Execution Cost Units, 0.01%)</title><rect x="21.5328%" y="37" width="0.0126%" height="15" fill="rgb(236,212,23)" fg:x="590291" fg:w="345"/><text x="21.7828%" y="47.50"></text></g><g><title>ReadSubstate(372) (345 Execution Cost Units, 0.01%)</title><rect x="21.5454%" y="37" width="0.0126%" height="15" fill="rgb(242,79,21)" fg:x="590636" fg:w="345"/><text x="21.7954%" y="47.50"></text></g><g><title>ReadSubstate(376) (403 Execution Cost Units, 0.01%)</title><rect x="21.5580%" y="37" width="0.0147%" height="15" fill="rgb(211,96,35)" fg:x="590981" fg:w="403"/><text x="21.8080%" y="47.50"></text></g><g><title>ReadSubstate(382) (5,963 Execution Cost Units, 0.22%)</title><rect x="21.5727%" y="37" width="0.2175%" height="15" fill="rgb(253,215,40)" fg:x="591384" fg:w="5963"/><text x="21.8227%" y="47.50"></text></g><g><title>ReadSubstate(394) (345 Execution Cost Units, 0.01%)</title><rect x="21.7953%" y="37" width="0.0126%" height="15" fill="rgb(211,81,21)" fg:x="597488" fg:w="345"/><text x="22.0453%" y="47.50"></text></g><g><title>RunNativeCode::lock_fee(353) (45,243 Execution Cost Units, 1.65%)</title><rect x="21.8216%" y="37" width="1.6504%" height="15" fill="rgb(208,190,38)" fg:x="598207" fg:w="45243"/><text x="22.0716%" y="47.50"></text></g><g><title>WriteSubstate(400) (292 Execution Cost Units, 0.01%)</title><rect x="23.4720%" y="37" width="0.0107%" height="15" fill="rgb(235,213,38)" fg:x="643450" fg:w="292"/><text x="23.7220%" y="47.50"></text></g><g><title>Invocation: Method &lt;internal_vault_sim1tz9uaalv8g3ahmwep2trlyj2m3zn7rstm9pwessa3k56me2fcduq2u&gt;::FungibleVault::lock_fee (331) (191,959 Execution Cost Units, 7.00%)</title><rect x="16.4803%" y="53" width="7.0023%" height="15" fill="rgb(237,122,38)" fg:x="451783" fg:w="191959"/><text x="16.7303%" y="63.50">Invocatio..</text></g><g><title>OpenSubstate::GlobalFungibleResourceManager(326) (40,001 Execution Cost Units, 1.46%)</title><rect x="23.4826%" y="53" width="1.4592%" height="15" fill="rgb(244,218,35)" fg:x="643742" fg:w="40001"/><text x="23.7326%" y="63.50"></text></g><g><title>OpenSubstate::GlobalFungibleResourceManager(328) (339 Execution Cost Units, 0.01%)</title><rect x="24.9418%" y="53" width="0.0124%" height="15" fill="rgb(240,68,47)" fg:x="683743" fg:w="339"/><text x="25.1918%" y="63.50"></text></g><g><title>OpenSubstate::GlobalGenericComponent(107) (539 Execution Cost Units, 0.02%)</title><rect x="24.9541%" y="53" width="0.0197%" height="15" fill="rgb(210,16,53)" fg:x="684082" fg:w="539"/><text x="25.2041%" y="63.50"></text></g><g><title>OpenSubstate::GlobalGenericComponent(139) (539 Execution Cost Units, 0.02%)</title><rect x="24.9738%" y="53" width="0.0197%" height="15" fill="rgb(235,124,12)" fg:x="684621" fg:w="539"/><text x="25.2238%" y="63.50"></text></g><g><title>OpenSubstate::GlobalGenericComponent(143) (40,007 Execution Cost Units, 1.46%)</title><rect x="24.9935%" y="53" width="1.4594%" height="15" fill="rgb(224,169,11)" fg:x="685160" fg:w="40007"/><text x="25.2435%" y="63.50"></text></g><g><title>OpenSubstate::GlobalGenericComponent(145) (449 Execution Cost Units, 0.02%)</title><rect x="26.4529%" y="53" width="0.0164%" height="15" fill="rgb(250,166,2)" fg:x="725167" fg:w="449"/><text x="26.7029%" y="63.50"></text></g><g><title>OpenSubstate::GlobalPackage(101) (40,075 Execution Cost Units, 1.46%)</title><rect x="26.4692%" y="53" width="1.4619%" height="15" fill="rgb(242,216,29)" fg:x="725616" fg:w="40075"/><text x="26.7192%" y="63.50"></text></g><g><title>OpenSubstate::GlobalPackage(103) (1,819 Execution Cost Units, 0.07%)</title><rect x="27.9311%" y="53" width="0.0664%" height="15" fill="rgb(230,116,27)" fg:x="765691" fg:w="1819"/><text x="28.1811%" y="63.50"></text></g><g><title>OpenSubstate::GlobalPackage(111) (40,035 Execution Cost Units, 1.46%)</title><rect x="27.9975%" y="53" width="1.4604%" height="15" fill="rgb(228,99,48)" fg:x="767510" fg:w="40035"/><text x="28.2475%" y="63.50"></text></g><g><title>OpenSubstate::GlobalPackage(113) (1,003 Execution Cost Units, 0.04%)</title><rect x="29.4579%" y="53" width="0.0366%" height="15" fill="rgb(253,11,6)" fg:x="807545" fg:w="1003"/><text x="29.7079%" y="63.50"></text></g><g><title>OpenSubstate::GlobalPackage(117) (40,001 Execution Cost Units, 1.46%)</title><rect x="29.4945%" y="53" width="1.4592%" height="15" fill="rgb(247,143,39)" fg:x="808548" fg:w="40001"/><text x="29.7445%" y="63.50"></text></g><g><title>OpenSubstate::GlobalPackage(119) (339 Execution Cost Units, 0.01%)</title><rect x="30.9536%" y="53" width="0.0124%" height="15" fill="rgb(236,97,10)" fg:x="848549" fg:w="339"/><text x="31.2036%" y="63.50"></text></g><g><title>OpenSubstate::GlobalPackage(123) (57,695 Execution Cost Units, 2.10%)</title><rect x="30.9660%" y="53" width="2.1046%" height="15" fill="rgb(233,208,19)" fg:x="848888" fg:w="57695"/><text x="31.2160%" y="63.50">O..</text></g><g><title>OpenSubstate::GlobalPackage(125) (354,209 Execution Cost Units, 12.92%)</title><rect x="33.0706%" y="53" width="12.9209%" height="15" fill="rgb(216,164,2)" fg:x="906583" fg:w="354209"/><text x="33.3206%" y="63.50">OpenSubstate::Globa..</text></g><g><title>OpenSubstate::GlobalPackage(189) (40,027 Execution Cost Units, 1.46%)</title><rect x="45.9915%" y="53" width="1.4601%" height="15" fill="rgb(220,129,5)" fg:x="1260792" fg:w="40027"/><text x="46.2415%" y="63.50"></text></g><g><title>OpenSubstate::GlobalPackage(191) (853 Execution Cost Units, 0.03%)</title><rect x="47.4517%" y="53" width="0.0311%" height="15" fill="rgb(242,17,10)" fg:x="1300819" fg:w="853"/><text x="47.7017%" y="63.50"></text></g><g><title>OpenSubstate::GlobalPackage(274) (40,221 Execution Cost Units, 1.47%)</title><rect x="47.4828%" y="53" width="1.4672%" height="15" fill="rgb(242,107,0)" fg:x="1301672" fg:w="40221"/><text x="47.7328%" y="63.50"></text></g><g><title>OpenSubstate::GlobalPackage(276) (4,739 Execution Cost Units, 0.17%)</title><rect x="48.9500%" y="53" width="0.1729%" height="15" fill="rgb(251,28,31)" fg:x="1341893" fg:w="4739"/><text x="49.2000%" y="63.50"></text></g><g><title>OpenSubstate::GlobalPackage(83) (40,013 Execution Cost Units, 1.46%)</title><rect x="49.1228%" y="53" width="1.4596%" height="15" fill="rgb(233,223,10)" fg:x="1346632" fg:w="40013"/><text x="49.3728%" y="63.50"></text></g><g><title>OpenSubstate::GlobalPackage(85) (573 Execution Cost Units, 0.02%)</title><rect x="50.5824%" y="53" width="0.0209%" height="15" fill="rgb(215,21,27)" fg:x="1386645" fg:w="573"/><text x="50.8324%" y="63.50"></text></g><g><title>OpenSubstate::GlobalPackage(89) (40,001 Execution Cost Units, 1.46%)</title><rect x="50.6034%" y="53" width="1.4592%" height="15" fill="rgb(232,23,21)" fg:x="1387218" fg:w="40001"/><text x="50.8534%" y="63.50"></text></g><g><title>OpenSubstate::GlobalPackage(91) (339 Execution Cost Units, 0.01%)</title><rect x="52.0625%" y="53" width="0.0124%" height="15" fill="rgb(244,5,23)" fg:x="1427219" fg:w="339"/><text x="52.3125%" y="63.50"></text></g><g><title>OpenSubstate::GlobalPackage(95) (40,001 Execution Cost Units, 1.46%)</title><rect x="52.0749%" y="53" width="1.4592%" height="15" fill="rgb(226,81,46)" fg:x="1427558" fg:w="40001"/><text x="52.3249%" y="63.50"></text></g><g><title>OpenSubstate::GlobalPackage(97) (339 Execution Cost Units, 0.01%)</title><rect x="53.5341%" y="53" width="0.0124%" height="15" fill="rgb(247,70,30)" fg:x="1467559" fg:w="339"/><text x="53.7841%" y="63.50"></text></g><g><title>OpenSubstate::InternalFungibleVault(165) (40,011 Execution Cost Units, 1.46%)</title><rect x="53.5464%" y="53" width="1.4595%" height="15" fill="rgb(212,68,19)" fg:x="1467898" fg:w="40011"/><text x="53.7964%" y="63.50"></text></g><g><title>OpenSubstate::InternalFungibleVault(167) (535 Execution Cost Units, 0.02%)</title><rect x="55.0060%" y="53" width="0.0195%" height="15" fill="rgb(240,187,13)" fg:x="1507909" fg:w="535"/><text x="55.2560%" y="63.50"></text></g><g><title>OpenSubstate::InternalFungibleVault(171) (535 Execution Cost Units, 0.02%)</title><rect x="55.0255%" y="53" width="0.0195%" height="15" fill="rgb(223,113,26)" fg:x="1508444" fg:w="535"/><text x="55.2755%" y="63.50"></text></g><g><title>OpenSubstate::InternalFungibleVault(185) (535 Execution Cost Units, 0.02%)</title><rect x="55.0450%" y="53" width="0.0195%" height="15" fill="rgb(206,192,2)" fg:x="1508979" fg:w="535"/><text x="55.2950%" y="63.50"></text></g><g><title>OpenSubstate::InternalFungibleVault(195) (535 Execution Cost Units, 0.02%)</title><rect x="55.0645%" y="53" width="0.0195%" height="15" fill="rgb(241,108,4)" fg:x="1509514" fg:w="535"/><text x="55.3145%" y="63.50"></text></g><g><title>OpenSubstate::InternalFungibleVault(300) (535 Execution Cost Units, 0.02%)</title><rect x="55.0840%" y="53" width="0.0195%" height="15" fill="rgb(247,173,49)" fg:x="1510049" fg:w="535"/><text x="55.3340%" y="63.50"></text></g><g><title>OpenSubstate::InternalFungibleVault(304) (535 Execution Cost Units, 0.02%)</title><rect x="55.1035%" y="53" width="0.0195%" height="15" fill="rgb(224,114,35)" fg:x="1510584" fg:w="535"/><text x="55.3535%" y="63.50"></text></g><g><title>OpenSubstate::InternalFungibleVault(318) (535 Execution Cost Units, 0.02%)</title><rect x="55.1230%" y="53" width="0.0195%" height="15" fill="rgb(245,159,27)" fg:x="1511119" fg:w="535"/><text x="55.3730%" y="63.50"></text></g><g><title>OpenSubstate::InternalFungibleVault(322) (535 Execution Cost Units, 0.02%)</title><rect x="55.1426%" y="53" width="0.0195%" height="15" fill="rgb(245,172,44)" fg:x="1511654" fg:w="535"/><text x="55.3926%" y="63.50"></text></g><g><title>OpenSubstate::InternalFungibleVault(434) (535 Execution Cost Units, 0.02%)</title><rect x="55.1621%" y="53" width="0.0195%" height="15" fill="rgb(236,23,11)" fg:x="1512189" fg:w="535"/><text x="55.4121%" y="63.50"></text></g><g><title>OpenSubstate::InternalGenericComponent(175) (605 Execution Cost Units, 0.02%)</title><rect x="55.1816%" y="53" width="0.0221%" height="15" fill="rgb(205,117,38)" fg:x="1512724" fg:w="605"/><text x="55.4316%" y="63.50"></text></g><g><title>OpenSubstate::InternalGenericComponent(263) (667 Execution Cost Units, 0.02%)</title><rect x="55.2037%" y="53" width="0.0243%" height="15" fill="rgb(237,72,25)" fg:x="1513329" fg:w="667"/><text x="55.4537%" y="63.50"></text></g><g><title>OpenSubstate::InternalGenericComponent(270) (463 Execution Cost Units, 0.02%)</title><rect x="55.2280%" y="53" width="0.0169%" height="15" fill="rgb(244,70,9)" fg:x="1513996" fg:w="463"/><text x="55.4780%" y="63.50"></text></g><g><title>OpenSubstate::InternalGenericComponent(308) (605 Execution Cost Units, 0.02%)</title><rect x="55.2449%" y="53" width="0.0221%" height="15" fill="rgb(217,125,39)" fg:x="1514459" fg:w="605"/><text x="55.4949%" y="63.50"></text></g><g><title>OpenSubstate::InternalGenericComponent(406) (667 Execution Cost Units, 0.02%)</title><rect x="55.2670%" y="53" width="0.0243%" height="15" fill="rgb(235,36,10)" fg:x="1515064" fg:w="667"/><text x="55.5170%" y="63.50"></text></g><g><title>OpenSubstate::InternalGenericComponent(413) (463 Execution Cost Units, 0.02%)</title><rect x="55.2913%" y="53" width="0.0169%" height="15" fill="rgb(251,123,47)" fg:x="1515731" fg:w="463"/><text x="55.5413%" y="63.50"></text></g><g><title>OpenSubstate::InternalKeyValueStore(438) (40,011 Execution Cost Units, 1.46%)</title><rect x="55.3082%" y="53" width="1.4595%" height="15" fill="rgb(221,13,13)" fg:x="1516194" fg:w="40011"/><text x="55.5582%" y="63.50"></text></g><g><title>OpenSubstate::InternalKeyValueStore(440) (525 Execution Cost Units, 0.02%)</title><rect x="56.7677%" y="53" width="0.0192%" height="15" fill="rgb(238,131,9)" fg:x="1556205" fg:w="525"/><text x="57.0177%" y="63.50"></text></g><g><title>PrepareWasmCode(128) (353,866 Execution Cost Units, 12.91%)</title><rect x="56.7877%" y="53" width="12.9084%" height="15" fill="rgb(211,50,8)" fg:x="1556754" fg:w="353866"/><text x="57.0377%" y="63.50">PrepareWasmCode(128)</text></g><g><title>ReadSubstate(104) (1,629 Execution Cost Units, 0.06%)</title><rect x="69.6962%" y="53" width="0.0594%" height="15" fill="rgb(245,182,24)" fg:x="1910620" fg:w="1629"/><text x="69.9462%" y="63.50"></text></g><g><title>ReadSubstate(108) (349 Execution Cost Units, 0.01%)</title><rect x="69.7556%" y="53" width="0.0127%" height="15" fill="rgb(242,14,37)" fg:x="1912249" fg:w="349"/><text x="70.0056%" y="63.50"></text></g><g><title>ReadSubstate(114) (813 Execution Cost Units, 0.03%)</title><rect x="69.7683%" y="53" width="0.0297%" height="15" fill="rgb(246,228,12)" fg:x="1912598" fg:w="813"/><text x="70.0183%" y="63.50"></text></g><g><title>ReadSubstate(126) (354,019 Execution Cost Units, 12.91%)</title><rect x="69.8034%" y="53" width="12.9140%" height="15" fill="rgb(213,55,15)" fg:x="1913560" fg:w="354019"/><text x="70.0534%" y="63.50">ReadSubstate(126)</text></g><g><title>ReadSubstate(140) (349 Execution Cost Units, 0.01%)</title><rect x="82.7174%" y="53" width="0.0127%" height="15" fill="rgb(209,9,3)" fg:x="2267579" fg:w="349"/><text x="82.9674%" y="63.50"></text></g><g><title>ReadSubstate(168) (345 Execution Cost Units, 0.01%)</title><rect x="82.7490%" y="53" width="0.0126%" height="15" fill="rgb(230,59,30)" fg:x="2268446" fg:w="345"/><text x="82.9990%" y="63.50"></text></g><g><title>ReadSubstate(172) (345 Execution Cost Units, 0.01%)</title><rect x="82.7616%" y="53" width="0.0126%" height="15" fill="rgb(209,121,21)" fg:x="2268791" fg:w="345"/><text x="83.0116%" y="63.50"></text></g><g><title>ReadSubstate(176) (367 Execution Cost Units, 0.01%)</title><rect x="82.7742%" y="53" width="0.0134%" height="15" fill="rgb(220,109,13)" fg:x="2269136" fg:w="367"/><text x="83.0242%" y="63.50"></text></g><g><title>ReadSubstate(186) (345 Execution Cost Units, 0.01%)</title><rect x="82.7876%" y="53" width="0.0126%" height="15" fill="rgb(232,18,1)" fg:x="2269503" fg:w="345"/><text x="83.0376%" y="63.50"></text></g><g><title>ReadSubstate(192) (663 Execution Cost Units, 0.02%)</title><rect x="82.8002%" y="53" width="0.0242%" height="15" fill="rgb(215,41,42)" fg:x="2269848" fg:w="663"/><text x="83.0502%" y="63.50"></text></g><g><title>ReadSubstate(196) (345 Execution Cost Units, 0.01%)</title><rect x="82.8244%" y="53" width="0.0126%" height="15" fill="rgb(224,123,36)" fg:x="2270511" fg:w="345"/><text x="83.0744%" y="63.50"></text></g><g><title>ReadSubstate(264) (429 Execution Cost Units, 0.02%)</title><rect x="82.8370%" y="53" width="0.0156%" height="15" fill="rgb(240,125,3)" fg:x="2270856" fg:w="429"/><text x="83.0870%" y="63.50"></text></g><g><title>ReadSubstate(277) (4,549 Execution Cost Units, 0.17%)</title><rect x="82.8608%" y="53" width="0.1659%" height="15" fill="rgb(205,98,50)" fg:x="2271510" fg:w="4549"/><text x="83.1108%" y="63.50"></text></g><g><title>ReadSubstate(301) (345 Execution Cost Units, 0.01%)</title><rect x="83.0268%" y="53" width="0.0126%" height="15" fill="rgb(205,185,37)" fg:x="2276059" fg:w="345"/><text x="83.2768%" y="63.50"></text></g><g><title>ReadSubstate(305) (345 Execution Cost Units, 0.01%)</title><rect x="83.0393%" y="53" width="0.0126%" height="15" fill="rgb(238,207,15)" fg:x="2276404" fg:w="345"/><text x="83.2893%" y="63.50"></text></g><g><title>ReadSubstate(309) (367 Execution Cost Units, 0.01%)</title><rect x="83.0519%" y="53" width="0.0134%" height="15" fill="rgb(213,199,42)" fg:x="2276749" fg:w="367"/><text x="83.3019%" y="63.50"></text></g><g><title>ReadSubstate(319) (345 Execution Cost Units, 0.01%)</title><rect x="83.0653%" y="53" width="0.0126%" height="15" fill="rgb(235,201,11)" fg:x="2277116" fg:w="345"/><text x="83.3153%" y="63.50"></text></g><g><title>ReadSubstate(323) (345 Execution Cost Units, 0.01%)</title><rect x="83.0779%" y="53" width="0.0126%" height="15" fill="rgb(207,46,11)" fg:x="2277461" fg:w="345"/><text x="83.3279%" y="63.50"></text></g><g><title>ReadSubstate(407) (429 Execution Cost Units, 0.02%)</title><rect x="83.0959%" y="53" width="0.0156%" height="15" fill="rgb(241,35,35)" fg:x="2277955" fg:w="429"/><text x="83.3459%" y="63.50"></text></g><g><title>ReadSubstate(435) (345 Execution Cost Units, 0.01%)</title><rect x="83.1198%" y="53" width="0.0126%" height="15" fill="rgb(243,32,47)" fg:x="2278609" fg:w="345"/><text x="83.3698%" y="63.50"></text></g><g><title>ReadSubstate(441) (335 Execution Cost Units, 0.01%)</title><rect x="83.1324%" y="53" width="0.0122%" height="15" fill="rgb(247,202,23)" fg:x="2278954" fg:w="335"/><text x="83.3824%" y="63.50"></text></g><g><title>ReadSubstate(86) (383 Execution Cost Units, 0.01%)</title><rect x="83.1446%" y="53" width="0.0140%" height="15" fill="rgb(219,102,11)" fg:x="2279289" fg:w="383"/><text x="83.3946%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(129) (590 Execution Cost Units, 0.02%)</title><rect x="83.1694%" y="53" width="0.0215%" height="15" fill="rgb(243,110,44)" fg:x="2279970" fg:w="590"/><text x="83.4194%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(130) (334 Execution Cost Units, 0.01%)</title><rect x="83.1909%" y="53" width="0.0122%" height="15" fill="rgb(222,74,54)" fg:x="2280560" fg:w="334"/><text x="83.4409%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(131) (5,004 Execution Cost Units, 0.18%)</title><rect x="83.2031%" y="53" width="0.1825%" height="15" fill="rgb(216,99,12)" fg:x="2280894" fg:w="5004"/><text x="83.4531%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(132) (334 Execution Cost Units, 0.01%)</title><rect x="83.3857%" y="53" width="0.0122%" height="15" fill="rgb(226,22,26)" fg:x="2285898" fg:w="334"/><text x="83.6357%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(133) (353 Execution Cost Units, 0.01%)</title><rect x="83.3979%" y="53" width="0.0129%" height="15" fill="rgb(217,163,10)" fg:x="2286232" fg:w="353"/><text x="83.6479%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(134) (358 Execution Cost Units, 0.01%)</title><rect x="83.4107%" y="53" width="0.0131%" height="15" fill="rgb(213,25,53)" fg:x="2286585" fg:w="358"/><text x="83.6607%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(135) (349 Execution Cost Units, 0.01%)</title><rect x="83.4238%" y="53" width="0.0127%" height="15" fill="rgb(252,105,26)" fg:x="2286943" fg:w="349"/><text x="83.6738%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(136) (347 Execution Cost Units, 0.01%)</title><rect x="83.4365%" y="53" width="0.0127%" height="15" fill="rgb(220,39,43)" fg:x="2287292" fg:w="347"/><text x="83.6865%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(137) (341 Execution Cost Units, 0.01%)</title><rect x="83.4492%" y="53" width="0.0124%" height="15" fill="rgb(229,68,48)" fg:x="2287639" fg:w="341"/><text x="83.6992%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(148) (338 Execution Cost Units, 0.01%)</title><rect x="83.4616%" y="53" width="0.0123%" height="15" fill="rgb(252,8,32)" fg:x="2287980" fg:w="338"/><text x="83.7116%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(149) (336 Execution Cost Units, 0.01%)</title><rect x="83.4739%" y="53" width="0.0123%" height="15" fill="rgb(223,20,43)" fg:x="2288318" fg:w="336"/><text x="83.7239%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(150) (341 Execution Cost Units, 0.01%)</title><rect x="83.4862%" y="53" width="0.0124%" height="15" fill="rgb(229,81,49)" fg:x="2288654" fg:w="341"/><text x="83.7362%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(151) (343 Execution Cost Units, 0.01%)</title><rect x="83.4986%" y="53" width="0.0125%" height="15" fill="rgb(236,28,36)" fg:x="2288995" fg:w="343"/><text x="83.7486%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(152) (344 Execution Cost Units, 0.01%)</title><rect x="83.5112%" y="53" width="0.0125%" height="15" fill="rgb(249,185,26)" fg:x="2289338" fg:w="344"/><text x="83.7612%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(153) (394 Execution Cost Units, 0.01%)</title><rect x="83.5237%" y="53" width="0.0144%" height="15" fill="rgb(249,174,33)" fg:x="2289682" fg:w="394"/><text x="83.7737%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(154) (337 Execution Cost Units, 0.01%)</title><rect x="83.5381%" y="53" width="0.0123%" height="15" fill="rgb(233,201,37)" fg:x="2290076" fg:w="337"/><text x="83.7881%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(155) (338 Execution Cost Units, 0.01%)</title><rect x="83.5504%" y="53" width="0.0123%" height="15" fill="rgb(221,78,26)" fg:x="2290413" fg:w="338"/><text x="83.8004%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(156) (380 Execution Cost Units, 0.01%)</title><rect x="83.5627%" y="53" width="0.0139%" height="15" fill="rgb(250,127,30)" fg:x="2290751" fg:w="380"/><text x="83.8127%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(157) (343 Execution Cost Units, 0.01%)</title><rect x="83.5766%" y="53" width="0.0125%" height="15" fill="rgb(230,49,44)" fg:x="2291131" fg:w="343"/><text x="83.8266%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(158) (338 Execution Cost Units, 0.01%)</title><rect x="83.5891%" y="53" width="0.0123%" height="15" fill="rgb(229,67,23)" fg:x="2291474" fg:w="338"/><text x="83.8391%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(159) (339 Execution Cost Units, 0.01%)</title><rect x="83.6014%" y="53" width="0.0124%" height="15" fill="rgb(249,83,47)" fg:x="2291812" fg:w="339"/><text x="83.8514%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(160) (340 Execution Cost Units, 0.01%)</title><rect x="83.6138%" y="53" width="0.0124%" height="15" fill="rgb(215,43,3)" fg:x="2292151" fg:w="340"/><text x="83.8638%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(161) (366 Execution Cost Units, 0.01%)</title><rect x="83.6262%" y="53" width="0.0134%" height="15" fill="rgb(238,154,13)" fg:x="2292491" fg:w="366"/><text x="83.8762%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(162) (340 Execution Cost Units, 0.01%)</title><rect x="83.6395%" y="53" width="0.0124%" height="15" fill="rgb(219,56,2)" fg:x="2292857" fg:w="340"/><text x="83.8895%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(163) (333 Execution Cost Units, 0.01%)</title><rect x="83.6519%" y="53" width="0.0121%" height="15" fill="rgb(233,0,4)" fg:x="2293197" fg:w="333"/><text x="83.9019%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(282) (335 Execution Cost Units, 0.01%)</title><rect x="83.6641%" y="53" width="0.0122%" height="15" fill="rgb(235,30,7)" fg:x="2293530" fg:w="335"/><text x="83.9141%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(283) (352 Execution Cost Units, 0.01%)</title><rect x="83.6763%" y="53" width="0.0128%" height="15" fill="rgb(250,79,13)" fg:x="2293865" fg:w="352"/><text x="83.9263%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(284) (338 Execution Cost Units, 0.01%)</title><rect x="83.6891%" y="53" width="0.0123%" height="15" fill="rgb(211,146,34)" fg:x="2294217" fg:w="338"/><text x="83.9391%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(285) (335 Execution Cost Units, 0.01%)</title><rect x="83.7015%" y="53" width="0.0122%" height="15" fill="rgb(228,22,38)" fg:x="2294555" fg:w="335"/><text x="83.9515%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(286) (352 Execution Cost Units, 0.01%)</title><rect x="83.7137%" y="53" width="0.0128%" height="15" fill="rgb(235,168,5)" fg:x="2294890" fg:w="352"/><text x="83.9637%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(287) (484 Execution Cost Units, 0.02%)</title><rect x="83.7265%" y="53" width="0.0177%" height="15" fill="rgb(221,155,16)" fg:x="2295242" fg:w="484"/><text x="83.9765%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(288) (352 Execution Cost Units, 0.01%)</title><rect x="83.7442%" y="53" width="0.0128%" height="15" fill="rgb(215,215,53)" fg:x="2295726" fg:w="352"/><text x="83.9942%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(289) (343 Execution Cost Units, 0.01%)</title><rect x="83.7570%" y="53" width="0.0125%" height="15" fill="rgb(223,4,10)" fg:x="2296078" fg:w="343"/><text x="84.0070%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(290) (445 Execution Cost Units, 0.02%)</title><rect x="83.7695%" y="53" width="0.0162%" height="15" fill="rgb(234,103,6)" fg:x="2296421" fg:w="445"/><text x="84.0195%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(291) (341 Execution Cost Units, 0.01%)</title><rect x="83.7858%" y="53" width="0.0124%" height="15" fill="rgb(227,97,0)" fg:x="2296866" fg:w="341"/><text x="84.0358%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(292) (417 Execution Cost Units, 0.02%)</title><rect x="83.7982%" y="53" width="0.0152%" height="15" fill="rgb(234,150,53)" fg:x="2297207" fg:w="417"/><text x="84.0482%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(293) (337 Execution Cost Units, 0.01%)</title><rect x="83.8134%" y="53" width="0.0123%" height="15" fill="rgb(228,201,54)" fg:x="2297624" fg:w="337"/><text x="84.0634%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(294) (395 Execution Cost Units, 0.01%)</title><rect x="83.8257%" y="53" width="0.0144%" height="15" fill="rgb(222,22,37)" fg:x="2297961" fg:w="395"/><text x="84.0757%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(295) (336 Execution Cost Units, 0.01%)</title><rect x="83.8401%" y="53" width="0.0123%" height="15" fill="rgb(237,53,32)" fg:x="2298356" fg:w="336"/><text x="84.0901%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(296) (337 Execution Cost Units, 0.01%)</title><rect x="83.8524%" y="53" width="0.0123%" height="15" fill="rgb(233,25,53)" fg:x="2298692" fg:w="337"/><text x="84.1024%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(297) (353 Execution Cost Units, 0.01%)</title><rect x="83.8647%" y="53" width="0.0129%" height="15" fill="rgb(210,40,34)" fg:x="2299029" fg:w="353"/><text x="84.1147%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(298) (361 Execution Cost Units, 0.01%)</title><rect x="83.8775%" y="53" width="0.0132%" height="15" fill="rgb(241,220,44)" fg:x="2299382" fg:w="361"/><text x="84.1275%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(419) (370 Execution Cost Units, 0.01%)</title><rect x="83.8907%" y="53" width="0.0135%" height="15" fill="rgb(235,28,35)" fg:x="2299743" fg:w="370"/><text x="84.1407%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(420) (358 Execution Cost Units, 0.01%)</title><rect x="83.9042%" y="53" width="0.0131%" height="15" fill="rgb(210,56,17)" fg:x="2300113" fg:w="358"/><text x="84.1542%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(421) (336 Execution Cost Units, 0.01%)</title><rect x="83.9173%" y="53" width="0.0123%" height="15" fill="rgb(224,130,29)" fg:x="2300471" fg:w="336"/><text x="84.1673%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(422) (334 Execution Cost Units, 0.01%)</title><rect x="83.9295%" y="53" width="0.0122%" height="15" fill="rgb(235,212,8)" fg:x="2300807" fg:w="334"/><text x="84.1795%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(423) (340 Execution Cost Units, 0.01%)</title><rect x="83.9417%" y="53" width="0.0124%" height="15" fill="rgb(223,33,50)" fg:x="2301141" fg:w="340"/><text x="84.1917%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(424) (339 Execution Cost Units, 0.01%)</title><rect x="83.9541%" y="53" width="0.0124%" height="15" fill="rgb(219,149,13)" fg:x="2301481" fg:w="339"/><text x="84.2041%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(425) (352 Execution Cost Units, 0.01%)</title><rect x="83.9665%" y="53" width="0.0128%" height="15" fill="rgb(250,156,29)" fg:x="2301820" fg:w="352"/><text x="84.2165%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(426) (342 Execution Cost Units, 0.01%)</title><rect x="83.9793%" y="53" width="0.0125%" height="15" fill="rgb(216,193,19)" fg:x="2302172" fg:w="342"/><text x="84.2293%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(427) (341 Execution Cost Units, 0.01%)</title><rect x="83.9918%" y="53" width="0.0124%" height="15" fill="rgb(216,135,14)" fg:x="2302514" fg:w="341"/><text x="84.2418%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(428) (335 Execution Cost Units, 0.01%)</title><rect x="84.0042%" y="53" width="0.0122%" height="15" fill="rgb(241,47,5)" fg:x="2302855" fg:w="335"/><text x="84.2542%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(429) (356 Execution Cost Units, 0.01%)</title><rect x="84.0165%" y="53" width="0.0130%" height="15" fill="rgb(233,42,35)" fg:x="2303190" fg:w="356"/><text x="84.2665%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(430) (338 Execution Cost Units, 0.01%)</title><rect x="84.0294%" y="53" width="0.0123%" height="15" fill="rgb(231,13,6)" fg:x="2303546" fg:w="338"/><text x="84.2794%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(431) (340 Execution Cost Units, 0.01%)</title><rect x="84.0418%" y="53" width="0.0124%" height="15" fill="rgb(207,181,40)" fg:x="2303884" fg:w="340"/><text x="84.2918%" y="63.50"></text></g><g><title>RunWasmCode::Faucet_lock_fee(432) (335 Execution Cost Units, 0.01%)</title><rect x="84.0542%" y="53" width="0.0122%" height="15" fill="rgb(254,173,49)" fg:x="2304224" fg:w="335"/><text x="84.3042%" y="63.50"></text></g><g><title>WriteSubstate(265) (582 Execution Cost Units, 0.02%)</title><rect x="84.0664%" y="53" width="0.0212%" height="15" fill="rgb(221,1,38)" fg:x="2304559" fg:w="582"/><text x="84.3164%" y="63.50"></text></g><g><title>WriteSubstate(408) (582 Execution Cost Units, 0.02%)</title><rect x="84.0876%" y="53" width="0.0212%" height="15" fill="rgb(206,124,46)" fg:x="2305141" fg:w="582"/><text x="84.3376%" y="63.50"></text></g><g><title>WriteSubstate(443) (364 Execution Cost Units, 0.01%)</title><rect x="84.1088%" y="53" width="0.0133%" height="15" fill="rgb(249,21,11)" fg:x="2305723" fg:w="364"/><text x="84.3588%" y="63.50"></text></g><g><title>Invocation: Method &lt;component_sim1cptxxxxxxxxxfaucetxxxxxxxxx000527798379xxxxxxxxxhkrefh&gt;::Faucet::lock_fee (80) (2,185,883 Execution Cost Units, 79.74%)</title><rect x="4.3848%" y="69" width="79.7373%" height="15" fill="rgb(222,201,40)" fg:x="120204" fg:w="2185883"/><text x="4.6348%" y="79.50">Invocation: Method &lt;component_sim1cptxxxxxxxxxfaucetxxxxxxxxx000527798379xxxxxxxxxhkrefh&gt;::Faucet::lock_fee (80)</text></g><g><title>OpenSubstate::GlobalGenericComponent(53) (539 Execution Cost Units, 0.02%)</title><rect x="84.1221%" y="69" width="0.0197%" height="15" fill="rgb(235,61,29)" fg:x="2306087" fg:w="539"/><text x="84.3721%" y="79.50"></text></g><g><title>OpenSubstate::GlobalGenericComponent(57) (539 Execution Cost Units, 0.02%)</title><rect x="84.1418%" y="69" width="0.0197%" height="15" fill="rgb(219,207,3)" fg:x="2306626" fg:w="539"/><text x="84.3918%" y="79.50"></text></g><g><title>OpenSubstate::GlobalGenericComponent(67) (539 Execution Cost Units, 0.02%)</title><rect x="84.1615%" y="69" width="0.0197%" height="15" fill="rgb(222,56,46)" fg:x="2307165" fg:w="539"/><text x="84.4115%" y="79.50"></text></g><g><title>OpenSubstate::GlobalGenericComponent(77) (539 Execution Cost Units, 0.02%)</title><rect x="84.1811%" y="69" width="0.0197%" height="15" fill="rgb(239,76,54)" fg:x="2307704" fg:w="539"/><text x="84.4311%" y="79.50"></text></g><g><title>OpenSubstate::GlobalPackage(17) (40,001 Execution Cost Units, 1.46%)</title><rect x="84.2008%" y="69" width="1.4592%" height="15" fill="rgb(231,124,27)" fg:x="2308243" fg:w="40001"/><text x="84.4508%" y="79.50"></text></g><g><title>OpenSubstate::GlobalPackage(19) (339 Execution Cost Units, 0.01%)</title><rect x="85.6599%" y="69" width="0.0124%" height="15" fill="rgb(249,195,6)" fg:x="2348244" fg:w="339"/><text x="85.9099%" y="79.50"></text></g><g><title>OpenSubstate::GlobalPackage(23) (40,021 Execution Cost Units, 1.46%)</title><rect x="85.6723%" y="69" width="1.4599%" height="15" fill="rgb(237,174,47)" fg:x="2348583" fg:w="40021"/><text x="85.9223%" y="79.50"></text></g><g><title>OpenSubstate::GlobalPackage(25) (737 Execution Cost Units, 0.03%)</title><rect x="87.1322%" y="69" width="0.0269%" height="15" fill="rgb(206,201,31)" fg:x="2388604" fg:w="737"/><text x="87.3822%" y="79.50"></text></g><g><title>OpenSubstate::GlobalPackage(29) (40,039 Execution Cost Units, 1.46%)</title><rect x="87.1591%" y="69" width="1.4606%" height="15" fill="rgb(231,57,52)" fg:x="2389341" fg:w="40039"/><text x="87.4091%" y="79.50"></text></g><g><title>OpenSubstate::GlobalPackage(31) (1,095 Execution Cost Units, 0.04%)</title><rect x="88.6196%" y="69" width="0.0399%" height="15" fill="rgb(248,177,22)" fg:x="2429380" fg:w="1095"/><text x="88.8696%" y="79.50"></text></g><g><title>OpenSubstate::GlobalPackage(35) (40,001 Execution Cost Units, 1.46%)</title><rect x="88.6596%" y="69" width="1.4592%" height="15" fill="rgb(215,211,37)" fg:x="2430475" fg:w="40001"/><text x="88.9096%" y="79.50"></text></g><g><title>OpenSubstate::GlobalPackage(37) (339 Execution Cost Units, 0.01%)</title><rect x="90.1188%" y="69" width="0.0124%" height="15" fill="rgb(241,128,51)" fg:x="2470476" fg:w="339"/><text x="90.3688%" y="79.50"></text></g><g><title>OpenSubstate::GlobalPackage(41) (40,002 Execution Cost Units, 1.46%)</title><rect x="90.1311%" y="69" width="1.4592%" height="15" fill="rgb(227,165,31)" fg:x="2470815" fg:w="40002"/><text x="90.3811%" y="79.50"></text></g><g><title>OpenSubstate::GlobalPackage(43) (355 Execution Cost Units, 0.01%)</title><rect x="91.5903%" y="69" width="0.0129%" height="15" fill="rgb(228,167,24)" fg:x="2510817" fg:w="355"/><text x="91.8403%" y="79.50"></text></g><g><title>OpenSubstate::GlobalPackage(469) (40,002 Execution Cost Units, 1.46%)</title><rect x="91.6033%" y="69" width="1.4592%" height="15" fill="rgb(228,143,12)" fg:x="2511172" fg:w="40002"/><text x="91.8533%" y="79.50"></text></g><g><title>OpenSubstate::GlobalPackage(471) (349 Execution Cost Units, 0.01%)</title><rect x="93.0625%" y="69" width="0.0127%" height="15" fill="rgb(249,149,8)" fg:x="2551174" fg:w="349"/><text x="93.3125%" y="79.50"></text></g><g><title>OpenSubstate::GlobalPackage(479) (40,204 Execution Cost Units, 1.47%)</title><rect x="93.0752%" y="69" width="1.4666%" height="15" fill="rgb(243,35,44)" fg:x="2551523" fg:w="40204"/><text x="93.3252%" y="79.50"></text></g><g><title>OpenSubstate::GlobalPackage(481) (4,389 Execution Cost Units, 0.16%)</title><rect x="94.5418%" y="69" width="0.1601%" height="15" fill="rgb(246,89,9)" fg:x="2591727" fg:w="4389"/><text x="94.7918%" y="79.50"></text></g><g><title>OpenSubstate::GlobalPackage(71) (40,002 Execution Cost Units, 1.46%)</title><rect x="94.7019%" y="69" width="1.4592%" height="15" fill="rgb(233,213,13)" fg:x="2596116" fg:w="40002"/><text x="94.9519%" y="79.50"></text></g><g><title>OpenSubstate::GlobalPackage(73) (349 Execution Cost Units, 0.01%)</title><rect x="96.1611%" y="69" width="0.0127%" height="15" fill="rgb(233,141,41)" fg:x="2636118" fg:w="349"/><text x="96.4111%" y="79.50"></text></g><g><title>OpenSubstate::InternalGenericComponent(449) (605 Execution Cost Units, 0.02%)</title><rect x="96.1738%" y="69" width="0.0221%" height="15" fill="rgb(239,167,4)" fg:x="2636467" fg:w="605"/><text x="96.4238%" y="79.50"></text></g><g><title>OpenSubstate::InternalGenericComponent(456) (463 Execution Cost Units, 0.02%)</title><rect x="96.1959%" y="69" width="0.0169%" height="15" fill="rgb(209,217,16)" fg:x="2637072" fg:w="463"/><text x="96.4459%" y="79.50"></text></g><g><title>OpenSubstate::InternalGenericComponent(475) (461 Execution Cost Units, 0.02%)</title><rect x="96.2128%" y="69" width="0.0168%" height="15" fill="rgb(219,88,35)" fg:x="2637535" fg:w="461"/><text x="96.4628%" y="79.50"></text></g><g><title>OpenSubstate::InternalGenericComponent(536) (605 Execution Cost Units, 0.02%)</title><rect x="96.2296%" y="69" width="0.0221%" height="15" fill="rgb(220,193,23)" fg:x="2637996" fg:w="605"/><text x="96.4796%" y="79.50"></text></g><g><title>OpenSubstate::InternalGenericComponent(543) (463 Execution Cost Units, 0.02%)</title><rect x="96.2517%" y="69" width="0.0169%" height="15" fill="rgb(230,90,52)" fg:x="2638601" fg:w="463"/><text x="96.5017%" y="79.50"></text></g><g><title>ReadSubstate(26) (547 Execution Cost Units, 0.02%)</title><rect x="96.2753%" y="69" width="0.0200%" height="15" fill="rgb(252,106,19)" fg:x="2639249" fg:w="547"/><text x="96.5253%" y="79.50"></text></g><g><title>ReadSubstate(32) (905 Execution Cost Units, 0.03%)</title><rect x="96.2953%" y="69" width="0.0330%" height="15" fill="rgb(206,74,20)" fg:x="2639796" fg:w="905"/><text x="96.5453%" y="79.50"></text></g><g><title>ReadSubstate(450) (367 Execution Cost Units, 0.01%)</title><rect x="96.3397%" y="69" width="0.0134%" height="15" fill="rgb(230,138,44)" fg:x="2641015" fg:w="367"/><text x="96.5897%" y="79.50"></text></g><g><title>ReadSubstate(482) (4,199 Execution Cost Units, 0.15%)</title><rect x="96.3753%" y="69" width="0.1532%" height="15" fill="rgb(235,182,43)" fg:x="2641989" fg:w="4199"/><text x="96.6253%" y="79.50"></text></g><g><title>ReadSubstate(537) (367 Execution Cost Units, 0.01%)</title><rect x="96.5284%" y="69" width="0.0134%" height="15" fill="rgb(242,16,51)" fg:x="2646188" fg:w="367"/><text x="96.7784%" y="79.50"></text></g><g><title>ReadSubstate(54) (349 Execution Cost Units, 0.01%)</title><rect x="96.5418%" y="69" width="0.0127%" height="15" fill="rgb(248,9,4)" fg:x="2646555" fg:w="349"/><text x="96.7918%" y="79.50"></text></g><g><title>ReadSubstate(58) (349 Execution Cost Units, 0.01%)</title><rect x="96.5628%" y="69" width="0.0127%" height="15" fill="rgb(210,31,22)" fg:x="2647129" fg:w="349"/><text x="96.8128%" y="79.50"></text></g><g><title>ReadSubstate(68) (349 Execution Cost Units, 0.01%)</title><rect x="96.5755%" y="69" width="0.0127%" height="15" fill="rgb(239,54,39)" fg:x="2647478" fg:w="349"/><text x="96.8255%" y="79.50"></text></g><g><title>ReadSubstate(78) (349 Execution Cost Units, 0.01%)</title><rect x="96.5940%" y="69" width="0.0127%" height="15" fill="rgb(230,99,41)" fg:x="2647986" fg:w="349"/><text x="96.8440%" y="79.50"></text></g><g><title>WriteSubstate(451) (520 Execution Cost Units, 0.02%)</title><rect x="96.6068%" y="69" width="0.0190%" height="15" fill="rgb(253,106,12)" fg:x="2648335" fg:w="520"/><text x="96.8568%" y="79.50"></text></g><g><title>WriteSubstate(538) (520 Execution Cost Units, 0.02%)</title><rect x="96.6257%" y="69" width="0.0190%" height="15" fill="rgb(213,46,41)" fg:x="2648855" fg:w="520"/><text x="96.8757%" y="79.50"></text></g><g><title>Invocation: Function &lt;package_sim1pkgxxxxxxxxxtxnpxrxxxxxxxxx002962227406xxxxxxxxx4dvqkl&gt;::TransactionProcessor::run (15) (2,646,856 Execution Cost Units, 96.55%)</title><rect x="0.0919%" y="85" width="96.5528%" height="15" fill="rgb(215,133,35)" fg:x="2519" fg:w="2646856"/><text x="0.3419%" y="95.50">Invocation: Function &lt;package_sim1pkgxxxxxxxxxtxnpxrxxxxxxxxx002962227406xxxxxxxxx4dvqkl&gt;::TransactionProcessor::run (15)</text></g><g><title>OpenSubstate::GlobalPackage(10) (40,002 Execution Cost Units, 1.46%)</title><rect x="96.6447%" y="85" width="1.4592%" height="15" fill="rgb(213,28,5)" fg:x="2649375" fg:w="40002"/><text x="96.8947%" y="95.50"></text></g><g><title>OpenSubstate::GlobalPackage(12) (349 Execution Cost Units, 0.01%)</title><rect x="98.1039%" y="85" width="0.0127%" height="15" fill="rgb(215,77,49)" fg:x="2689377" fg:w="349"/><text x="98.3539%" y="95.50"></text></g><g><title>OpenSubstate::InternalGenericComponent(551) (361 Execution Cost Units, 0.01%)</title><rect x="98.1166%" y="85" width="0.0132%" height="15" fill="rgb(248,100,22)" fg:x="2689726" fg:w="361"/><text x="98.3666%" y="95.50"></text></g><g><title>OpenSubstate::InternalGenericComponent(558) (463 Execution Cost Units, 0.02%)</title><rect x="98.1298%" y="85" width="0.0169%" height="15" fill="rgb(208,67,9)" fg:x="2690087" fg:w="463"/><text x="98.3798%" y="95.50"></text></g><g><title>RefCheck(2) (40,011 Execution Cost Units, 1.46%)</title><rect x="98.1656%" y="85" width="1.4595%" height="15" fill="rgb(219,133,21)" fg:x="2691069" fg:w="40011"/><text x="98.4156%" y="95.50"></text></g><g><title>ValidateTxPayload(0) (3,000 Execution Cost Units, 0.11%)</title><rect x="99.6251%" y="85" width="0.1094%" height="15" fill="rgb(246,46,29)" fg:x="2731080" fg:w="3000"/><text x="99.8751%" y="95.50"></text></g><g><title>VerifyTxSignatures(1) (7,000 Execution Cost Units, 0.26%)</title><rect x="99.7346%" y="85" width="0.2553%" height="15" fill="rgb(246,185,52)" fg:x="2734080" fg:w="7000"/><text x="99.9846%" y="95.50"></text></g><g><title>WriteSubstate(553) (276 Execution Cost Units, 0.01%)</title><rect x="99.9899%" y="85" width="0.0101%" height="15" fill="rgb(252,136,11)" fg:x="2741080" fg:w="276"/><text x="100.2399%" y="95.50"></text></g><g><title>all (2,741,356 Execution Cost Units, 100%)</title><rect x="0.0000%" y="101" width="100.0000%" height="15" fill="rgb(219,138,53)" fg:x="0" fg:w="2741356"/><text x="0.2500%" y="111.50"></text></g></svg></svg>