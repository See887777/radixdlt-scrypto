TRANSACTION STATUS: COMMITTED SUCCESS

TRANSACTION COST: 0 XRD
├─ Network execution: 0 XRD, 0 execution cost units
├─ Network finalization: 0 XRD, 0 finalization cost units
├─ Tip: 0 XRD
├─ Network Storage: 0 XRD
└─ Royalties: 0 XRD

LOGS: 0

EVENTS: 0

STATE UPDATES: 1 entity
└─ package_sim1pkgxxxxxxxxxcnsmgrxxxxxxxxx000746305335xxxxxxxxxxc06cl across 4 partitions
  ├─ Partition(65): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "ConsensusManager", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDefinitionEntryPayload::V1(
         BlueprintDefinition {
           interface: BlueprintInterface {
             blueprint_type: BlueprintType::Outer,
             is_transient: false,
             generics: [],
             feature_set: [],
             state: IndexedStateSchema {
               fields: Option::Some(
                 Tuple(
                   PartitionDescription::Logical(
                     PartitionOffset(
                       0u8,
                     ),
                   ),
                   [
                     FieldSchema {
                       field: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("d8510877df1d820f4752b3c033baf656f62e0e612731718865d048b9d16300b3")),
                           LocalTypeId::SchemaLocalIndex(
                             0u64,
                           ),
                         ),
                       ),
                       condition: Condition::Always,
                       transience: FieldTransience::NotTransient,
                     },
                     FieldSchema {
                       field: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("d8510877df1d820f4752b3c033baf656f62e0e612731718865d048b9d16300b3")),
                           LocalTypeId::SchemaLocalIndex(
                             4u64,
                           ),
                         ),
                       ),
                       condition: Condition::Always,
                       transience: FieldTransience::NotTransient,
                     },
                     FieldSchema {
                       field: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("d8510877df1d820f4752b3c033baf656f62e0e612731718865d048b9d16300b3")),
                           LocalTypeId::SchemaLocalIndex(
                             9u64,
                           ),
                         ),
                       ),
                       condition: Condition::Always,
                       transience: FieldTransience::NotTransient,
                     },
                     FieldSchema {
                       field: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("d8510877df1d820f4752b3c033baf656f62e0e612731718865d048b9d16300b3")),
                           LocalTypeId::SchemaLocalIndex(
                             12u64,
                           ),
                         ),
                       ),
                       condition: Condition::Always,
                       transience: FieldTransience::NotTransient,
                     },
                     FieldSchema {
                       field: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("d8510877df1d820f4752b3c033baf656f62e0e612731718865d048b9d16300b3")),
                           LocalTypeId::SchemaLocalIndex(
                             16u64,
                           ),
                         ),
                       ),
                       condition: Condition::Always,
                       transience: FieldTransience::NotTransient,
                     },
                     FieldSchema {
                       field: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("d8510877df1d820f4752b3c033baf656f62e0e612731718865d048b9d16300b3")),
                           LocalTypeId::SchemaLocalIndex(
                             20u64,
                           ),
                         ),
                       ),
                       condition: Condition::Always,
                       transience: FieldTransience::NotTransient,
                     },
                     FieldSchema {
                       field: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("d8510877df1d820f4752b3c033baf656f62e0e612731718865d048b9d16300b3")),
                           LocalTypeId::SchemaLocalIndex(
                             22u64,
                           ),
                         ),
                       ),
                       condition: Condition::Always,
                       transience: FieldTransience::NotTransient,
                     },
                   ],
                 ),
               ),
               collections: [
                 Tuple(
                   PartitionDescription::Logical(
                     PartitionOffset(
                       1u8,
                     ),
                   ),
                   BlueprintCollectionSchema::SortedIndex(
                     BlueprintKeyValueSchema {
                       key: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("d8510877df1d820f4752b3c033baf656f62e0e612731718865d048b9d16300b3")),
                           LocalTypeId::WellKnown(
                             WellKnownTypeId(132u8),
                           ),
                         ),
                       ),
                       value: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("d8510877df1d820f4752b3c033baf656f62e0e612731718865d048b9d16300b3")),
                           LocalTypeId::SchemaLocalIndex(
                             24u64,
                           ),
                         ),
                       ),
                       allow_ownership: false,
                     },
                   ),
                 ),
               ],
               num_logical_partitions: 2u8,
             },
             functions: {
               "create" => FunctionSchema {
                 receiver: Option::None,
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("d8510877df1d820f4752b3c033baf656f62e0e612731718865d048b9d16300b3")),
                     LocalTypeId::SchemaLocalIndex(
                       25u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("d8510877df1d820f4752b3c033baf656f62e0e612731718865d048b9d16300b3")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "get_current_epoch" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRef,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("d8510877df1d820f4752b3c033baf656f62e0e612731718865d048b9d16300b3")),
                     LocalTypeId::SchemaLocalIndex(
                       26u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("d8510877df1d820f4752b3c033baf656f62e0e612731718865d048b9d16300b3")),
                     LocalTypeId::SchemaLocalIndex(
                       6u64,
                     ),
                   ),
                 ),
               },
               "start" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("d8510877df1d820f4752b3c033baf656f62e0e612731718865d048b9d16300b3")),
                     LocalTypeId::SchemaLocalIndex(
                       27u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("d8510877df1d820f4752b3c033baf656f62e0e612731718865d048b9d16300b3")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "get_current_time" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRef,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("afdfe838c79faac8f102f8ade967be05568f46c667521266b9aff719ede112fe")),
                     LocalTypeId::SchemaLocalIndex(
                       0u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("d8510877df1d820f4752b3c033baf656f62e0e612731718865d048b9d16300b3")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(196u8),
                     ),
                   ),
                 ),
               },
               "compare_current_time" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRef,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("afdfe838c79faac8f102f8ade967be05568f46c667521266b9aff719ede112fe")),
                     LocalTypeId::SchemaLocalIndex(
                       2u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("d8510877df1d820f4752b3c033baf656f62e0e612731718865d048b9d16300b3")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(1u8),
                     ),
                   ),
                 ),
               },
               "next_round" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("d8510877df1d820f4752b3c033baf656f62e0e612731718865d048b9d16300b3")),
                     LocalTypeId::SchemaLocalIndex(
                       32u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("d8510877df1d820f4752b3c033baf656f62e0e612731718865d048b9d16300b3")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "create_validator" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("d8510877df1d820f4752b3c033baf656f62e0e612731718865d048b9d16300b3")),
                     LocalTypeId::SchemaLocalIndex(
                       34u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("d8510877df1d820f4752b3c033baf656f62e0e612731718865d048b9d16300b3")),
                     LocalTypeId::SchemaLocalIndex(
                       35u64,
                     ),
                   ),
                 ),
               },
             },
             events: {
               "RoundChangeEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("d8510877df1d820f4752b3c033baf656f62e0e612731718865d048b9d16300b3")),
                   LocalTypeId::SchemaLocalIndex(
                     37u64,
                   ),
                 ),
               ),
               "EpochChangeEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("d8510877df1d820f4752b3c033baf656f62e0e612731718865d048b9d16300b3")),
                   LocalTypeId::SchemaLocalIndex(
                     38u64,
                   ),
                 ),
               ),
             },
             types: {},
           },
           function_exports: {
             "create" => PackageExport {
               code_hash: CodeHash(hex("7cf8ec2696b93e93d87cb1d59cbe9343aefc774d68313a1d8a9fc38c5d86009d")),
               export_name: "create",
             },
             "get_current_epoch" => PackageExport {
               code_hash: CodeHash(hex("7cf8ec2696b93e93d87cb1d59cbe9343aefc774d68313a1d8a9fc38c5d86009d")),
               export_name: "get_current_epoch",
             },
             "start" => PackageExport {
               code_hash: CodeHash(hex("7cf8ec2696b93e93d87cb1d59cbe9343aefc774d68313a1d8a9fc38c5d86009d")),
               export_name: "start",
             },
             "get_current_time" => PackageExport {
               code_hash: CodeHash(hex("ad1d1be2a8c4035c50b20a4fc0125d3ebd4390bd9380261b45da3265d5c50400")),
               export_name: "get_current_time",
             },
             "compare_current_time" => PackageExport {
               code_hash: CodeHash(hex("ad1d1be2a8c4035c50b20a4fc0125d3ebd4390bd9380261b45da3265d5c50400")),
               export_name: "compare_current_time",
             },
             "next_round" => PackageExport {
               code_hash: CodeHash(hex("7cf8ec2696b93e93d87cb1d59cbe9343aefc774d68313a1d8a9fc38c5d86009d")),
               export_name: "next_round",
             },
             "create_validator" => PackageExport {
               code_hash: CodeHash(hex("7cf8ec2696b93e93d87cb1d59cbe9343aefc774d68313a1d8a9fc38c5d86009d")),
               export_name: "create_validator",
             },
           },
           hook_exports: {},
         },
       )
  ├─ Partition(69): 1 change
    └─ Set: CodeHash(hex("ad1d1be2a8c4035c50b20a4fc0125d3ebd4390bd9380261b45da3265d5c50400"))
       Value: LOCKED PackageCodeVmTypeEntryPayload::V1(
         PackageCodeVmTypeV1::Native,
       )
  ├─ Partition(70): 1 change
    └─ Set: CodeHash(hex("ad1d1be2a8c4035c50b20a4fc0125d3ebd4390bd9380261b45da3265d5c50400"))
       Value: LOCKED PackageCodeOriginalCodeEntryPayload::V1(
         PackageCodeOriginalCodeV1(hex("0000000000000010")),
       )
  └─ Partition(1): 1 change
    └─ Set: SchemaHash(afdfe838c79faac8f102f8ade967be05568f46c667521266b9aff719ede112fe)
       Value: KeyValueEntrySubstate::V1(
         KeyValueEntrySubstateV1 {
           value: Option::Some(
             PackageSchemaEntryPayload::V1(
               SchemaV1 {
                 type_kinds: [
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         1u64,
                       ),
                     ],
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(196u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         1u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         3u64,
                       ),
                     ],
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [],
                       2u8 => [],
                       3u8 => [],
                       4u8 => [],
                     },
                   },
                 ],
                 type_metadata: [
                   TypeMetadata {
                     type_name: Option::Some(
                       "ConsensusManagerGetCurrentTimeInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "precision",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "TimePrecision",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Minute",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Second",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ConsensusManagerCompareCurrentTimeInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "instant",
                           "precision",
                           "operator",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "TimeComparisonOperator",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Eq",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Lt",
                             ),
                             child_names: Option::None,
                           },
                           2u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Lte",
                             ),
                             child_names: Option::None,
                           },
                           3u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Gt",
                             ),
                             child_names: Option::None,
                           },
                           4u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Gte",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                 ],
                 type_validations: [
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                 ],
               },
             ),
           ),
           lock_status: LockStatus::Locked,
         },
       )

OUTPUTS: 0

BALANCE CHANGES: 0

NEW ENTITIES: 0