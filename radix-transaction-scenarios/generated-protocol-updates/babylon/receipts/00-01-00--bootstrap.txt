TRANSACTION STATUS: COMMITTED SUCCESS

TRANSACTION COST: 0 XRD
├─ Network execution: 0 XRD, 0 execution cost units
├─ Network finalization: 0 XRD, 0 finalization cost units
├─ Tip: 0 XRD
├─ Network Storage: 0 XRD
└─ Royalties: 0 XRD

LOGS: 0

EVENTS: 13
├─ Emitter: Method { node: resource_sim1tknxxxxxxxxxradxrdxxxxxxxxx009923554798xxxxxxxxxakj8n3, module_id: Main }
   Event: MintFungibleResourceEvent {
     amount: Decimal("0"),
   }
├─ Emitter: Method { node: resource_sim1tknxxxxxxxxxradxrdxxxxxxxxx009923554798xxxxxxxxxakj8n3, module_id: Main }
   Event: VaultCreationEvent {
     vault_id: NodeId(hex("58a21fd3595159120bc80c1ec5ffded9c9c93c43c7d2bb8cb4e3b31a245e")),
   }
├─ Emitter: Method { node: resource_sim1tknxxxxxxxxxradxrdxxxxxxxxx009923554798xxxxxxxxxakj8n3, module_id: Main }
   Event: VaultCreationEvent {
     vault_id: NodeId(hex("5881d1ceefd39c3d856f2a819e9ac9778cd6da7a0da3b2815b4c2fb5e0a6")),
   }
├─ Emitter: Method { node: resource_sim1tknxxxxxxxxxradxrdxxxxxxxxx009923554798xxxxxxxxxakj8n3, module_id: Main }
   Event: VaultCreationEvent {
     vault_id: NodeId(hex("58b2dd44fcfed3a7ce3a363c15eb1c19dcf94b4dcd3377272a27af666ced")),
   }
├─ Emitter: Method { node: resource_sim1tknxxxxxxxxxradxrdxxxxxxxxx009923554798xxxxxxxxxakj8n3, module_id: Main }
   Event: VaultCreationEvent {
     vault_id: NodeId(hex("58c7161b84a6eb213da98aa2bfc1964ee0cd23f082adee325e2d56441f27")),
   }
├─ Emitter: Method { node: resource_sim1tknxxxxxxxxxradxrdxxxxxxxxx009923554798xxxxxxxxxakj8n3, module_id: Main }
   Event: VaultCreationEvent {
     vault_id: NodeId(hex("584c2bdc05b1ac6ff6d99a81eff805f792a4cd9a52726b7e6e741c7206ac")),
   }
├─ Emitter: Method { node: resource_sim1tknxxxxxxxxxradxrdxxxxxxxxx009923554798xxxxxxxxxakj8n3, module_id: Main }
   Event: VaultCreationEvent {
     vault_id: NodeId(hex("58c27e39b993d7597279f83b54c97315e5921974463b40955ebf5129761a")),
   }
├─ Emitter: Method { node: resource_sim1tknxxxxxxxxxradxrdxxxxxxxxx009923554798xxxxxxxxxakj8n3, module_id: Main }
   Event: VaultCreationEvent {
     vault_id: NodeId(hex("5871e5a82c636e75a30637677c20c97a851e85412ad4bb84c7af08f93fd5")),
   }
├─ Emitter: Method { node: resource_sim1tknxxxxxxxxxradxrdxxxxxxxxx009923554798xxxxxxxxxakj8n3, module_id: Main }
   Event: VaultCreationEvent {
     vault_id: NodeId(hex("58619833de031de3aad69cad02a22656e083e307fb617b28e1b275bd7ed7")),
   }
├─ Emitter: Method { node: resource_sim1tknxxxxxxxxxradxrdxxxxxxxxx009923554798xxxxxxxxxakj8n3, module_id: Main }
   Event: VaultCreationEvent {
     vault_id: NodeId(hex("58990dfddd082dac2383591e8e65942ca76bb4d8cea90942bd99b9ae099a")),
   }
├─ Emitter: Method { node: resource_sim1tknxxxxxxxxxradxrdxxxxxxxxx009923554798xxxxxxxxxakj8n3, module_id: Main }
   Event: MintFungibleResourceEvent {
     amount: Decimal("0"),
   }
├─ Emitter: Method { node: resource_sim1tknxxxxxxxxxradxrdxxxxxxxxx009923554798xxxxxxxxxakj8n3, module_id: Main }
   Event: VaultCreationEvent {
     vault_id: NodeId(hex("58e7ec7c438836050aee1fbdb6e67681a0e4bde4cdceb9c58416608ad871")),
   }
└─ Emitter: Method { node: internal_vault_sim1trn7clzr3qmq2zhwr77mdenksxswf00yeh8tn3vyzesg4kr3ktm0sm, module_id: Main }
   Event: DepositEvent {
     amount: Decimal("0"),
   }

STATE UPDATES: 34 entities
├─ consensusmanager_sim1scxxxxxxxxxxcnsmgrxxxxxxxxx000999665565xxxxxxxxxxc06cl across 5 partitions
  ├─ Partition(2): 2 changes
    ├─ Set: "name"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "Consensus Manager",
         ),
       )
    └─ Set: "description"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "A component that keeps track of various consensus related concepts such as the epoch, round, current validator set, and so on.",
         ),
       )
  ├─ Partition(5): 1 change
    └─ Set: Field(0)
       Value: LOCKED RoleAssignmentOwnerFieldPayload::V1(
         OwnerRoleSubstate {
           rule: AccessRule::DenyAll,
           updater: OwnerRoleUpdater::None,
         },
       )
  ├─ Partition(6): 1 change
    └─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("validator") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::Protected(
           AccessRuleNode::ProofRule(
             ProofRule::Require(
               ResourceOrNonFungible::NonFungible(
                 NonFungibleGlobalId {
                   resource_address: ResourceAddress(Reference("resource_sim1nfxxxxxxxxxxsystxnxxxxxxxxx002683325037xxxxxxxxxw002k0")),
                   local_id: NonFungibleLocalId("#1#"),
                 },
               ),
             ),
           ),
         ),
       )
  ├─ Partition(64): 7 changes
    ├─ Set: Field(0)
       Value: LOCKED ConsensusManagerConfigurationFieldPayload::V1(
         ConsensusManagerConfigSubstate {
           config: ConsensusManagerConfig {
             max_validators: 100u32,
             epoch_change_condition: EpochChangeCondition {
               min_round_count: 500u64,
               max_round_count: 3000u64,
               target_duration_millis: 300000u64,
             },
             num_unstake_epochs: 2016u64,
             total_emission_xrd_per_epoch: Decimal("2853.881278538812785388"),
             min_validator_reliability: Decimal("1"),
             num_owner_stake_units_unlock_epochs: 8064u64,
             num_fee_increase_delay_epochs: 4032u64,
             validator_creation_usd_cost: Decimal("1000"),
           },
         },
       )
    ├─ Set: Field(1)
       Value: UNLOCKED ConsensusManagerStateFieldPayload::V1(
         ConsensusManagerSubstate {
           started: false,
           epoch: Epoch(1u64),
           effective_epoch_start_milli: 1i64,
           actual_epoch_start_milli: 1i64,
           round: Round(0u64),
           current_leader: Option::Some(
             0u8,
           ),
         },
       )
    ├─ Set: Field(2)
       Value: UNLOCKED ConsensusManagerValidatorRewardsFieldPayload::V1(
         ValidatorRewardsSubstate {
           proposer_rewards: {},
           rewards_vault: Vault(Own("internal_vault_sim1tpsesv77qvw782kknjks9g3x2msg8cc8ldshk28pkf6m6lkhun3sel")),
         },
       )
    ├─ Set: Field(3)
       Value: UNLOCKED ConsensusManagerCurrentValidatorSetFieldPayload::V1(
         CurrentValidatorSetSubstate {
           validator_set: ActiveValidatorSet({}),
         },
       )
    ├─ Set: Field(4)
       Value: UNLOCKED ConsensusManagerCurrentProposalStatisticFieldPayload::V1(
         CurrentProposalStatisticSubstate {
           validator_statistics: [],
         },
       )
    ├─ Set: Field(5)
       Value: UNLOCKED ConsensusManagerProposerMinuteTimestampFieldPayload::V1(
         ProposerMinuteTimestampSubstate(0i32),
       )
    └─ Set: Field(6)
       Value: UNLOCKED ConsensusManagerProposerMilliTimestampFieldPayload::V1(
         ProposerMilliTimestampSubstate(1i64),
       )
  └─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxcnsmgrxxxxxxxxx000746305335xxxxxxxxxxc06cl")),
               blueprint_name: "ConsensusManager",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::None,
             features: [],
             generic_substitutions: [],
           },
           object_type: ObjectType::Global {
             modules: {
               AttachedModuleId::RoleAssignment => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
               AttachedModuleId::Metadata => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
             },
           },
         },
       )
├─ resource_sim1tknxxxxxxxxxradxrdxxxxxxxxx009923554798xxxxxxxxxakj8n3 across 5 partitions
  ├─ Partition(2): 6 changes
    ├─ Set: "info_url"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::Url(
           Url("https://tokens.radixdlt.com"),
         ),
       )
    ├─ Set: "name"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "Radix",
         ),
       )
    ├─ Set: "description"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "The Radix Public Network's native token, used to pay the network's required transaction fees and to secure the network through staking to its validator nodes.",
         ),
       )
    ├─ Set: "symbol"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "XRD",
         ),
       )
    ├─ Set: "icon_url"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::Url(
           Url("https://assets.radixdlt.com/icons/icon-xrd-32x32.png"),
         ),
       )
    └─ Set: "tags"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::StringArray(
           [],
         ),
       )
  ├─ Partition(5): 1 change
    └─ Set: Field(0)
       Value: LOCKED RoleAssignmentOwnerFieldPayload::V1(
         OwnerRoleSubstate {
           rule: AccessRule::Protected(
             AccessRuleNode::ProofRule(
               ProofRule::Require(
                 ResourceOrNonFungible::NonFungible(
                   NonFungibleGlobalId {
                     resource_address: ResourceAddress(Reference("resource_sim1nfxxxxxxxxxxsystxnxxxxxxxxx002683325037xxxxxxxxxw002k0")),
                     local_id: NonFungibleLocalId("#0#"),
                   },
                 ),
               ),
             ),
           ),
           updater: OwnerRoleUpdater::None,
         },
       )
  ├─ Partition(6): 12 changes
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("depositor") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::AllowAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("burner_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("freezer") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("freezer_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("burner") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::Protected(
           AccessRuleNode::ProofRule(
             ProofRule::Require(
               ResourceOrNonFungible::NonFungible(
                 NonFungibleGlobalId {
                   resource_address: ResourceAddress(Reference("resource_sim1nfxxxxxxxxxxglcllrxxxxxxxxx002350006550xxxxxxxxxk5870l")),
                   local_id: NonFungibleLocalId("[68c44e9d432e71c51e2a2ac285897b372328d8b31374ff29131bc6b25b6bd070]"),
                 },
               ),
             ),
           ),
         ),
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("recaller") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("withdrawer") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::AllowAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("recaller_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("depositor_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("minter") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::Protected(
           AccessRuleNode::ProofRule(
             ProofRule::Require(
               ResourceOrNonFungible::NonFungible(
                 NonFungibleGlobalId {
                   resource_address: ResourceAddress(Reference("resource_sim1nfxxxxxxxxxxglcllrxxxxxxxxx002350006550xxxxxxxxxk5870l")),
                   local_id: NonFungibleLocalId("[68c44e9d432e71c51e2a2ac285897b372328d8b31374ff29131bc6b25b6bd070]"),
                 },
               ),
             ),
           ),
         ),
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("withdrawer_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    └─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("minter_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
  ├─ Partition(64): 1 change
    └─ Set: Field(0)
       Value: LOCKED FungibleResourceManagerDivisibilityFieldPayload::V1(
         18u8,
       )
  └─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxresrcexxxxxxxxx000538436477xxxxxxxxxaj0zg9")),
               blueprint_name: "FungibleResourceManager",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::None,
             features: [
               "mint",
               "burn",
             ],
             generic_substitutions: [],
           },
           object_type: ObjectType::Global {
             modules: {
               AttachedModuleId::RoleAssignment => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
               AttachedModuleId::Metadata => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
             },
           },
         },
       )
├─ resource_sim1nfxxxxxxxxxxpkcllrxxxxxxxxx003652646977xxxxxxxxxla870l across 6 partitions
  ├─ Partition(1): 1 change
    └─ Set: SchemaHash(5984bee33c529de9f322241679b505ab2e60e2189bdf8c2b7811023ffb5c12f9)
       Value: KeyValueEntrySubstate::V1(
         KeyValueEntrySubstateV1 {
           value: Option::Some(
             PackageSchemaEntryPayload::V1(
               SchemaV1 {
                 type_kinds: [],
                 type_metadata: [],
                 type_validations: [],
               },
             ),
           ),
           lock_status: LockStatus::Locked,
         },
       )
  ├─ Partition(2): 4 changes
    ├─ Set: "name"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "Package Virtual Badges",
         ),
       )
    ├─ Set: "description"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "Virtual badges generated automatically by the Radix system to represent the authority of the package for a direct caller. These badges cease to exist at the end of their transaction.",
         ),
       )
    ├─ Set: "icon_url"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::Url(
           Url("https://assets.radixdlt.com/icons/icon-package_of_direct_caller_virtual_badge.png"),
         ),
       )
    └─ Set: "tags"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::StringArray(
           [
             "badge",
           ],
         ),
       )
  ├─ Partition(5): 1 change
    └─ Set: Field(0)
       Value: LOCKED RoleAssignmentOwnerFieldPayload::V1(
         OwnerRoleSubstate {
           rule: AccessRule::Protected(
             AccessRuleNode::ProofRule(
               ProofRule::Require(
                 ResourceOrNonFungible::NonFungible(
                   NonFungibleGlobalId {
                     resource_address: ResourceAddress(Reference("resource_sim1nfxxxxxxxxxxsystxnxxxxxxxxx002683325037xxxxxxxxxw002k0")),
                     local_id: NonFungibleLocalId("#0#"),
                   },
                 ),
               ),
             ),
           ),
           updater: OwnerRoleUpdater::None,
         },
       )
  ├─ Partition(6): 14 changes
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("depositor") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::AllowAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("burner_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("freezer") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("freezer_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("burner") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("recaller") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("withdrawer") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("non_fungible_data_updater_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("recaller_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("non_fungible_data_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("depositor_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("minter") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("withdrawer_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    └─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("minter_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
  ├─ Partition(64): 2 changes
    ├─ Set: Field(0)
       Value: LOCKED NonFungibleResourceManagerIdTypeFieldPayload::V1(
         NonFungibleIdType::Bytes,
       )
    └─ Set: Field(1)
       Value: LOCKED NonFungibleResourceManagerMutableFieldsFieldPayload::V1(
         NonFungibleResourceManagerMutableFieldsV1 {
           mutable_field_index: {},
         },
       )
  └─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxresrcexxxxxxxxx000538436477xxxxxxxxxaj0zg9")),
               blueprint_name: "NonFungibleResourceManager",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::None,
             features: [],
             generic_substitutions: [
               GenericSubstitution::Local(
                 ScopedTypeId(
                   SchemaHash(hex("5984bee33c529de9f322241679b505ab2e60e2189bdf8c2b7811023ffb5c12f9")),
                   LocalTypeId::WellKnown(
                     WellKnownTypeId(66u8),
                   ),
                 ),
               ),
             ],
           },
           object_type: ObjectType::Global {
             modules: {
               AttachedModuleId::RoleAssignment => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
               AttachedModuleId::Metadata => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
             },
           },
         },
       )
├─ resource_sim1nfxxxxxxxxxxglcllrxxxxxxxxx002350006550xxxxxxxxxk5870l across 6 partitions
  ├─ Partition(1): 1 change
    └─ Set: SchemaHash(5984bee33c529de9f322241679b505ab2e60e2189bdf8c2b7811023ffb5c12f9)
       Value: KeyValueEntrySubstate::V1(
         KeyValueEntrySubstateV1 {
           value: Option::Some(
             PackageSchemaEntryPayload::V1(
               SchemaV1 {
                 type_kinds: [],
                 type_metadata: [],
                 type_validations: [],
               },
             ),
           ),
           lock_status: LockStatus::Locked,
         },
       )
  ├─ Partition(2): 4 changes
    ├─ Set: "name"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "Global Caller Virtual Badges",
         ),
       )
    ├─ Set: "description"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "Virtual badges generated automatically by the Radix system to represent the authority of a global caller. These badges cease to exist at the end of their transaction.",
         ),
       )
    ├─ Set: "icon_url"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::Url(
           Url("https://assets.radixdlt.com/icons/icon-global_caller_virtual_badge.png"),
         ),
       )
    └─ Set: "tags"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::StringArray(
           [
             "badge",
           ],
         ),
       )
  ├─ Partition(5): 1 change
    └─ Set: Field(0)
       Value: LOCKED RoleAssignmentOwnerFieldPayload::V1(
         OwnerRoleSubstate {
           rule: AccessRule::Protected(
             AccessRuleNode::ProofRule(
               ProofRule::Require(
                 ResourceOrNonFungible::NonFungible(
                   NonFungibleGlobalId {
                     resource_address: ResourceAddress(Reference("resource_sim1nfxxxxxxxxxxsystxnxxxxxxxxx002683325037xxxxxxxxxw002k0")),
                     local_id: NonFungibleLocalId("#0#"),
                   },
                 ),
               ),
             ),
           ),
           updater: OwnerRoleUpdater::None,
         },
       )
  ├─ Partition(6): 14 changes
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("depositor") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::AllowAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("burner_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("freezer") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("freezer_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("burner") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("recaller") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("withdrawer") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("non_fungible_data_updater_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("recaller_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("non_fungible_data_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("depositor_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("minter") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("withdrawer_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    └─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("minter_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
  ├─ Partition(64): 2 changes
    ├─ Set: Field(0)
       Value: LOCKED NonFungibleResourceManagerIdTypeFieldPayload::V1(
         NonFungibleIdType::Bytes,
       )
    └─ Set: Field(1)
       Value: LOCKED NonFungibleResourceManagerMutableFieldsFieldPayload::V1(
         NonFungibleResourceManagerMutableFieldsV1 {
           mutable_field_index: {},
         },
       )
  └─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxresrcexxxxxxxxx000538436477xxxxxxxxxaj0zg9")),
               blueprint_name: "NonFungibleResourceManager",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::None,
             features: [],
             generic_substitutions: [
               GenericSubstitution::Local(
                 ScopedTypeId(
                   SchemaHash(hex("5984bee33c529de9f322241679b505ab2e60e2189bdf8c2b7811023ffb5c12f9")),
                   LocalTypeId::WellKnown(
                     WellKnownTypeId(66u8),
                   ),
                 ),
               ),
             ],
           },
           object_type: ObjectType::Global {
             modules: {
               AttachedModuleId::RoleAssignment => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
               AttachedModuleId::Metadata => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
             },
           },
         },
       )
├─ resource_sim1nfxxxxxxxxxxpkgwnrxxxxxxxxx002558553505xxxxxxxxxlah0rl across 6 partitions
  ├─ Partition(1): 1 change
    └─ Set: SchemaHash(aaab605cdf03d71f94075c60bf2fa23f5b61d248fa4d25bf80c137b888504251)
       Value: KeyValueEntrySubstate::V1(
         KeyValueEntrySubstateV1 {
           value: Option::Some(
             PackageSchemaEntryPayload::V1(
               SchemaV1 {
                 type_kinds: [
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(12u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(131u8),
                       ),
                     ],
                   },
                 ],
                 type_metadata: [
                   TypeMetadata {
                     type_name: Option::Some(
                       "PackageOwnerBadgeData",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "name",
                           "package",
                         ],
                       ),
                     ),
                   },
                 ],
                 type_validations: [
                   TypeValidation::None,
                 ],
               },
             ),
           ),
           lock_status: LockStatus::Locked,
         },
       )
  ├─ Partition(2): 4 changes
    ├─ Set: "name"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "Package Owner Badges",
         ),
       )
    ├─ Set: "description"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "Badges created by the Radix system that provide individual control over blueprint packages deployed by developers.",
         ),
       )
    ├─ Set: "icon_url"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::Url(
           Url("https://assets.radixdlt.com/icons/icon-package_owner_badge.png"),
         ),
       )
    └─ Set: "tags"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::StringArray(
           [
             "badge",
             "package",
           ],
         ),
       )
  ├─ Partition(5): 1 change
    └─ Set: Field(0)
       Value: LOCKED RoleAssignmentOwnerFieldPayload::V1(
         OwnerRoleSubstate {
           rule: AccessRule::Protected(
             AccessRuleNode::ProofRule(
               ProofRule::Require(
                 ResourceOrNonFungible::NonFungible(
                   NonFungibleGlobalId {
                     resource_address: ResourceAddress(Reference("resource_sim1nfxxxxxxxxxxglcllrxxxxxxxxx002350006550xxxxxxxxxk5870l")),
                     local_id: NonFungibleLocalId("[8c455cb7c3924b8daba009128e88a1e3b0cfb468fc4662513600cfca91d48fd0]"),
                   },
                 ),
               ),
             ),
           ),
           updater: OwnerRoleUpdater::None,
         },
       )
  ├─ Partition(6): 14 changes
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("depositor") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::AllowAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("burner_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("freezer") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("freezer_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("burner") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("recaller") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("withdrawer") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::AllowAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("non_fungible_data_updater_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("recaller_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("non_fungible_data_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("depositor_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("minter") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::Protected(
           AccessRuleNode::ProofRule(
             ProofRule::Require(
               ResourceOrNonFungible::NonFungible(
                 NonFungibleGlobalId {
                   resource_address: ResourceAddress(Reference("resource_sim1nfxxxxxxxxxxpkcllrxxxxxxxxx003652646977xxxxxxxxxla870l")),
                   local_id: NonFungibleLocalId("[04dcf8a0d97f95c68141dce091b71d695938e71efbf07c3214f252eb8348e699]"),
                 },
               ),
             ),
           ),
         ),
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("withdrawer_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    └─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("minter_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
  ├─ Partition(64): 2 changes
    ├─ Set: Field(0)
       Value: LOCKED NonFungibleResourceManagerIdTypeFieldPayload::V1(
         NonFungibleIdType::Bytes,
       )
    └─ Set: Field(1)
       Value: LOCKED NonFungibleResourceManagerMutableFieldsFieldPayload::V1(
         NonFungibleResourceManagerMutableFieldsV1 {
           mutable_field_index: {},
         },
       )
  └─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxresrcexxxxxxxxx000538436477xxxxxxxxxaj0zg9")),
               blueprint_name: "NonFungibleResourceManager",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::None,
             features: [
               "mint",
             ],
             generic_substitutions: [
               GenericSubstitution::Local(
                 ScopedTypeId(
                   SchemaHash(hex("aaab605cdf03d71f94075c60bf2fa23f5b61d248fa4d25bf80c137b888504251")),
                   LocalTypeId::SchemaLocalIndex(
                     0u64,
                   ),
                 ),
               ),
             ],
           },
           object_type: ObjectType::Global {
             modules: {
               AttachedModuleId::RoleAssignment => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
               AttachedModuleId::Metadata => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
             },
           },
         },
       )
├─ resource_sim1nfxxxxxxxxxxdntwnrxxxxxxxxx002876444928xxxxxxxxxnc50rl across 6 partitions
  ├─ Partition(1): 1 change
    └─ Set: SchemaHash(498f6de6fdcd23bd8ce41f69c6f95b22d1bbea642153878e5514a0c9f75dc1ea)
       Value: KeyValueEntrySubstate::V1(
         KeyValueEntrySubstateV1 {
           value: Option::Some(
             PackageSchemaEntryPayload::V1(
               SchemaV1 {
                 type_kinds: [
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(12u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(132u8),
                       ),
                     ],
                   },
                 ],
                 type_metadata: [
                   TypeMetadata {
                     type_name: Option::Some(
                       "IdentityOwnerBadgeData",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "name",
                           "identity",
                         ],
                       ),
                     ),
                   },
                 ],
                 type_validations: [
                   TypeValidation::None,
                 ],
               },
             ),
           ),
           lock_status: LockStatus::Locked,
         },
       )
  ├─ Partition(2): 4 changes
    ├─ Set: "name"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "Identity Owner Badges",
         ),
       )
    ├─ Set: "description"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "Badges created by the Radix system that provide individual control over identity components.",
         ),
       )
    ├─ Set: "icon_url"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::Url(
           Url("https://assets.radixdlt.com/icons/icon-identity_owner_badge.png"),
         ),
       )
    └─ Set: "tags"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::StringArray(
           [
             "badge",
             "identity",
           ],
         ),
       )
  ├─ Partition(5): 1 change
    └─ Set: Field(0)
       Value: LOCKED RoleAssignmentOwnerFieldPayload::V1(
         OwnerRoleSubstate {
           rule: AccessRule::Protected(
             AccessRuleNode::ProofRule(
               ProofRule::Require(
                 ResourceOrNonFungible::NonFungible(
                   NonFungibleGlobalId {
                     resource_address: ResourceAddress(Reference("resource_sim1nfxxxxxxxxxxglcllrxxxxxxxxx002350006550xxxxxxxxxk5870l")),
                     local_id: NonFungibleLocalId("[0afbd098e5b855615ac2ea6956b2a69e802c77fba8c7749f94ad115bbfaedc3a]"),
                   },
                 ),
               ),
             ),
           ),
           updater: OwnerRoleUpdater::None,
         },
       )
  ├─ Partition(6): 14 changes
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("depositor") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::AllowAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("burner_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("freezer") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("freezer_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("burner") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("recaller") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("withdrawer") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::AllowAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("non_fungible_data_updater_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("recaller_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("non_fungible_data_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("depositor_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("minter") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::Protected(
           AccessRuleNode::ProofRule(
             ProofRule::Require(
               ResourceOrNonFungible::NonFungible(
                 NonFungibleGlobalId {
                   resource_address: ResourceAddress(Reference("resource_sim1nfxxxxxxxxxxpkcllrxxxxxxxxx003652646977xxxxxxxxxla870l")),
                   local_id: NonFungibleLocalId("[63bed481f74411c7535b369702d3a2fe47ed7363b670e1ba495ff589a0f77e41]"),
                 },
               ),
             ),
           ),
         ),
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("withdrawer_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    └─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("minter_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
  ├─ Partition(64): 2 changes
    ├─ Set: Field(0)
       Value: LOCKED NonFungibleResourceManagerIdTypeFieldPayload::V1(
         NonFungibleIdType::Bytes,
       )
    └─ Set: Field(1)
       Value: LOCKED NonFungibleResourceManagerMutableFieldsFieldPayload::V1(
         NonFungibleResourceManagerMutableFieldsV1 {
           mutable_field_index: {},
         },
       )
  └─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxresrcexxxxxxxxx000538436477xxxxxxxxxaj0zg9")),
               blueprint_name: "NonFungibleResourceManager",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::None,
             features: [
               "mint",
             ],
             generic_substitutions: [
               GenericSubstitution::Local(
                 ScopedTypeId(
                   SchemaHash(hex("498f6de6fdcd23bd8ce41f69c6f95b22d1bbea642153878e5514a0c9f75dc1ea")),
                   LocalTypeId::SchemaLocalIndex(
                     0u64,
                   ),
                 ),
               ),
             ],
           },
           object_type: ObjectType::Global {
             modules: {
               AttachedModuleId::RoleAssignment => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
               AttachedModuleId::Metadata => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
             },
           },
         },
       )
├─ package_sim1pkgxxxxxxxxxdntyxxxxxxxxxxx008560783089xxxxxxxxxnc59k6 across 11 partitions
  ├─ Partition(1): 1 change
    └─ Set: SchemaHash(3c2f1b5d8a1dfdb5baca6f4a482f57aca0e474ed5f1b3abdc993b7e64d43ace4)
       Value: KeyValueEntrySubstate::V1(
         KeyValueEntrySubstateV1 {
           value: Option::Some(
             PackageSchemaEntryPayload::V1(
               SchemaV1 {
                 type_kinds: [
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(230u8),
                       ),
                     ],
                   },
                   TypeKind::Custom(
                     ScryptoCustomTypeKind::Reference,
                   ),
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         1u64,
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(161u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                 ],
                 type_metadata: [
                   TypeMetadata {
                     type_name: Option::Some(
                       "IdentityCreateAdvancedInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "owner_role",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "GlobalIdentity",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "IdentityCreateInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "IdentitySecurifyToSingleBadgeInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [],
                       ),
                     ),
                   },
                 ],
                 type_validations: [
                   TypeValidation::None,
                   TypeValidation::Custom(
                     ScryptoCustomTypeValidation::Reference(
                       ReferenceValidation::IsGlobalTyped(
                         Option::Some(
                           PackageAddress(Reference("package_sim1pkgxxxxxxxxxdntyxxxxxxxxxxx008560783089xxxxxxxxxnc59k6")),
                         ),
                         "Identity",
                       ),
                     ),
                   ),
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                 ],
               },
             ),
           ),
           lock_status: LockStatus::Locked,
         },
       )
  ├─ Partition(2): 2 changes
    ├─ Set: "name"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "Identity Package",
         ),
       )
    └─ Set: "description"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "A native package that defines the logic of identity components.",
         ),
       )
  ├─ Partition(5): 1 change
    └─ Set: Field(0)
       Value: LOCKED RoleAssignmentOwnerFieldPayload::V1(
         OwnerRoleSubstate {
           rule: AccessRule::DenyAll,
           updater: OwnerRoleUpdater::None,
         },
       )
  ├─ Partition(64): 1 change
    └─ Set: Field(0)
       Value: LOCKED PackageRoyaltyAccumulatorFieldPayload::V1(
         PackageRoyaltyAccumulatorV1 {
           royalty_vault: Vault(Own("internal_vault_sim1tz3pl56e29v3yz7gps0vtl77m8yuj0zrclfthr95uwe35fz7jyjmhh")),
         },
       )
  ├─ Partition(65): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "Identity", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDefinitionEntryPayload::V1(
         BlueprintDefinition {
           interface: BlueprintInterface {
             blueprint_type: BlueprintType::Outer,
             is_transient: false,
             generics: [],
             feature_set: [],
             state: IndexedStateSchema {
               fields: Option::None,
               collections: [],
               num_logical_partitions: 0u8,
             },
             functions: {
               "create_advanced" => FunctionSchema {
                 receiver: Option::None,
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("3c2f1b5d8a1dfdb5baca6f4a482f57aca0e474ed5f1b3abdc993b7e64d43ace4")),
                     LocalTypeId::SchemaLocalIndex(
                       0u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("3c2f1b5d8a1dfdb5baca6f4a482f57aca0e474ed5f1b3abdc993b7e64d43ace4")),
                     LocalTypeId::SchemaLocalIndex(
                       1u64,
                     ),
                   ),
                 ),
               },
               "create" => FunctionSchema {
                 receiver: Option::None,
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("3c2f1b5d8a1dfdb5baca6f4a482f57aca0e474ed5f1b3abdc993b7e64d43ace4")),
                     LocalTypeId::SchemaLocalIndex(
                       2u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("3c2f1b5d8a1dfdb5baca6f4a482f57aca0e474ed5f1b3abdc993b7e64d43ace4")),
                     LocalTypeId::SchemaLocalIndex(
                       3u64,
                     ),
                   ),
                 ),
               },
               "securify" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("3c2f1b5d8a1dfdb5baca6f4a482f57aca0e474ed5f1b3abdc993b7e64d43ace4")),
                     LocalTypeId::SchemaLocalIndex(
                       4u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("3c2f1b5d8a1dfdb5baca6f4a482f57aca0e474ed5f1b3abdc993b7e64d43ace4")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(161u8),
                     ),
                   ),
                 ),
               },
             },
             events: {},
             types: {},
           },
           function_exports: {
             "create_advanced" => PackageExport {
               code_hash: CodeHash(hex("fee90546920fec9b2f4a3d22a8d3a47695967d222f79b0a6ecce36838348f7fc")),
               export_name: "create_advanced",
             },
             "create" => PackageExport {
               code_hash: CodeHash(hex("fee90546920fec9b2f4a3d22a8d3a47695967d222f79b0a6ecce36838348f7fc")),
               export_name: "create",
             },
             "securify" => PackageExport {
               code_hash: CodeHash(hex("fee90546920fec9b2f4a3d22a8d3a47695967d222f79b0a6ecce36838348f7fc")),
               export_name: "securify",
             },
           },
           hook_exports: {
             BlueprintHook::OnVirtualize => PackageExport {
               code_hash: CodeHash(hex("fee90546920fec9b2f4a3d22a8d3a47695967d222f79b0a6ecce36838348f7fc")),
               export_name: "on_virtualize",
             },
           },
         },
       )
  ├─ Partition(66): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "Identity", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDependenciesEntryPayload::V1(
         BlueprintDependencies([
           GlobalAddress(Reference("resource_sim1nfxxxxxxxxxxsecpsgxxxxxxxxx004638826440xxxxxxxxxwj8qq5")),
           GlobalAddress(Reference("resource_sim1nfxxxxxxxxxxed25sgxxxxxxxxx002236757237xxxxxxxxx8x44q5")),
           GlobalAddress(Reference("resource_sim1nfxxxxxxxxxxdntwnrxxxxxxxxx002876444928xxxxxxxxxnc50rl")),
           GlobalAddress(Reference("resource_sim1nfxxxxxxxxxxpkcllrxxxxxxxxx003652646977xxxxxxxxxla870l")),
         ]),
       )
  ├─ Partition(67): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "Identity", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionRoyaltyConfigEntryPayload::V1(
         PackageRoyaltyConfig::Disabled,
       )
  ├─ Partition(68): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "Identity", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionAuthConfigEntryPayload::V1(
         AuthConfig {
           function_auth: FunctionAuth::AllowAll,
           method_auth: MethodAuthTemplate::StaticRoleDefinition(
             StaticRoleDefinition {
               roles: RoleSpecification::Normal(
                 {
                   RoleKey("securify") => RoleList([
                     RoleKey("_self_"),
                   ]),
                 },
               ),
               methods: {
                 MethodKey("securify") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("securify"),
                   ]),
                 ),
               },
             },
           ),
         },
       )
  ├─ Partition(69): 1 change
    └─ Set: CodeHash(hex("fee90546920fec9b2f4a3d22a8d3a47695967d222f79b0a6ecce36838348f7fc"))
       Value: LOCKED PackageCodeVmTypeEntryPayload::V1(
         PackageCodeVmTypeV1::Native,
       )
  ├─ Partition(70): 1 change
    └─ Set: CodeHash(hex("fee90546920fec9b2f4a3d22a8d3a47695967d222f79b0a6ecce36838348f7fc"))
       Value: LOCKED PackageCodeOriginalCodeEntryPayload::V1(
         PackageCodeOriginalCodeV1(hex("0000000000000002")),
       )
  └─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxpackgexxxxxxxxx000726633226xxxxxxxxxlk8hc9")),
               blueprint_name: "Package",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::None,
             features: [
               "package_royalty",
             ],
             generic_substitutions: [],
           },
           object_type: ObjectType::Global {
             modules: {
               AttachedModuleId::Metadata => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
               AttachedModuleId::RoleAssignment => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
             },
           },
         },
       )
├─ package_sim1pkgxxxxxxxxxcnsmgrxxxxxxxxx000746305335xxxxxxxxxxc06cl across 11 partitions
  ├─ Partition(1): 2 changes
    ├─ Set: SchemaHash(47a72f745cbdf934b73c3cc080890ff4ce147870abc6992cd23c4b565c90dc4c)
       Value: KeyValueEntrySubstate::V1(
         KeyValueEntrySubstateV1 {
           value: Option::Some(
             PackageSchemaEntryPayload::V1(
               SchemaV1 {
                 type_kinds: [
                   TypeKind::Enum {
                     variants: {
                       0u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           1u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         2u64,
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(209u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(1u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(1u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         5u64,
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(133u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(160u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(133u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(160u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(160u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(160u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         8u64,
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           3u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         4u64,
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(65u8),
                       ),
                     ],
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(7u8),
                     ),
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           6u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         7u64,
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                   TypeKind::U64,
                   TypeKind::Map {
                     key_type: LocalTypeId::SchemaLocalIndex(
                       7u64,
                     ),
                     value_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(192u8),
                     ),
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           10u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(12u8),
                         ),
                       ],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(161u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(161u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(161u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(161u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(209u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(1u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(12u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(12u8),
                         ),
                       ],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(161u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(161u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         7u64,
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(10u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(10u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(161u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         7u64,
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(12u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(1u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         7u64,
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(10u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(10u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         7u64,
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                 ],
                 type_metadata: [
                   TypeMetadata {
                     type_name: Option::Some(
                       "ValidatorStateFieldPayload",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "V1",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ValidatorSubstate",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "sorted_key",
                           "key",
                           "is_registered",
                           "accepts_delegated_stake",
                           "validator_fee_factor",
                           "validator_fee_change_request",
                           "stake_unit_resource",
                           "stake_xrd_vault_id",
                           "claim_nft",
                           "pending_xrd_withdraw_vault_id",
                           "locked_owner_stake_unit_vault_id",
                           "pending_owner_stake_unit_unlock_vault_id",
                           "pending_owner_stake_unit_withdrawals",
                           "already_unlocked_owner_stake_unit_amount",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "Option",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "None",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Some",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "Option",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "None",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Some",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ValidatorFeeChangeRequest",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "epoch_effective",
                           "new_fee_factor",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "Epoch",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ValidatorProtocolUpdateReadinessSignalFieldPayload",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "V1",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ValidatorProtocolUpdateReadinessSignalSubstate",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "None",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Some",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ValidatorRegisterInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ValidatorUnregisterInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ValidatorStakeAsOwnerInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "stake",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ValidatorStakeInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "stake",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ValidatorUnstakeInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "stake_unit_bucket",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ValidatorClaimXrdInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "bucket",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ValidatorUpdateKeyInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "key",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ValidatorUpdateFeeInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "new_fee_factor",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ValidatorUpdateAcceptDelegatedStakeInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "accept_delegated_stake",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ValidatorAcceptsDelegatedStakeInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ValidatorTotalStakeXrdAmountInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ValidatorTotalStakeUnitSupplyInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ValidatorGetRedemptionValueInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "amount_of_stake_units",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ValidatorSignalProtocolUpdateReadinessInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "vote",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ValidatorGetProtocolUpdateReadinessInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "Option",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "None",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Some",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ValidatorLockOwnerStakeUnitsInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "stake_unit_bucket",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ValidatorStartUnlockOwnerStakeUnitsInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "requested_stake_unit_amount",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ValidatorFinishUnlockOwnerStakeUnitsInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ValidatorApplyEmissionInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "xrd_bucket",
                           "epoch",
                           "proposals_made",
                           "proposals_missed",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ValidatorApplyRewardInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "xrd_bucket",
                           "epoch",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "RegisterValidatorEvent",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "UnregisterValidatorEvent",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "StakeEvent",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "xrd_staked",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "UnstakeEvent",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "stake_units",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ClaimXrdEvent",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "claimed_xrd",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ProtocolUpdateReadinessSignalEvent",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "protocol_version_name",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "UpdateAcceptingStakeDelegationStateEvent",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "accepts_delegation",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ValidatorEmissionAppliedEvent",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "epoch",
                           "starting_stake_pool_xrd",
                           "stake_pool_added_xrd",
                           "total_stake_unit_supply",
                           "validator_fee_xrd",
                           "proposals_made",
                           "proposals_missed",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ValidatorRewardAppliedEvent",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "epoch",
                           "amount",
                         ],
                       ),
                     ),
                   },
                 ],
                 type_validations: [
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::Array(
                     LengthValidation {
                       min: Option::Some(
                         2u32,
                       ),
                       max: Option::Some(
                         2u32,
                       ),
                     },
                   ),
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                 ],
               },
             ),
           ),
           lock_status: LockStatus::Locked,
         },
       )
    └─ Set: SchemaHash(d8510877df1d820f4752b3c033baf656f62e0e612731718865d048b9d16300b3)
       Value: KeyValueEntrySubstate::V1(
         KeyValueEntrySubstateV1 {
           value: Option::Some(
             PackageSchemaEntryPayload::V1(
               SchemaV1 {
                 type_kinds: [
                   TypeKind::Enum {
                     variants: {
                       0u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           1u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         2u64,
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(9u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         3u64,
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(10u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(10u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(10u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(10u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(10u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(10u8),
                       ),
                     ],
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           5u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(1u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         6u64,
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(5u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(5u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         7u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         8u64,
                       ),
                     ],
                   },
                   TypeKind::U64,
                   TypeKind::U64,
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(7u8),
                         ),
                       ],
                     },
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           10u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         11u64,
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(167u8),
                       ),
                     ],
                   },
                   TypeKind::Map {
                     key_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(7u8),
                     ),
                     value_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(192u8),
                     ),
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           13u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         14u64,
                       ),
                     ],
                   },
                   TypeKind::Map {
                     key_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(132u8),
                     ),
                     value_type: LocalTypeId::SchemaLocalIndex(
                       15u64,
                     ),
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(209u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           17u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         18u64,
                       ),
                     ],
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::SchemaLocalIndex(
                       19u64,
                     ),
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(10u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(10u8),
                       ),
                     ],
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           21u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::I32,
                   TypeKind::Enum {
                     variants: {
                       0u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           23u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::I64,
                   TypeKind::Enum {
                     variants: {
                       0u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           15u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(171u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(171u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         6u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         2u64,
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(5u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         8u64,
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         29u64,
                       ),
                     ],
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(196u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         29u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         31u64,
                       ),
                     ],
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [],
                       2u8 => [],
                       3u8 => [],
                       4u8 => [],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         7u64,
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(5u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         33u64,
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(65u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(7u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(1u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(209u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(161u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         36u64,
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(161u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(161u8),
                       ),
                     ],
                   },
                   TypeKind::Custom(
                     ScryptoCustomTypeKind::Reference,
                   ),
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         7u64,
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         6u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         14u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         39u64,
                       ),
                     ],
                   },
                   TypeKind::Map {
                     key_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(12u8),
                     ),
                     value_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(192u8),
                     ),
                   },
                 ],
                 type_metadata: [
                   TypeMetadata {
                     type_name: Option::Some(
                       "ConsensusManagerConfigurationFieldPayload",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "V1",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ConsensusManagerConfigSubstate",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "config",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ConsensusManagerConfig",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "max_validators",
                           "epoch_change_condition",
                           "num_unstake_epochs",
                           "total_emission_xrd_per_epoch",
                           "min_validator_reliability",
                           "num_owner_stake_units_unlock_epochs",
                           "num_fee_increase_delay_epochs",
                           "validator_creation_usd_cost",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "EpochChangeCondition",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "min_round_count",
                           "max_round_count",
                           "target_duration_millis",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ConsensusManagerStateFieldPayload",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "V1",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ConsensusManagerSubstate",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "started",
                           "epoch",
                           "effective_epoch_start_milli",
                           "actual_epoch_start_milli",
                           "round",
                           "current_leader",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "Epoch",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "Round",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "Option",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "None",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Some",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ConsensusManagerValidatorRewardsFieldPayload",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "V1",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ValidatorRewardsSubstate",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "proposer_rewards",
                           "rewards_vault",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ConsensusManagerCurrentValidatorSetFieldPayload",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "V1",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "CurrentValidatorSetSubstate",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "validator_set",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ActiveValidatorSet",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "Validator",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "key",
                           "stake",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ConsensusManagerCurrentProposalStatisticFieldPayload",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "V1",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "CurrentProposalStatisticSubstate",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "validator_statistics",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ProposalStatistic",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "made",
                           "missed",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ConsensusManagerProposerMinuteTimestampFieldPayload",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "V1",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ProposerMinuteTimestampSubstate",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ConsensusManagerProposerMilliTimestampFieldPayload",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "V1",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ProposerMilliTimestampSubstate",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ConsensusManagerRegisteredValidatorByStakeEntryPayload",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "V1",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ConsensusManagerCreateInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "validator_owner_token_address",
                           "component_address",
                           "initial_epoch",
                           "initial_config",
                           "initial_time_ms",
                           "initial_current_leader",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ConsensusManagerGetCurrentEpochInput",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ConsensusManagerStartInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ConsensusManagerGetCurrentTimeInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "precision",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "TimePrecision",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Minute",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ConsensusManagerCompareCurrentTimeInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "instant",
                           "precision",
                           "operator",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "TimeComparisonOperator",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Eq",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Lt",
                             ),
                             child_names: Option::None,
                           },
                           2u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Lte",
                             ),
                             child_names: Option::None,
                           },
                           3u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Gt",
                             ),
                             child_names: Option::None,
                           },
                           4u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Gte",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ConsensusManagerNextRoundInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "round",
                           "proposer_timestamp_ms",
                           "leader_proposal_history",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "LeaderProposalHistory",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "gap_round_leaders",
                           "current_leader",
                           "is_fallback",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ConsensusManagerCreateValidatorInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "key",
                           "fee_factor",
                           "xrd_payment",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "GlobalValidator",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "RoundChangeEvent",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "round",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "EpochChangeEvent",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "epoch",
                           "validator_set",
                           "significant_protocol_update_readiness",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                 ],
                 type_validations: [
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::Custom(
                     ScryptoCustomTypeValidation::Reference(
                       ReferenceValidation::IsGlobalTyped(
                         Option::Some(
                           PackageAddress(Reference("package_sim1pkgxxxxxxxxxcnsmgrxxxxxxxxx000746305335xxxxxxxxxxc06cl")),
                         ),
                         "Validator",
                       ),
                     ),
                   ),
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                 ],
               },
             ),
           ),
           lock_status: LockStatus::Locked,
         },
       )
  ├─ Partition(2): 2 changes
    ├─ Set: "name"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "Consensus Manager Package",
         ),
       )
    └─ Set: "description"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "A native package that may be used to get network consensus information.",
         ),
       )
  ├─ Partition(5): 1 change
    └─ Set: Field(0)
       Value: LOCKED RoleAssignmentOwnerFieldPayload::V1(
         OwnerRoleSubstate {
           rule: AccessRule::DenyAll,
           updater: OwnerRoleUpdater::None,
         },
       )
  ├─ Partition(64): 1 change
    └─ Set: Field(0)
       Value: LOCKED PackageRoyaltyAccumulatorFieldPayload::V1(
         PackageRoyaltyAccumulatorV1 {
           royalty_vault: Vault(Own("internal_vault_sim1tzqarnh06wwrmpt092qeaxkfw7xddkn6pk3m9q2mfshmtc9x5r65zw")),
         },
       )
  ├─ Partition(65): 2 changes
    ├─ Set: BlueprintVersionKey { blueprint: "ConsensusManager", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDefinitionEntryPayload::V1(
         BlueprintDefinition {
           interface: BlueprintInterface {
             blueprint_type: BlueprintType::Outer,
             is_transient: false,
             generics: [],
             feature_set: [],
             state: IndexedStateSchema {
               fields: Option::Some(
                 Tuple(
                   PartitionDescription::Logical(
                     PartitionOffset(
                       0u8,
                     ),
                   ),
                   [
                     FieldSchema {
                       field: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("d8510877df1d820f4752b3c033baf656f62e0e612731718865d048b9d16300b3")),
                           LocalTypeId::SchemaLocalIndex(
                             0u64,
                           ),
                         ),
                       ),
                       condition: Condition::Always,
                       transience: FieldTransience::NotTransient,
                     },
                     FieldSchema {
                       field: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("d8510877df1d820f4752b3c033baf656f62e0e612731718865d048b9d16300b3")),
                           LocalTypeId::SchemaLocalIndex(
                             4u64,
                           ),
                         ),
                       ),
                       condition: Condition::Always,
                       transience: FieldTransience::NotTransient,
                     },
                     FieldSchema {
                       field: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("d8510877df1d820f4752b3c033baf656f62e0e612731718865d048b9d16300b3")),
                           LocalTypeId::SchemaLocalIndex(
                             9u64,
                           ),
                         ),
                       ),
                       condition: Condition::Always,
                       transience: FieldTransience::NotTransient,
                     },
                     FieldSchema {
                       field: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("d8510877df1d820f4752b3c033baf656f62e0e612731718865d048b9d16300b3")),
                           LocalTypeId::SchemaLocalIndex(
                             12u64,
                           ),
                         ),
                       ),
                       condition: Condition::Always,
                       transience: FieldTransience::NotTransient,
                     },
                     FieldSchema {
                       field: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("d8510877df1d820f4752b3c033baf656f62e0e612731718865d048b9d16300b3")),
                           LocalTypeId::SchemaLocalIndex(
                             16u64,
                           ),
                         ),
                       ),
                       condition: Condition::Always,
                       transience: FieldTransience::NotTransient,
                     },
                     FieldSchema {
                       field: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("d8510877df1d820f4752b3c033baf656f62e0e612731718865d048b9d16300b3")),
                           LocalTypeId::SchemaLocalIndex(
                             20u64,
                           ),
                         ),
                       ),
                       condition: Condition::Always,
                       transience: FieldTransience::NotTransient,
                     },
                     FieldSchema {
                       field: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("d8510877df1d820f4752b3c033baf656f62e0e612731718865d048b9d16300b3")),
                           LocalTypeId::SchemaLocalIndex(
                             22u64,
                           ),
                         ),
                       ),
                       condition: Condition::Always,
                       transience: FieldTransience::NotTransient,
                     },
                   ],
                 ),
               ),
               collections: [
                 Tuple(
                   PartitionDescription::Logical(
                     PartitionOffset(
                       1u8,
                     ),
                   ),
                   BlueprintCollectionSchema::SortedIndex(
                     BlueprintKeyValueSchema {
                       key: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("d8510877df1d820f4752b3c033baf656f62e0e612731718865d048b9d16300b3")),
                           LocalTypeId::WellKnown(
                             WellKnownTypeId(132u8),
                           ),
                         ),
                       ),
                       value: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("d8510877df1d820f4752b3c033baf656f62e0e612731718865d048b9d16300b3")),
                           LocalTypeId::SchemaLocalIndex(
                             24u64,
                           ),
                         ),
                       ),
                       allow_ownership: false,
                     },
                   ),
                 ),
               ],
               num_logical_partitions: 2u8,
             },
             functions: {
               "create" => FunctionSchema {
                 receiver: Option::None,
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("d8510877df1d820f4752b3c033baf656f62e0e612731718865d048b9d16300b3")),
                     LocalTypeId::SchemaLocalIndex(
                       25u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("d8510877df1d820f4752b3c033baf656f62e0e612731718865d048b9d16300b3")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "get_current_epoch" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRef,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("d8510877df1d820f4752b3c033baf656f62e0e612731718865d048b9d16300b3")),
                     LocalTypeId::SchemaLocalIndex(
                       26u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("d8510877df1d820f4752b3c033baf656f62e0e612731718865d048b9d16300b3")),
                     LocalTypeId::SchemaLocalIndex(
                       6u64,
                     ),
                   ),
                 ),
               },
               "start" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("d8510877df1d820f4752b3c033baf656f62e0e612731718865d048b9d16300b3")),
                     LocalTypeId::SchemaLocalIndex(
                       27u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("d8510877df1d820f4752b3c033baf656f62e0e612731718865d048b9d16300b3")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "get_current_time" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRef,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("d8510877df1d820f4752b3c033baf656f62e0e612731718865d048b9d16300b3")),
                     LocalTypeId::SchemaLocalIndex(
                       28u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("d8510877df1d820f4752b3c033baf656f62e0e612731718865d048b9d16300b3")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(196u8),
                     ),
                   ),
                 ),
               },
               "compare_current_time" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRef,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("d8510877df1d820f4752b3c033baf656f62e0e612731718865d048b9d16300b3")),
                     LocalTypeId::SchemaLocalIndex(
                       30u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("d8510877df1d820f4752b3c033baf656f62e0e612731718865d048b9d16300b3")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(1u8),
                     ),
                   ),
                 ),
               },
               "next_round" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("d8510877df1d820f4752b3c033baf656f62e0e612731718865d048b9d16300b3")),
                     LocalTypeId::SchemaLocalIndex(
                       32u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("d8510877df1d820f4752b3c033baf656f62e0e612731718865d048b9d16300b3")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "create_validator" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("d8510877df1d820f4752b3c033baf656f62e0e612731718865d048b9d16300b3")),
                     LocalTypeId::SchemaLocalIndex(
                       34u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("d8510877df1d820f4752b3c033baf656f62e0e612731718865d048b9d16300b3")),
                     LocalTypeId::SchemaLocalIndex(
                       35u64,
                     ),
                   ),
                 ),
               },
             },
             events: {
               "RoundChangeEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("d8510877df1d820f4752b3c033baf656f62e0e612731718865d048b9d16300b3")),
                   LocalTypeId::SchemaLocalIndex(
                     37u64,
                   ),
                 ),
               ),
               "EpochChangeEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("d8510877df1d820f4752b3c033baf656f62e0e612731718865d048b9d16300b3")),
                   LocalTypeId::SchemaLocalIndex(
                     38u64,
                   ),
                 ),
               ),
             },
             types: {},
           },
           function_exports: {
             "create" => PackageExport {
               code_hash: CodeHash(hex("7cf8ec2696b93e93d87cb1d59cbe9343aefc774d68313a1d8a9fc38c5d86009d")),
               export_name: "create",
             },
             "get_current_epoch" => PackageExport {
               code_hash: CodeHash(hex("7cf8ec2696b93e93d87cb1d59cbe9343aefc774d68313a1d8a9fc38c5d86009d")),
               export_name: "get_current_epoch",
             },
             "start" => PackageExport {
               code_hash: CodeHash(hex("7cf8ec2696b93e93d87cb1d59cbe9343aefc774d68313a1d8a9fc38c5d86009d")),
               export_name: "start",
             },
             "get_current_time" => PackageExport {
               code_hash: CodeHash(hex("7cf8ec2696b93e93d87cb1d59cbe9343aefc774d68313a1d8a9fc38c5d86009d")),
               export_name: "get_current_time",
             },
             "compare_current_time" => PackageExport {
               code_hash: CodeHash(hex("7cf8ec2696b93e93d87cb1d59cbe9343aefc774d68313a1d8a9fc38c5d86009d")),
               export_name: "compare_current_time",
             },
             "next_round" => PackageExport {
               code_hash: CodeHash(hex("7cf8ec2696b93e93d87cb1d59cbe9343aefc774d68313a1d8a9fc38c5d86009d")),
               export_name: "next_round",
             },
             "create_validator" => PackageExport {
               code_hash: CodeHash(hex("7cf8ec2696b93e93d87cb1d59cbe9343aefc774d68313a1d8a9fc38c5d86009d")),
               export_name: "create_validator",
             },
           },
           hook_exports: {},
         },
       )
    └─ Set: BlueprintVersionKey { blueprint: "Validator", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDefinitionEntryPayload::V1(
         BlueprintDefinition {
           interface: BlueprintInterface {
             blueprint_type: BlueprintType::Inner {
               outer_blueprint: "ConsensusManager",
             },
             is_transient: false,
             generics: [],
             feature_set: [],
             state: IndexedStateSchema {
               fields: Option::Some(
                 Tuple(
                   PartitionDescription::Logical(
                     PartitionOffset(
                       0u8,
                     ),
                   ),
                   [
                     FieldSchema {
                       field: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("47a72f745cbdf934b73c3cc080890ff4ce147870abc6992cd23c4b565c90dc4c")),
                           LocalTypeId::SchemaLocalIndex(
                             0u64,
                           ),
                         ),
                       ),
                       condition: Condition::Always,
                       transience: FieldTransience::NotTransient,
                     },
                     FieldSchema {
                       field: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("47a72f745cbdf934b73c3cc080890ff4ce147870abc6992cd23c4b565c90dc4c")),
                           LocalTypeId::SchemaLocalIndex(
                             9u64,
                           ),
                         ),
                       ),
                       condition: Condition::Always,
                       transience: FieldTransience::NotTransient,
                     },
                   ],
                 ),
               ),
               collections: [],
               num_logical_partitions: 1u8,
             },
             functions: {
               "register" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("47a72f745cbdf934b73c3cc080890ff4ce147870abc6992cd23c4b565c90dc4c")),
                     LocalTypeId::SchemaLocalIndex(
                       11u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("47a72f745cbdf934b73c3cc080890ff4ce147870abc6992cd23c4b565c90dc4c")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "unregister" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("47a72f745cbdf934b73c3cc080890ff4ce147870abc6992cd23c4b565c90dc4c")),
                     LocalTypeId::SchemaLocalIndex(
                       12u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("47a72f745cbdf934b73c3cc080890ff4ce147870abc6992cd23c4b565c90dc4c")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "stake_as_owner" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("47a72f745cbdf934b73c3cc080890ff4ce147870abc6992cd23c4b565c90dc4c")),
                     LocalTypeId::SchemaLocalIndex(
                       13u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("47a72f745cbdf934b73c3cc080890ff4ce147870abc6992cd23c4b565c90dc4c")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(161u8),
                     ),
                   ),
                 ),
               },
               "stake" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("47a72f745cbdf934b73c3cc080890ff4ce147870abc6992cd23c4b565c90dc4c")),
                     LocalTypeId::SchemaLocalIndex(
                       14u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("47a72f745cbdf934b73c3cc080890ff4ce147870abc6992cd23c4b565c90dc4c")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(161u8),
                     ),
                   ),
                 ),
               },
               "unstake" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("47a72f745cbdf934b73c3cc080890ff4ce147870abc6992cd23c4b565c90dc4c")),
                     LocalTypeId::SchemaLocalIndex(
                       15u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("47a72f745cbdf934b73c3cc080890ff4ce147870abc6992cd23c4b565c90dc4c")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(161u8),
                     ),
                   ),
                 ),
               },
               "claim_xrd" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("47a72f745cbdf934b73c3cc080890ff4ce147870abc6992cd23c4b565c90dc4c")),
                     LocalTypeId::SchemaLocalIndex(
                       16u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("47a72f745cbdf934b73c3cc080890ff4ce147870abc6992cd23c4b565c90dc4c")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(161u8),
                     ),
                   ),
                 ),
               },
               "update_key" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("47a72f745cbdf934b73c3cc080890ff4ce147870abc6992cd23c4b565c90dc4c")),
                     LocalTypeId::SchemaLocalIndex(
                       17u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("47a72f745cbdf934b73c3cc080890ff4ce147870abc6992cd23c4b565c90dc4c")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "update_fee" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("47a72f745cbdf934b73c3cc080890ff4ce147870abc6992cd23c4b565c90dc4c")),
                     LocalTypeId::SchemaLocalIndex(
                       18u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("47a72f745cbdf934b73c3cc080890ff4ce147870abc6992cd23c4b565c90dc4c")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "update_accept_delegated_stake" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("47a72f745cbdf934b73c3cc080890ff4ce147870abc6992cd23c4b565c90dc4c")),
                     LocalTypeId::SchemaLocalIndex(
                       19u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("47a72f745cbdf934b73c3cc080890ff4ce147870abc6992cd23c4b565c90dc4c")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "accepts_delegated_stake" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("47a72f745cbdf934b73c3cc080890ff4ce147870abc6992cd23c4b565c90dc4c")),
                     LocalTypeId::SchemaLocalIndex(
                       20u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("47a72f745cbdf934b73c3cc080890ff4ce147870abc6992cd23c4b565c90dc4c")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(1u8),
                     ),
                   ),
                 ),
               },
               "total_stake_xrd_amount" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRef,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("47a72f745cbdf934b73c3cc080890ff4ce147870abc6992cd23c4b565c90dc4c")),
                     LocalTypeId::SchemaLocalIndex(
                       21u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("47a72f745cbdf934b73c3cc080890ff4ce147870abc6992cd23c4b565c90dc4c")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(192u8),
                     ),
                   ),
                 ),
               },
               "total_stake_unit_supply" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRef,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("47a72f745cbdf934b73c3cc080890ff4ce147870abc6992cd23c4b565c90dc4c")),
                     LocalTypeId::SchemaLocalIndex(
                       22u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("47a72f745cbdf934b73c3cc080890ff4ce147870abc6992cd23c4b565c90dc4c")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(192u8),
                     ),
                   ),
                 ),
               },
               "get_redemption_value" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRef,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("47a72f745cbdf934b73c3cc080890ff4ce147870abc6992cd23c4b565c90dc4c")),
                     LocalTypeId::SchemaLocalIndex(
                       23u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("47a72f745cbdf934b73c3cc080890ff4ce147870abc6992cd23c4b565c90dc4c")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(192u8),
                     ),
                   ),
                 ),
               },
               "signal_protocol_update_readiness" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("47a72f745cbdf934b73c3cc080890ff4ce147870abc6992cd23c4b565c90dc4c")),
                     LocalTypeId::SchemaLocalIndex(
                       24u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("47a72f745cbdf934b73c3cc080890ff4ce147870abc6992cd23c4b565c90dc4c")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "get_protocol_update_readiness" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("47a72f745cbdf934b73c3cc080890ff4ce147870abc6992cd23c4b565c90dc4c")),
                     LocalTypeId::SchemaLocalIndex(
                       25u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("47a72f745cbdf934b73c3cc080890ff4ce147870abc6992cd23c4b565c90dc4c")),
                     LocalTypeId::SchemaLocalIndex(
                       26u64,
                     ),
                   ),
                 ),
               },
               "lock_owner_stake_units" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("47a72f745cbdf934b73c3cc080890ff4ce147870abc6992cd23c4b565c90dc4c")),
                     LocalTypeId::SchemaLocalIndex(
                       27u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("47a72f745cbdf934b73c3cc080890ff4ce147870abc6992cd23c4b565c90dc4c")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "start_unlock_owner_stake_units" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("47a72f745cbdf934b73c3cc080890ff4ce147870abc6992cd23c4b565c90dc4c")),
                     LocalTypeId::SchemaLocalIndex(
                       28u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("47a72f745cbdf934b73c3cc080890ff4ce147870abc6992cd23c4b565c90dc4c")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "finish_unlock_owner_stake_units" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("47a72f745cbdf934b73c3cc080890ff4ce147870abc6992cd23c4b565c90dc4c")),
                     LocalTypeId::SchemaLocalIndex(
                       29u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("47a72f745cbdf934b73c3cc080890ff4ce147870abc6992cd23c4b565c90dc4c")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(161u8),
                     ),
                   ),
                 ),
               },
               "apply_emission" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("47a72f745cbdf934b73c3cc080890ff4ce147870abc6992cd23c4b565c90dc4c")),
                     LocalTypeId::SchemaLocalIndex(
                       30u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("47a72f745cbdf934b73c3cc080890ff4ce147870abc6992cd23c4b565c90dc4c")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "apply_reward" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("47a72f745cbdf934b73c3cc080890ff4ce147870abc6992cd23c4b565c90dc4c")),
                     LocalTypeId::SchemaLocalIndex(
                       31u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("47a72f745cbdf934b73c3cc080890ff4ce147870abc6992cd23c4b565c90dc4c")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
             },
             events: {
               "RegisterValidatorEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("47a72f745cbdf934b73c3cc080890ff4ce147870abc6992cd23c4b565c90dc4c")),
                   LocalTypeId::SchemaLocalIndex(
                     32u64,
                   ),
                 ),
               ),
               "UnregisterValidatorEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("47a72f745cbdf934b73c3cc080890ff4ce147870abc6992cd23c4b565c90dc4c")),
                   LocalTypeId::SchemaLocalIndex(
                     33u64,
                   ),
                 ),
               ),
               "StakeEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("47a72f745cbdf934b73c3cc080890ff4ce147870abc6992cd23c4b565c90dc4c")),
                   LocalTypeId::SchemaLocalIndex(
                     34u64,
                   ),
                 ),
               ),
               "UnstakeEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("47a72f745cbdf934b73c3cc080890ff4ce147870abc6992cd23c4b565c90dc4c")),
                   LocalTypeId::SchemaLocalIndex(
                     35u64,
                   ),
                 ),
               ),
               "ClaimXrdEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("47a72f745cbdf934b73c3cc080890ff4ce147870abc6992cd23c4b565c90dc4c")),
                   LocalTypeId::SchemaLocalIndex(
                     36u64,
                   ),
                 ),
               ),
               "ProtocolUpdateReadinessSignalEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("47a72f745cbdf934b73c3cc080890ff4ce147870abc6992cd23c4b565c90dc4c")),
                   LocalTypeId::SchemaLocalIndex(
                     37u64,
                   ),
                 ),
               ),
               "UpdateAcceptingStakeDelegationStateEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("47a72f745cbdf934b73c3cc080890ff4ce147870abc6992cd23c4b565c90dc4c")),
                   LocalTypeId::SchemaLocalIndex(
                     38u64,
                   ),
                 ),
               ),
               "ValidatorEmissionAppliedEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("47a72f745cbdf934b73c3cc080890ff4ce147870abc6992cd23c4b565c90dc4c")),
                   LocalTypeId::SchemaLocalIndex(
                     39u64,
                   ),
                 ),
               ),
               "ValidatorRewardAppliedEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("47a72f745cbdf934b73c3cc080890ff4ce147870abc6992cd23c4b565c90dc4c")),
                   LocalTypeId::SchemaLocalIndex(
                     40u64,
                   ),
                 ),
               ),
             },
             types: {},
           },
           function_exports: {
             "register" => PackageExport {
               code_hash: CodeHash(hex("7cf8ec2696b93e93d87cb1d59cbe9343aefc774d68313a1d8a9fc38c5d86009d")),
               export_name: "register",
             },
             "unregister" => PackageExport {
               code_hash: CodeHash(hex("7cf8ec2696b93e93d87cb1d59cbe9343aefc774d68313a1d8a9fc38c5d86009d")),
               export_name: "unregister",
             },
             "stake_as_owner" => PackageExport {
               code_hash: CodeHash(hex("7cf8ec2696b93e93d87cb1d59cbe9343aefc774d68313a1d8a9fc38c5d86009d")),
               export_name: "stake_as_owner",
             },
             "stake" => PackageExport {
               code_hash: CodeHash(hex("7cf8ec2696b93e93d87cb1d59cbe9343aefc774d68313a1d8a9fc38c5d86009d")),
               export_name: "stake",
             },
             "unstake" => PackageExport {
               code_hash: CodeHash(hex("7cf8ec2696b93e93d87cb1d59cbe9343aefc774d68313a1d8a9fc38c5d86009d")),
               export_name: "unstake",
             },
             "claim_xrd" => PackageExport {
               code_hash: CodeHash(hex("7cf8ec2696b93e93d87cb1d59cbe9343aefc774d68313a1d8a9fc38c5d86009d")),
               export_name: "claim_xrd",
             },
             "update_key" => PackageExport {
               code_hash: CodeHash(hex("7cf8ec2696b93e93d87cb1d59cbe9343aefc774d68313a1d8a9fc38c5d86009d")),
               export_name: "update_key",
             },
             "update_fee" => PackageExport {
               code_hash: CodeHash(hex("7cf8ec2696b93e93d87cb1d59cbe9343aefc774d68313a1d8a9fc38c5d86009d")),
               export_name: "update_fee",
             },
             "update_accept_delegated_stake" => PackageExport {
               code_hash: CodeHash(hex("7cf8ec2696b93e93d87cb1d59cbe9343aefc774d68313a1d8a9fc38c5d86009d")),
               export_name: "update_accept_delegated_stake",
             },
             "accepts_delegated_stake" => PackageExport {
               code_hash: CodeHash(hex("7cf8ec2696b93e93d87cb1d59cbe9343aefc774d68313a1d8a9fc38c5d86009d")),
               export_name: "accepts_delegated_stake",
             },
             "total_stake_xrd_amount" => PackageExport {
               code_hash: CodeHash(hex("7cf8ec2696b93e93d87cb1d59cbe9343aefc774d68313a1d8a9fc38c5d86009d")),
               export_name: "total_stake_xrd_amount",
             },
             "total_stake_unit_supply" => PackageExport {
               code_hash: CodeHash(hex("7cf8ec2696b93e93d87cb1d59cbe9343aefc774d68313a1d8a9fc38c5d86009d")),
               export_name: "total_stake_unit_supply",
             },
             "get_redemption_value" => PackageExport {
               code_hash: CodeHash(hex("7cf8ec2696b93e93d87cb1d59cbe9343aefc774d68313a1d8a9fc38c5d86009d")),
               export_name: "get_redemption_value",
             },
             "signal_protocol_update_readiness" => PackageExport {
               code_hash: CodeHash(hex("7cf8ec2696b93e93d87cb1d59cbe9343aefc774d68313a1d8a9fc38c5d86009d")),
               export_name: "signal_protocol_update_readiness",
             },
             "get_protocol_update_readiness" => PackageExport {
               code_hash: CodeHash(hex("7cf8ec2696b93e93d87cb1d59cbe9343aefc774d68313a1d8a9fc38c5d86009d")),
               export_name: "get_protocol_update_readiness",
             },
             "lock_owner_stake_units" => PackageExport {
               code_hash: CodeHash(hex("7cf8ec2696b93e93d87cb1d59cbe9343aefc774d68313a1d8a9fc38c5d86009d")),
               export_name: "lock_owner_stake_units",
             },
             "start_unlock_owner_stake_units" => PackageExport {
               code_hash: CodeHash(hex("7cf8ec2696b93e93d87cb1d59cbe9343aefc774d68313a1d8a9fc38c5d86009d")),
               export_name: "start_unlock_owner_stake_units",
             },
             "finish_unlock_owner_stake_units" => PackageExport {
               code_hash: CodeHash(hex("7cf8ec2696b93e93d87cb1d59cbe9343aefc774d68313a1d8a9fc38c5d86009d")),
               export_name: "finish_unlock_owner_stake_units",
             },
             "apply_emission" => PackageExport {
               code_hash: CodeHash(hex("7cf8ec2696b93e93d87cb1d59cbe9343aefc774d68313a1d8a9fc38c5d86009d")),
               export_name: "apply_emission",
             },
             "apply_reward" => PackageExport {
               code_hash: CodeHash(hex("7cf8ec2696b93e93d87cb1d59cbe9343aefc774d68313a1d8a9fc38c5d86009d")),
               export_name: "apply_reward",
             },
           },
           hook_exports: {},
         },
       )
  ├─ Partition(66): 2 changes
    ├─ Set: BlueprintVersionKey { blueprint: "ConsensusManager", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDependenciesEntryPayload::V1(
         BlueprintDependencies([
           GlobalAddress(Reference("resource_sim1tknxxxxxxxxxradxrdxxxxxxxxx009923554798xxxxxxxxxakj8n3")),
           GlobalAddress(Reference("resource_sim1nfxxxxxxxxxxpkcllrxxxxxxxxx003652646977xxxxxxxxxla870l")),
           GlobalAddress(Reference("resource_sim1nfxxxxxxxxxxsystxnxxxxxxxxx002683325037xxxxxxxxxw002k0")),
           GlobalAddress(Reference("resource_sim1nfxxxxxxxxxxvdrwnrxxxxxxxxx004365253834xxxxxxxxxjxu0rl")),
         ]),
       )
    └─ Set: BlueprintVersionKey { blueprint: "Validator", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDependenciesEntryPayload::V1(
         BlueprintDependencies([]),
       )
  ├─ Partition(67): 2 changes
    ├─ Set: BlueprintVersionKey { blueprint: "ConsensusManager", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionRoyaltyConfigEntryPayload::V1(
         PackageRoyaltyConfig::Disabled,
       )
    └─ Set: BlueprintVersionKey { blueprint: "Validator", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionRoyaltyConfigEntryPayload::V1(
         PackageRoyaltyConfig::Disabled,
       )
  ├─ Partition(68): 2 changes
    ├─ Set: BlueprintVersionKey { blueprint: "ConsensusManager", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionAuthConfigEntryPayload::V1(
         AuthConfig {
           function_auth: FunctionAuth::AccessRules(
             {
               "create" => AccessRule::Protected(
                 AccessRuleNode::ProofRule(
                   ProofRule::Require(
                     ResourceOrNonFungible::NonFungible(
                       NonFungibleGlobalId {
                         resource_address: ResourceAddress(Reference("resource_sim1nfxxxxxxxxxxsystxnxxxxxxxxx002683325037xxxxxxxxxw002k0")),
                         local_id: NonFungibleLocalId("#0#"),
                       },
                     ),
                   ),
                 ),
               ),
             },
           ),
           method_auth: MethodAuthTemplate::StaticRoleDefinition(
             StaticRoleDefinition {
               roles: RoleSpecification::Normal(
                 {
                   RoleKey("validator") => RoleList([]),
                 },
               ),
               methods: {
                 MethodKey("start") => MethodAccessibility::RoleProtected(
                   RoleList([]),
                 ),
                 MethodKey("next_round") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("validator"),
                   ]),
                 ),
                 MethodKey("get_current_epoch") => MethodAccessibility::Public,
                 MethodKey("get_current_time") => MethodAccessibility::Public,
                 MethodKey("compare_current_time") => MethodAccessibility::Public,
                 MethodKey("create_validator") => MethodAccessibility::Public,
               },
             },
           ),
         },
       )
    └─ Set: BlueprintVersionKey { blueprint: "Validator", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionAuthConfigEntryPayload::V1(
         AuthConfig {
           function_auth: FunctionAuth::AllowAll,
           method_auth: MethodAuthTemplate::StaticRoleDefinition(
             StaticRoleDefinition {
               roles: RoleSpecification::Normal(
                 {},
               ),
               methods: {
                 MethodKey("unstake") => MethodAccessibility::Public,
                 MethodKey("claim_xrd") => MethodAccessibility::Public,
                 MethodKey("stake") => MethodAccessibility::Public,
                 MethodKey("accepts_delegated_stake") => MethodAccessibility::Public,
                 MethodKey("total_stake_xrd_amount") => MethodAccessibility::Public,
                 MethodKey("total_stake_unit_supply") => MethodAccessibility::Public,
                 MethodKey("get_redemption_value") => MethodAccessibility::Public,
                 MethodKey("stake_as_owner") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("_owner_"),
                   ]),
                 ),
                 MethodKey("register") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("_owner_"),
                   ]),
                 ),
                 MethodKey("unregister") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("_owner_"),
                   ]),
                 ),
                 MethodKey("update_key") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("_owner_"),
                   ]),
                 ),
                 MethodKey("update_fee") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("_owner_"),
                   ]),
                 ),
                 MethodKey("lock_owner_stake_units") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("_owner_"),
                   ]),
                 ),
                 MethodKey("start_unlock_owner_stake_units") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("_owner_"),
                   ]),
                 ),
                 MethodKey("finish_unlock_owner_stake_units") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("_owner_"),
                   ]),
                 ),
                 MethodKey("update_accept_delegated_stake") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("_owner_"),
                   ]),
                 ),
                 MethodKey("signal_protocol_update_readiness") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("_owner_"),
                   ]),
                 ),
                 MethodKey("get_protocol_update_readiness") => MethodAccessibility::OuterObjectOnly,
                 MethodKey("apply_emission") => MethodAccessibility::OuterObjectOnly,
                 MethodKey("apply_reward") => MethodAccessibility::OuterObjectOnly,
               },
             },
           ),
         },
       )
  ├─ Partition(69): 1 change
    └─ Set: CodeHash(hex("7cf8ec2696b93e93d87cb1d59cbe9343aefc774d68313a1d8a9fc38c5d86009d"))
       Value: LOCKED PackageCodeVmTypeEntryPayload::V1(
         PackageCodeVmTypeV1::Native,
       )
  ├─ Partition(70): 1 change
    └─ Set: CodeHash(hex("7cf8ec2696b93e93d87cb1d59cbe9343aefc774d68313a1d8a9fc38c5d86009d"))
       Value: LOCKED PackageCodeOriginalCodeEntryPayload::V1(
         PackageCodeOriginalCodeV1(hex("0000000000000003")),
       )
  └─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxpackgexxxxxxxxx000726633226xxxxxxxxxlk8hc9")),
               blueprint_name: "Package",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::None,
             features: [
               "package_royalty",
             ],
             generic_substitutions: [],
           },
           object_type: ObjectType::Global {
             modules: {
               AttachedModuleId::Metadata => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
               AttachedModuleId::RoleAssignment => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
             },
           },
         },
       )
├─ resource_sim1nfxxxxxxxxxxaccwnrxxxxxxxxx006664022062xxxxxxxxxrn80rl across 6 partitions
  ├─ Partition(1): 1 change
    └─ Set: SchemaHash(5dfa18c939aaf3734b6dbfad32a69267f55eb66be8bb1df1e48ca178a13dc92c)
       Value: KeyValueEntrySubstate::V1(
         KeyValueEntrySubstateV1 {
           value: Option::Some(
             PackageSchemaEntryPayload::V1(
               SchemaV1 {
                 type_kinds: [
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(12u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(132u8),
                       ),
                     ],
                   },
                 ],
                 type_metadata: [
                   TypeMetadata {
                     type_name: Option::Some(
                       "AccountOwnerBadgeData",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "name",
                           "account",
                         ],
                       ),
                     ),
                   },
                 ],
                 type_validations: [
                   TypeValidation::None,
                 ],
               },
             ),
           ),
           lock_status: LockStatus::Locked,
         },
       )
  ├─ Partition(2): 4 changes
    ├─ Set: "name"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "Account Owner Badges",
         ),
       )
    ├─ Set: "description"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "Badges created by the Radix system that provide individual control over account components.",
         ),
       )
    ├─ Set: "icon_url"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::Url(
           Url("https://assets.radixdlt.com/icons/icon-account_owner_badge.png"),
         ),
       )
    └─ Set: "tags"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::StringArray(
           [
             "badge",
             "account",
           ],
         ),
       )
  ├─ Partition(5): 1 change
    └─ Set: Field(0)
       Value: LOCKED RoleAssignmentOwnerFieldPayload::V1(
         OwnerRoleSubstate {
           rule: AccessRule::Protected(
             AccessRuleNode::ProofRule(
               ProofRule::Require(
                 ResourceOrNonFungible::NonFungible(
                   NonFungibleGlobalId {
                     resource_address: ResourceAddress(Reference("resource_sim1nfxxxxxxxxxxglcllrxxxxxxxxx002350006550xxxxxxxxxk5870l")),
                     local_id: NonFungibleLocalId("[c5ec7d57945b023650447ea6c6293015819af611a62b9dd35458ba976bda41a2]"),
                   },
                 ),
               ),
             ),
           ),
           updater: OwnerRoleUpdater::None,
         },
       )
  ├─ Partition(6): 14 changes
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("depositor") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::AllowAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("burner_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("freezer") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("freezer_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("burner") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("recaller") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("withdrawer") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::AllowAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("non_fungible_data_updater_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("recaller_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("non_fungible_data_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("depositor_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("minter") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::Protected(
           AccessRuleNode::ProofRule(
             ProofRule::Require(
               ResourceOrNonFungible::NonFungible(
                 NonFungibleGlobalId {
                   resource_address: ResourceAddress(Reference("resource_sim1nfxxxxxxxxxxpkcllrxxxxxxxxx003652646977xxxxxxxxxla870l")),
                   local_id: NonFungibleLocalId("[de325a3c26460ed6dfa4257f8c87b7cdf2b3bc2da70da1be7f7fd327e763071f]"),
                 },
               ),
             ),
           ),
         ),
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("withdrawer_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    └─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("minter_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
  ├─ Partition(64): 2 changes
    ├─ Set: Field(0)
       Value: LOCKED NonFungibleResourceManagerIdTypeFieldPayload::V1(
         NonFungibleIdType::Bytes,
       )
    └─ Set: Field(1)
       Value: LOCKED NonFungibleResourceManagerMutableFieldsFieldPayload::V1(
         NonFungibleResourceManagerMutableFieldsV1 {
           mutable_field_index: {},
         },
       )
  └─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxresrcexxxxxxxxx000538436477xxxxxxxxxaj0zg9")),
               blueprint_name: "NonFungibleResourceManager",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::None,
             features: [
               "mint",
             ],
             generic_substitutions: [
               GenericSubstitution::Local(
                 ScopedTypeId(
                   SchemaHash(hex("5dfa18c939aaf3734b6dbfad32a69267f55eb66be8bb1df1e48ca178a13dc92c")),
                   LocalTypeId::SchemaLocalIndex(
                     0u64,
                   ),
                 ),
               ),
             ],
           },
           object_type: ObjectType::Global {
             modules: {
               AttachedModuleId::RoleAssignment => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
               AttachedModuleId::Metadata => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
             },
           },
         },
       )
├─ package_sim1pkgxxxxxxxxxaccntxxxxxxxxxx000929625493xxxxxxxxxrn8jm6 across 11 partitions
  ├─ Partition(1): 1 change
    └─ Set: SchemaHash(a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a)
       Value: KeyValueEntrySubstate::V1(
         KeyValueEntrySubstateV1 {
           value: Option::Some(
             PackageSchemaEntryPayload::V1(
               SchemaV1 {
                 type_kinds: [
                   TypeKind::Enum {
                     variants: {
                       0u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           1u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         2u64,
                       ),
                     ],
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [],
                       2u8 => [],
                     },
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(167u8),
                         ),
                       ],
                     },
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           5u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [],
                     },
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(66u8),
                         ),
                       ],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(230u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         8u64,
                       ),
                     ],
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(171u8),
                         ),
                       ],
                     },
                   },
                   TypeKind::Custom(
                     ScryptoCustomTypeKind::Reference,
                   ),
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         9u64,
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(161u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(161u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         17u64,
                       ),
                     ],
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(161u8),
                     ),
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(133u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(133u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         20u64,
                       ),
                     ],
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(194u8),
                     ),
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(133u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(133u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         20u64,
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(133u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(133u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         20u64,
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(133u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(133u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         20u64,
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         2u64,
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(133u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         5u64,
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(133u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(161u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         31u64,
                       ),
                     ],
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(228u8),
                         ),
                       ],
                     },
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(161u8),
                         ),
                       ],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         17u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         31u64,
                       ),
                     ],
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           17u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(161u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         31u64,
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         17u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         31u64,
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(228u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(228u8),
                       ),
                     ],
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(133u8),
                         ),
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(192u8),
                         ),
                       ],
                       1u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(133u8),
                         ),
                         LocalTypeId::SchemaLocalIndex(
                           20u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(133u8),
                         ),
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(192u8),
                         ),
                       ],
                       1u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(133u8),
                         ),
                         LocalTypeId::SchemaLocalIndex(
                           20u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(133u8),
                         ),
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(192u8),
                         ),
                       ],
                       1u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(133u8),
                         ),
                         LocalTypeId::SchemaLocalIndex(
                           20u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(133u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         5u64,
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(133u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         2u64,
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(228u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(228u8),
                       ),
                     ],
                   },
                 ],
                 type_metadata: [
                   TypeMetadata {
                     type_name: Option::Some(
                       "AccountDepositRuleFieldPayload",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "V1",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AccountSubstate",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "default_deposit_rule",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "DefaultDepositRule",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Accept",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Reject",
                             ),
                             child_names: Option::None,
                           },
                           2u8 => TypeMetadata {
                             type_name: Option::Some(
                               "AllowExisting",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AccountResourceVaultEntryPayload",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "V1",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AccountResourcePreferenceEntryPayload",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "V1",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ResourcePreference",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Allowed",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Disallowed",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AccountAuthorizedDepositorEntryPayload",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "V1",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AccountCreateAdvancedInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "owner_role",
                           "address_reservation",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "Option",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "None",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Some",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "GlobalAccount",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AccountCreateInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AccountSecurifyInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AccountLockFeeInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "amount",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AccountLockContingentFeeInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "amount",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AccountDepositInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "bucket",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AccountDepositBatchInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "buckets",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AccountWithdrawInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "resource_address",
                           "amount",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AccountWithdrawNonFungiblesInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "resource_address",
                           "ids",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AccountBurnInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "resource_address",
                           "amount",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AccountBurnNonFungiblesInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "resource_address",
                           "ids",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AccountLockFeeAndWithdrawInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "amount_to_lock",
                           "resource_address",
                           "amount",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AccountLockFeeAndWithdrawNonFungiblesInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "amount_to_lock",
                           "resource_address",
                           "ids",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AccountCreateProofOfAmountInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "resource_address",
                           "amount",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AccountCreateProofOfNonFungiblesInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "resource_address",
                           "ids",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AccountSetDefaultDepositRuleInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "default",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AccountSetResourcePreferenceInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "resource_address",
                           "resource_preference",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AccountRemoveResourcePreferenceInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "resource_address",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AccountTryDepositOrRefundInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "bucket",
                           "authorized_depositor_badge",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "Option",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "None",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Some",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "Option",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "None",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Some",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AccountTryDepositBatchOrRefundInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "buckets",
                           "authorized_depositor_badge",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "Option",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "None",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Some",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AccountTryDepositOrAbortInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "bucket",
                           "authorized_depositor_badge",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AccountTryDepositBatchOrAbortInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "buckets",
                           "authorized_depositor_badge",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AccountAddAuthorizedDepositorInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "badge",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AccountRemoveAuthorizedDepositorInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "badge",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "WithdrawEvent",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Fungible",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "NonFungible",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "DepositEvent",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Fungible",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "NonFungible",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "RejectedDepositEvent",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Fungible",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "NonFungible",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "SetResourcePreferenceEvent",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "resource_address",
                           "preference",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "RemoveResourcePreferenceEvent",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "resource_address",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "SetDefaultDepositRuleEvent",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "default_deposit_rule",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AddAuthorizedDepositorEvent",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "authorized_depositor_badge",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "RemoveAuthorizedDepositorEvent",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "authorized_depositor_badge",
                         ],
                       ),
                     ),
                   },
                 ],
                 type_validations: [
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::Custom(
                     ScryptoCustomTypeValidation::Reference(
                       ReferenceValidation::IsGlobalTyped(
                         Option::Some(
                           PackageAddress(Reference("package_sim1pkgxxxxxxxxxaccntxxxxxxxxxx000929625493xxxxxxxxxrn8jm6")),
                         ),
                         "Account",
                       ),
                     ),
                   ),
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                 ],
               },
             ),
           ),
           lock_status: LockStatus::Locked,
         },
       )
  ├─ Partition(2): 2 changes
    ├─ Set: "name"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "Account Package",
         ),
       )
    └─ Set: "description"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "A native package that defines the logic of account components.",
         ),
       )
  ├─ Partition(5): 1 change
    └─ Set: Field(0)
       Value: LOCKED RoleAssignmentOwnerFieldPayload::V1(
         OwnerRoleSubstate {
           rule: AccessRule::DenyAll,
           updater: OwnerRoleUpdater::None,
         },
       )
  ├─ Partition(64): 1 change
    └─ Set: Field(0)
       Value: LOCKED PackageRoyaltyAccumulatorFieldPayload::V1(
         PackageRoyaltyAccumulatorV1 {
           royalty_vault: Vault(Own("internal_vault_sim1tzed638ulmf60n36xc7pt6cur8w0jj6de5ehwfe2y7hkvm8d0e3tqy")),
         },
       )
  ├─ Partition(65): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "Account", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDefinitionEntryPayload::V1(
         BlueprintDefinition {
           interface: BlueprintInterface {
             blueprint_type: BlueprintType::Outer,
             is_transient: false,
             generics: [],
             feature_set: [],
             state: IndexedStateSchema {
               fields: Option::Some(
                 Tuple(
                   PartitionDescription::Logical(
                     PartitionOffset(
                       0u8,
                     ),
                   ),
                   [
                     FieldSchema {
                       field: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                           LocalTypeId::SchemaLocalIndex(
                             0u64,
                           ),
                         ),
                       ),
                       condition: Condition::Always,
                       transience: FieldTransience::NotTransient,
                     },
                   ],
                 ),
               ),
               collections: [
                 Tuple(
                   PartitionDescription::Logical(
                     PartitionOffset(
                       1u8,
                     ),
                   ),
                   BlueprintCollectionSchema::KeyValueStore(
                     BlueprintKeyValueSchema {
                       key: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                           LocalTypeId::WellKnown(
                             WellKnownTypeId(133u8),
                           ),
                         ),
                       ),
                       value: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                           LocalTypeId::SchemaLocalIndex(
                             3u64,
                           ),
                         ),
                       ),
                       allow_ownership: true,
                     },
                   ),
                 ),
                 Tuple(
                   PartitionDescription::Logical(
                     PartitionOffset(
                       2u8,
                     ),
                   ),
                   BlueprintCollectionSchema::KeyValueStore(
                     BlueprintKeyValueSchema {
                       key: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                           LocalTypeId::WellKnown(
                             WellKnownTypeId(133u8),
                           ),
                         ),
                       ),
                       value: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                           LocalTypeId::SchemaLocalIndex(
                             4u64,
                           ),
                         ),
                       ),
                       allow_ownership: false,
                     },
                   ),
                 ),
                 Tuple(
                   PartitionDescription::Logical(
                     PartitionOffset(
                       3u8,
                     ),
                   ),
                   BlueprintCollectionSchema::KeyValueStore(
                     BlueprintKeyValueSchema {
                       key: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                           LocalTypeId::WellKnown(
                             WellKnownTypeId(228u8),
                           ),
                         ),
                       ),
                       value: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                           LocalTypeId::SchemaLocalIndex(
                             6u64,
                           ),
                         ),
                       ),
                       allow_ownership: false,
                     },
                   ),
                 ),
               ],
               num_logical_partitions: 4u8,
             },
             functions: {
               "create_advanced" => FunctionSchema {
                 receiver: Option::None,
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                     LocalTypeId::SchemaLocalIndex(
                       7u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                     LocalTypeId::SchemaLocalIndex(
                       9u64,
                     ),
                   ),
                 ),
               },
               "create" => FunctionSchema {
                 receiver: Option::None,
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                     LocalTypeId::SchemaLocalIndex(
                       10u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                     LocalTypeId::SchemaLocalIndex(
                       11u64,
                     ),
                   ),
                 ),
               },
               "securify" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                     LocalTypeId::SchemaLocalIndex(
                       12u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(161u8),
                     ),
                   ),
                 ),
               },
               "lock_fee" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                     LocalTypeId::SchemaLocalIndex(
                       13u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "lock_contingent_fee" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                     LocalTypeId::SchemaLocalIndex(
                       14u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "deposit" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                     LocalTypeId::SchemaLocalIndex(
                       15u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "deposit_batch" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                     LocalTypeId::SchemaLocalIndex(
                       16u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "withdraw" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                     LocalTypeId::SchemaLocalIndex(
                       18u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(161u8),
                     ),
                   ),
                 ),
               },
               "withdraw_non_fungibles" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                     LocalTypeId::SchemaLocalIndex(
                       19u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(161u8),
                     ),
                   ),
                 ),
               },
               "burn" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                     LocalTypeId::SchemaLocalIndex(
                       21u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "burn_non_fungibles" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                     LocalTypeId::SchemaLocalIndex(
                       22u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "lock_fee_and_withdraw" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                     LocalTypeId::SchemaLocalIndex(
                       23u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(161u8),
                     ),
                   ),
                 ),
               },
               "lock_fee_and_withdraw_non_fungibles" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                     LocalTypeId::SchemaLocalIndex(
                       24u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(161u8),
                     ),
                   ),
                 ),
               },
               "create_proof_of_amount" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRef,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                     LocalTypeId::SchemaLocalIndex(
                       25u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(164u8),
                     ),
                   ),
                 ),
               },
               "create_proof_of_non_fungibles" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRef,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                     LocalTypeId::SchemaLocalIndex(
                       26u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(164u8),
                     ),
                   ),
                 ),
               },
               "set_default_deposit_rule" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRef,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                     LocalTypeId::SchemaLocalIndex(
                       27u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "set_resource_preference" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRef,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                     LocalTypeId::SchemaLocalIndex(
                       28u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "remove_resource_preference" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRef,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                     LocalTypeId::SchemaLocalIndex(
                       29u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "try_deposit_or_refund" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                     LocalTypeId::SchemaLocalIndex(
                       30u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                     LocalTypeId::SchemaLocalIndex(
                       32u64,
                     ),
                   ),
                 ),
               },
               "try_deposit_batch_or_refund" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                     LocalTypeId::SchemaLocalIndex(
                       33u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                     LocalTypeId::SchemaLocalIndex(
                       34u64,
                     ),
                   ),
                 ),
               },
               "try_deposit_or_abort" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                     LocalTypeId::SchemaLocalIndex(
                       35u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "try_deposit_batch_or_abort" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                     LocalTypeId::SchemaLocalIndex(
                       36u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "add_authorized_depositor" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                     LocalTypeId::SchemaLocalIndex(
                       37u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "remove_authorized_depositor" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                     LocalTypeId::SchemaLocalIndex(
                       38u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
             },
             events: {
               "WithdrawEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                   LocalTypeId::SchemaLocalIndex(
                     39u64,
                   ),
                 ),
               ),
               "DepositEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                   LocalTypeId::SchemaLocalIndex(
                     40u64,
                   ),
                 ),
               ),
               "RejectedDepositEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                   LocalTypeId::SchemaLocalIndex(
                     41u64,
                   ),
                 ),
               ),
               "SetResourcePreferenceEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                   LocalTypeId::SchemaLocalIndex(
                     42u64,
                   ),
                 ),
               ),
               "RemoveResourcePreferenceEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                   LocalTypeId::SchemaLocalIndex(
                     43u64,
                   ),
                 ),
               ),
               "SetDefaultDepositRuleEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                   LocalTypeId::SchemaLocalIndex(
                     44u64,
                   ),
                 ),
               ),
               "AddAuthorizedDepositorEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                   LocalTypeId::SchemaLocalIndex(
                     45u64,
                   ),
                 ),
               ),
               "RemoveAuthorizedDepositorEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("a54510264dbd13e03ea7d6e3112d5f3a88c9bddae66b9569d5de381ba9447a8a")),
                   LocalTypeId::SchemaLocalIndex(
                     46u64,
                   ),
                 ),
               ),
             },
             types: {},
           },
           function_exports: {
             "create_advanced" => PackageExport {
               code_hash: CodeHash(hex("3a42e66e46dd7633b57d1f921780a1ac715e6b93c19ee52ab714178eb3a9f673")),
               export_name: "create_advanced",
             },
             "create" => PackageExport {
               code_hash: CodeHash(hex("3a42e66e46dd7633b57d1f921780a1ac715e6b93c19ee52ab714178eb3a9f673")),
               export_name: "create",
             },
             "securify" => PackageExport {
               code_hash: CodeHash(hex("3a42e66e46dd7633b57d1f921780a1ac715e6b93c19ee52ab714178eb3a9f673")),
               export_name: "securify",
             },
             "lock_fee" => PackageExport {
               code_hash: CodeHash(hex("3a42e66e46dd7633b57d1f921780a1ac715e6b93c19ee52ab714178eb3a9f673")),
               export_name: "lock_fee",
             },
             "lock_contingent_fee" => PackageExport {
               code_hash: CodeHash(hex("3a42e66e46dd7633b57d1f921780a1ac715e6b93c19ee52ab714178eb3a9f673")),
               export_name: "lock_contingent_fee",
             },
             "deposit" => PackageExport {
               code_hash: CodeHash(hex("3a42e66e46dd7633b57d1f921780a1ac715e6b93c19ee52ab714178eb3a9f673")),
               export_name: "deposit",
             },
             "deposit_batch" => PackageExport {
               code_hash: CodeHash(hex("3a42e66e46dd7633b57d1f921780a1ac715e6b93c19ee52ab714178eb3a9f673")),
               export_name: "deposit_batch",
             },
             "withdraw" => PackageExport {
               code_hash: CodeHash(hex("3a42e66e46dd7633b57d1f921780a1ac715e6b93c19ee52ab714178eb3a9f673")),
               export_name: "withdraw",
             },
             "withdraw_non_fungibles" => PackageExport {
               code_hash: CodeHash(hex("3a42e66e46dd7633b57d1f921780a1ac715e6b93c19ee52ab714178eb3a9f673")),
               export_name: "withdraw_non_fungibles",
             },
             "burn" => PackageExport {
               code_hash: CodeHash(hex("3a42e66e46dd7633b57d1f921780a1ac715e6b93c19ee52ab714178eb3a9f673")),
               export_name: "burn",
             },
             "burn_non_fungibles" => PackageExport {
               code_hash: CodeHash(hex("3a42e66e46dd7633b57d1f921780a1ac715e6b93c19ee52ab714178eb3a9f673")),
               export_name: "burn_non_fungibles",
             },
             "lock_fee_and_withdraw" => PackageExport {
               code_hash: CodeHash(hex("3a42e66e46dd7633b57d1f921780a1ac715e6b93c19ee52ab714178eb3a9f673")),
               export_name: "lock_fee_and_withdraw",
             },
             "lock_fee_and_withdraw_non_fungibles" => PackageExport {
               code_hash: CodeHash(hex("3a42e66e46dd7633b57d1f921780a1ac715e6b93c19ee52ab714178eb3a9f673")),
               export_name: "lock_fee_and_withdraw_non_fungibles",
             },
             "create_proof_of_amount" => PackageExport {
               code_hash: CodeHash(hex("3a42e66e46dd7633b57d1f921780a1ac715e6b93c19ee52ab714178eb3a9f673")),
               export_name: "create_proof_of_amount",
             },
             "create_proof_of_non_fungibles" => PackageExport {
               code_hash: CodeHash(hex("3a42e66e46dd7633b57d1f921780a1ac715e6b93c19ee52ab714178eb3a9f673")),
               export_name: "create_proof_of_non_fungibles",
             },
             "set_default_deposit_rule" => PackageExport {
               code_hash: CodeHash(hex("3a42e66e46dd7633b57d1f921780a1ac715e6b93c19ee52ab714178eb3a9f673")),
               export_name: "set_default_deposit_rule",
             },
             "set_resource_preference" => PackageExport {
               code_hash: CodeHash(hex("3a42e66e46dd7633b57d1f921780a1ac715e6b93c19ee52ab714178eb3a9f673")),
               export_name: "set_resource_preference",
             },
             "remove_resource_preference" => PackageExport {
               code_hash: CodeHash(hex("3a42e66e46dd7633b57d1f921780a1ac715e6b93c19ee52ab714178eb3a9f673")),
               export_name: "remove_resource_preference",
             },
             "try_deposit_or_refund" => PackageExport {
               code_hash: CodeHash(hex("3a42e66e46dd7633b57d1f921780a1ac715e6b93c19ee52ab714178eb3a9f673")),
               export_name: "try_deposit_or_refund",
             },
             "try_deposit_batch_or_refund" => PackageExport {
               code_hash: CodeHash(hex("3a42e66e46dd7633b57d1f921780a1ac715e6b93c19ee52ab714178eb3a9f673")),
               export_name: "try_deposit_batch_or_refund",
             },
             "try_deposit_or_abort" => PackageExport {
               code_hash: CodeHash(hex("3a42e66e46dd7633b57d1f921780a1ac715e6b93c19ee52ab714178eb3a9f673")),
               export_name: "try_deposit_or_abort",
             },
             "try_deposit_batch_or_abort" => PackageExport {
               code_hash: CodeHash(hex("3a42e66e46dd7633b57d1f921780a1ac715e6b93c19ee52ab714178eb3a9f673")),
               export_name: "try_deposit_batch_or_abort",
             },
             "add_authorized_depositor" => PackageExport {
               code_hash: CodeHash(hex("3a42e66e46dd7633b57d1f921780a1ac715e6b93c19ee52ab714178eb3a9f673")),
               export_name: "add_authorized_depositor",
             },
             "remove_authorized_depositor" => PackageExport {
               code_hash: CodeHash(hex("3a42e66e46dd7633b57d1f921780a1ac715e6b93c19ee52ab714178eb3a9f673")),
               export_name: "remove_authorized_depositor",
             },
           },
           hook_exports: {
             BlueprintHook::OnVirtualize => PackageExport {
               code_hash: CodeHash(hex("3a42e66e46dd7633b57d1f921780a1ac715e6b93c19ee52ab714178eb3a9f673")),
               export_name: "on_virtualize",
             },
           },
         },
       )
  ├─ Partition(66): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "Account", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDependenciesEntryPayload::V1(
         BlueprintDependencies([
           GlobalAddress(Reference("resource_sim1nfxxxxxxxxxxsecpsgxxxxxxxxx004638826440xxxxxxxxxwj8qq5")),
           GlobalAddress(Reference("resource_sim1nfxxxxxxxxxxed25sgxxxxxxxxx002236757237xxxxxxxxx8x44q5")),
           GlobalAddress(Reference("resource_sim1nfxxxxxxxxxxaccwnrxxxxxxxxx006664022062xxxxxxxxxrn80rl")),
           GlobalAddress(Reference("resource_sim1nfxxxxxxxxxxpkcllrxxxxxxxxx003652646977xxxxxxxxxla870l")),
         ]),
       )
  ├─ Partition(67): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "Account", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionRoyaltyConfigEntryPayload::V1(
         PackageRoyaltyConfig::Disabled,
       )
  ├─ Partition(68): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "Account", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionAuthConfigEntryPayload::V1(
         AuthConfig {
           function_auth: FunctionAuth::AllowAll,
           method_auth: MethodAuthTemplate::StaticRoleDefinition(
             StaticRoleDefinition {
               roles: RoleSpecification::Normal(
                 {
                   RoleKey("securify") => RoleList([
                     RoleKey("_self_"),
                   ]),
                 },
               ),
               methods: {
                 MethodKey("securify") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("securify"),
                   ]),
                 ),
                 MethodKey("set_default_deposit_rule") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("_owner_"),
                   ]),
                 ),
                 MethodKey("set_resource_preference") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("_owner_"),
                   ]),
                 ),
                 MethodKey("remove_resource_preference") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("_owner_"),
                   ]),
                 ),
                 MethodKey("withdraw") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("_owner_"),
                   ]),
                 ),
                 MethodKey("withdraw_non_fungibles") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("_owner_"),
                   ]),
                 ),
                 MethodKey("lock_fee") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("_owner_"),
                   ]),
                 ),
                 MethodKey("lock_contingent_fee") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("_owner_"),
                   ]),
                 ),
                 MethodKey("lock_fee_and_withdraw") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("_owner_"),
                   ]),
                 ),
                 MethodKey("lock_fee_and_withdraw_non_fungibles") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("_owner_"),
                   ]),
                 ),
                 MethodKey("create_proof_of_amount") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("_owner_"),
                   ]),
                 ),
                 MethodKey("create_proof_of_non_fungibles") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("_owner_"),
                   ]),
                 ),
                 MethodKey("deposit") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("_owner_"),
                   ]),
                 ),
                 MethodKey("deposit_batch") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("_owner_"),
                   ]),
                 ),
                 MethodKey("burn") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("_owner_"),
                   ]),
                 ),
                 MethodKey("burn_non_fungibles") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("_owner_"),
                   ]),
                 ),
                 MethodKey("add_authorized_depositor") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("_owner_"),
                   ]),
                 ),
                 MethodKey("remove_authorized_depositor") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("_owner_"),
                   ]),
                 ),
                 MethodKey("try_deposit_or_refund") => MethodAccessibility::Public,
                 MethodKey("try_deposit_batch_or_refund") => MethodAccessibility::Public,
                 MethodKey("try_deposit_or_abort") => MethodAccessibility::Public,
                 MethodKey("try_deposit_batch_or_abort") => MethodAccessibility::Public,
               },
             },
           ),
         },
       )
  ├─ Partition(69): 1 change
    └─ Set: CodeHash(hex("3a42e66e46dd7633b57d1f921780a1ac715e6b93c19ee52ab714178eb3a9f673"))
       Value: LOCKED PackageCodeVmTypeEntryPayload::V1(
         PackageCodeVmTypeV1::Native,
       )
  ├─ Partition(70): 1 change
    └─ Set: CodeHash(hex("3a42e66e46dd7633b57d1f921780a1ac715e6b93c19ee52ab714178eb3a9f673"))
       Value: LOCKED PackageCodeOriginalCodeEntryPayload::V1(
         PackageCodeOriginalCodeV1(hex("0000000000000005")),
       )
  └─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxpackgexxxxxxxxx000726633226xxxxxxxxxlk8hc9")),
               blueprint_name: "Package",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::None,
             features: [
               "package_royalty",
             ],
             generic_substitutions: [],
           },
           object_type: ObjectType::Global {
             modules: {
               AttachedModuleId::Metadata => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
               AttachedModuleId::RoleAssignment => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
             },
           },
         },
       )
├─ package_sim1pkgxxxxxxxxxcntrlrxxxxxxxxx000648572295xxxxxxxxxxc5z0l across 11 partitions
  ├─ Partition(1): 1 change
    └─ Set: SchemaHash(c61b810003e18a1a58b178ea08bd01015ee0f31183934c638f882d35013ecaeb)
       Value: KeyValueEntrySubstate::V1(
         KeyValueEntrySubstateV1 {
           value: Option::Some(
             PackageSchemaEntryPayload::V1(
               SchemaV1 {
                 type_kinds: [
                   TypeKind::Enum {
                     variants: {
                       0u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           1u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(167u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         2u64,
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(133u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         3u64,
                       ),
                     ],
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(9u8),
                         ),
                       ],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         4u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         5u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         8u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         9u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         11u64,
                       ),
                     ],
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [],
                     },
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           6u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         7u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         2u64,
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(224u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(224u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(224u8),
                       ),
                     ],
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [],
                     },
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           10u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           6u64,
                         ),
                       ],
                       1u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           6u64,
                         ),
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(196u8),
                         ),
                       ],
                     },
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(161u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         7u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         2u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         13u64,
                       ),
                     ],
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(171u8),
                         ),
                       ],
                     },
                   },
                   TypeKind::Custom(
                     ScryptoCustomTypeKind::Reference,
                   ),
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         7u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         2u64,
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         7u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         2u64,
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         7u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         2u64,
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         7u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         2u64,
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         7u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         2u64,
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         7u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         2u64,
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         33u64,
                       ),
                     ],
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(194u8),
                     ),
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         35u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         6u64,
                       ),
                     ],
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         35u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         6u64,
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         35u64,
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         35u64,
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         35u64,
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         35u64,
                       ),
                     ],
                   },
                 ],
                 type_metadata: [
                   TypeMetadata {
                     type_name: Option::Some(
                       "AccessControllerStateFieldPayload",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "V1",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AccessControllerSubstate",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "controlled_asset",
                           "timed_recovery_delay_in_minutes",
                           "recovery_badge",
                           "state",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "Option",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "None",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Some",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "PrimaryRoleLockingState",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Unlocked",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Locked",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "PrimaryRoleRecoveryAttemptState",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "NoRecoveryAttempt",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "RecoveryAttempt",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "RecoveryProposal",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "rule_set",
                           "timed_recovery_delay_in_minutes",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "RuleSet",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "primary_role",
                           "recovery_role",
                           "confirmation_role",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "PrimaryRoleBadgeWithdrawAttemptState",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "NoBadgeWithdrawAttempt",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "BadgeWithdrawAttempt",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "RecoveryRoleRecoveryAttemptState",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "NoRecoveryAttempt",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "RecoveryAttempt",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "RecoveryRoleRecoveryState",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "UntimedRecovery",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "TimedRecovery",
                             ),
                             child_names: Option::Some(
                               ChildNames::NamedFields(
                                 [
                                   "proposal",
                                   "timed_recovery_allowed_after",
                                 ],
                               ),
                             ),
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "RecoveryRoleBadgeWithdrawAttemptState",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "NoBadgeWithdrawAttempt",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "BadgeWithdrawAttempt",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AccessControllerCreateInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "controlled_asset",
                           "rule_set",
                           "timed_recovery_delay_in_minutes",
                           "address_reservation",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "Option",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "None",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Some",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "GlobalAccessController",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AccessControllerCreateProofInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AccessControllerInitiateRecoveryAsPrimaryInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "rule_set",
                           "timed_recovery_delay_in_minutes",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AccessControllerInitiateRecoveryAsRecoveryInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "rule_set",
                           "timed_recovery_delay_in_minutes",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AccessControllerQuickConfirmPrimaryRoleRecoveryProposalInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "rule_set",
                           "timed_recovery_delay_in_minutes",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AccessControllerQuickConfirmRecoveryRoleRecoveryProposalInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "rule_set",
                           "timed_recovery_delay_in_minutes",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AccessControllerTimedConfirmRecoveryInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "rule_set",
                           "timed_recovery_delay_in_minutes",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AccessControllerCancelPrimaryRoleRecoveryProposalInput",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AccessControllerCancelRecoveryRoleRecoveryProposalInput",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AccessControllerLockPrimaryRoleInput",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AccessControllerUnlockPrimaryRoleInput",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AccessControllerStopTimedRecoveryInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "rule_set",
                           "timed_recovery_delay_in_minutes",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryInput",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryInput",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AccessControllerQuickConfirmPrimaryRoleBadgeWithdrawAttemptInput",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AccessControllerQuickConfirmRecoveryRoleBadgeWithdrawAttemptInput",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptInput",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptInput",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AccessControllerMintRecoveryBadgesInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "non_fungible_local_ids",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "InitiateRecoveryEvent",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "proposer",
                           "proposal",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "Proposer",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Primary",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Recovery",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "RuleSetUpdateEvent",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "proposer",
                           "proposal",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "CancelRecoveryProposalEvent",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "proposer",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "LockPrimaryRoleEvent",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "UnlockPrimaryRoleEvent",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "StopTimedRecoveryEvent",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "InitiateBadgeWithdrawAttemptEvent",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "proposer",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "BadgeWithdrawEvent",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "proposer",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "CancelBadgeWithdrawAttemptEvent",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "proposer",
                         ],
                       ),
                     ),
                   },
                 ],
                 type_validations: [
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::Custom(
                     ScryptoCustomTypeValidation::Reference(
                       ReferenceValidation::IsGlobalTyped(
                         Option::Some(
                           PackageAddress(Reference("package_sim1pkgxxxxxxxxxcntrlrxxxxxxxxx000648572295xxxxxxxxxxc5z0l")),
                         ),
                         "AccessController",
                       ),
                     ),
                   ),
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                 ],
               },
             ),
           ),
           lock_status: LockStatus::Locked,
         },
       )
  ├─ Partition(2): 2 changes
    ├─ Set: "name"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "Access Controller Package",
         ),
       )
    └─ Set: "description"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "A native package that defines the logic of access controller components.",
         ),
       )
  ├─ Partition(5): 1 change
    └─ Set: Field(0)
       Value: LOCKED RoleAssignmentOwnerFieldPayload::V1(
         OwnerRoleSubstate {
           rule: AccessRule::DenyAll,
           updater: OwnerRoleUpdater::None,
         },
       )
  ├─ Partition(64): 1 change
    └─ Set: Field(0)
       Value: LOCKED PackageRoyaltyAccumulatorFieldPayload::V1(
         PackageRoyaltyAccumulatorV1 {
           royalty_vault: Vault(Own("internal_vault_sim1trr3vxuy5m4jz0df323tlsvkfmsv6glss2k7uvj794tyg8e8x7t2pc")),
         },
       )
  ├─ Partition(65): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "AccessController", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDefinitionEntryPayload::V1(
         BlueprintDefinition {
           interface: BlueprintInterface {
             blueprint_type: BlueprintType::Outer,
             is_transient: false,
             generics: [],
             feature_set: [],
             state: IndexedStateSchema {
               fields: Option::Some(
                 Tuple(
                   PartitionDescription::Logical(
                     PartitionOffset(
                       0u8,
                     ),
                   ),
                   [
                     FieldSchema {
                       field: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("c61b810003e18a1a58b178ea08bd01015ee0f31183934c638f882d35013ecaeb")),
                           LocalTypeId::SchemaLocalIndex(
                             0u64,
                           ),
                         ),
                       ),
                       condition: Condition::Always,
                       transience: FieldTransience::NotTransient,
                     },
                   ],
                 ),
               ),
               collections: [],
               num_logical_partitions: 1u8,
             },
             functions: {
               "create" => FunctionSchema {
                 receiver: Option::None,
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("c61b810003e18a1a58b178ea08bd01015ee0f31183934c638f882d35013ecaeb")),
                     LocalTypeId::SchemaLocalIndex(
                       12u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("c61b810003e18a1a58b178ea08bd01015ee0f31183934c638f882d35013ecaeb")),
                     LocalTypeId::SchemaLocalIndex(
                       14u64,
                     ),
                   ),
                 ),
               },
               "create_proof" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("c61b810003e18a1a58b178ea08bd01015ee0f31183934c638f882d35013ecaeb")),
                     LocalTypeId::SchemaLocalIndex(
                       15u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("c61b810003e18a1a58b178ea08bd01015ee0f31183934c638f882d35013ecaeb")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(164u8),
                     ),
                   ),
                 ),
               },
               "initiate_recovery_as_primary" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("c61b810003e18a1a58b178ea08bd01015ee0f31183934c638f882d35013ecaeb")),
                     LocalTypeId::SchemaLocalIndex(
                       16u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("c61b810003e18a1a58b178ea08bd01015ee0f31183934c638f882d35013ecaeb")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "initiate_recovery_as_recovery" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("c61b810003e18a1a58b178ea08bd01015ee0f31183934c638f882d35013ecaeb")),
                     LocalTypeId::SchemaLocalIndex(
                       17u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("c61b810003e18a1a58b178ea08bd01015ee0f31183934c638f882d35013ecaeb")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "quick_confirm_primary_role_recovery_proposal" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("c61b810003e18a1a58b178ea08bd01015ee0f31183934c638f882d35013ecaeb")),
                     LocalTypeId::SchemaLocalIndex(
                       18u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("c61b810003e18a1a58b178ea08bd01015ee0f31183934c638f882d35013ecaeb")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "quick_confirm_recovery_role_recovery_proposal" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("c61b810003e18a1a58b178ea08bd01015ee0f31183934c638f882d35013ecaeb")),
                     LocalTypeId::SchemaLocalIndex(
                       19u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("c61b810003e18a1a58b178ea08bd01015ee0f31183934c638f882d35013ecaeb")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "timed_confirm_recovery" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("c61b810003e18a1a58b178ea08bd01015ee0f31183934c638f882d35013ecaeb")),
                     LocalTypeId::SchemaLocalIndex(
                       20u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("c61b810003e18a1a58b178ea08bd01015ee0f31183934c638f882d35013ecaeb")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "cancel_primary_role_recovery_proposal" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("c61b810003e18a1a58b178ea08bd01015ee0f31183934c638f882d35013ecaeb")),
                     LocalTypeId::SchemaLocalIndex(
                       21u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("c61b810003e18a1a58b178ea08bd01015ee0f31183934c638f882d35013ecaeb")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "cancel_recovery_role_recovery_proposal" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("c61b810003e18a1a58b178ea08bd01015ee0f31183934c638f882d35013ecaeb")),
                     LocalTypeId::SchemaLocalIndex(
                       22u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("c61b810003e18a1a58b178ea08bd01015ee0f31183934c638f882d35013ecaeb")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "lock_primary_role" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("c61b810003e18a1a58b178ea08bd01015ee0f31183934c638f882d35013ecaeb")),
                     LocalTypeId::SchemaLocalIndex(
                       23u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("c61b810003e18a1a58b178ea08bd01015ee0f31183934c638f882d35013ecaeb")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "unlock_primary_role" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("c61b810003e18a1a58b178ea08bd01015ee0f31183934c638f882d35013ecaeb")),
                     LocalTypeId::SchemaLocalIndex(
                       24u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("c61b810003e18a1a58b178ea08bd01015ee0f31183934c638f882d35013ecaeb")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "stop_timed_recovery" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("c61b810003e18a1a58b178ea08bd01015ee0f31183934c638f882d35013ecaeb")),
                     LocalTypeId::SchemaLocalIndex(
                       25u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("c61b810003e18a1a58b178ea08bd01015ee0f31183934c638f882d35013ecaeb")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "initiate_badge_withdraw_attempt_as_primary" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("c61b810003e18a1a58b178ea08bd01015ee0f31183934c638f882d35013ecaeb")),
                     LocalTypeId::SchemaLocalIndex(
                       26u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("c61b810003e18a1a58b178ea08bd01015ee0f31183934c638f882d35013ecaeb")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "initiate_badge_withdraw_attempt_as_recovery" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("c61b810003e18a1a58b178ea08bd01015ee0f31183934c638f882d35013ecaeb")),
                     LocalTypeId::SchemaLocalIndex(
                       27u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("c61b810003e18a1a58b178ea08bd01015ee0f31183934c638f882d35013ecaeb")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "quick_confirm_primary_role_badge_withdraw_attempt" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("c61b810003e18a1a58b178ea08bd01015ee0f31183934c638f882d35013ecaeb")),
                     LocalTypeId::SchemaLocalIndex(
                       28u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("c61b810003e18a1a58b178ea08bd01015ee0f31183934c638f882d35013ecaeb")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(161u8),
                     ),
                   ),
                 ),
               },
               "quick_confirm_recovery_role_badge_withdraw_attempt" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("c61b810003e18a1a58b178ea08bd01015ee0f31183934c638f882d35013ecaeb")),
                     LocalTypeId::SchemaLocalIndex(
                       29u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("c61b810003e18a1a58b178ea08bd01015ee0f31183934c638f882d35013ecaeb")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(161u8),
                     ),
                   ),
                 ),
               },
               "cancel_primary_role_badge_withdraw_attempt" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("c61b810003e18a1a58b178ea08bd01015ee0f31183934c638f882d35013ecaeb")),
                     LocalTypeId::SchemaLocalIndex(
                       30u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("c61b810003e18a1a58b178ea08bd01015ee0f31183934c638f882d35013ecaeb")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "cancel_recovery_role_badge_withdraw_attempt" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("c61b810003e18a1a58b178ea08bd01015ee0f31183934c638f882d35013ecaeb")),
                     LocalTypeId::SchemaLocalIndex(
                       31u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("c61b810003e18a1a58b178ea08bd01015ee0f31183934c638f882d35013ecaeb")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "mint_recovery_badges" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("c61b810003e18a1a58b178ea08bd01015ee0f31183934c638f882d35013ecaeb")),
                     LocalTypeId::SchemaLocalIndex(
                       32u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("c61b810003e18a1a58b178ea08bd01015ee0f31183934c638f882d35013ecaeb")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(161u8),
                     ),
                   ),
                 ),
               },
             },
             events: {
               "InitiateRecoveryEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("c61b810003e18a1a58b178ea08bd01015ee0f31183934c638f882d35013ecaeb")),
                   LocalTypeId::SchemaLocalIndex(
                     34u64,
                   ),
                 ),
               ),
               "RuleSetUpdateEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("c61b810003e18a1a58b178ea08bd01015ee0f31183934c638f882d35013ecaeb")),
                   LocalTypeId::SchemaLocalIndex(
                     36u64,
                   ),
                 ),
               ),
               "CancelRecoveryProposalEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("c61b810003e18a1a58b178ea08bd01015ee0f31183934c638f882d35013ecaeb")),
                   LocalTypeId::SchemaLocalIndex(
                     37u64,
                   ),
                 ),
               ),
               "LockPrimaryRoleEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("c61b810003e18a1a58b178ea08bd01015ee0f31183934c638f882d35013ecaeb")),
                   LocalTypeId::SchemaLocalIndex(
                     38u64,
                   ),
                 ),
               ),
               "UnlockPrimaryRoleEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("c61b810003e18a1a58b178ea08bd01015ee0f31183934c638f882d35013ecaeb")),
                   LocalTypeId::SchemaLocalIndex(
                     39u64,
                   ),
                 ),
               ),
               "StopTimedRecoveryEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("c61b810003e18a1a58b178ea08bd01015ee0f31183934c638f882d35013ecaeb")),
                   LocalTypeId::SchemaLocalIndex(
                     40u64,
                   ),
                 ),
               ),
               "InitiateBadgeWithdrawAttemptEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("c61b810003e18a1a58b178ea08bd01015ee0f31183934c638f882d35013ecaeb")),
                   LocalTypeId::SchemaLocalIndex(
                     41u64,
                   ),
                 ),
               ),
               "BadgeWithdrawEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("c61b810003e18a1a58b178ea08bd01015ee0f31183934c638f882d35013ecaeb")),
                   LocalTypeId::SchemaLocalIndex(
                     42u64,
                   ),
                 ),
               ),
               "CancelBadgeWithdrawAttemptEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("c61b810003e18a1a58b178ea08bd01015ee0f31183934c638f882d35013ecaeb")),
                   LocalTypeId::SchemaLocalIndex(
                     43u64,
                   ),
                 ),
               ),
             },
             types: {},
           },
           function_exports: {
             "create" => PackageExport {
               code_hash: CodeHash(hex("8e3fff91d87f0b078794596423d2a6b2e5722c28b0a1af5119ac55328d539a9e")),
               export_name: "create",
             },
             "create_proof" => PackageExport {
               code_hash: CodeHash(hex("8e3fff91d87f0b078794596423d2a6b2e5722c28b0a1af5119ac55328d539a9e")),
               export_name: "create_proof",
             },
             "initiate_recovery_as_primary" => PackageExport {
               code_hash: CodeHash(hex("8e3fff91d87f0b078794596423d2a6b2e5722c28b0a1af5119ac55328d539a9e")),
               export_name: "initiate_recovery_as_primary",
             },
             "initiate_recovery_as_recovery" => PackageExport {
               code_hash: CodeHash(hex("8e3fff91d87f0b078794596423d2a6b2e5722c28b0a1af5119ac55328d539a9e")),
               export_name: "initiate_recovery_as_recovery",
             },
             "quick_confirm_primary_role_recovery_proposal" => PackageExport {
               code_hash: CodeHash(hex("8e3fff91d87f0b078794596423d2a6b2e5722c28b0a1af5119ac55328d539a9e")),
               export_name: "quick_confirm_primary_role_recovery_proposal",
             },
             "quick_confirm_recovery_role_recovery_proposal" => PackageExport {
               code_hash: CodeHash(hex("8e3fff91d87f0b078794596423d2a6b2e5722c28b0a1af5119ac55328d539a9e")),
               export_name: "quick_confirm_recovery_role_recovery_proposal",
             },
             "timed_confirm_recovery" => PackageExport {
               code_hash: CodeHash(hex("8e3fff91d87f0b078794596423d2a6b2e5722c28b0a1af5119ac55328d539a9e")),
               export_name: "timed_confirm_recovery",
             },
             "cancel_primary_role_recovery_proposal" => PackageExport {
               code_hash: CodeHash(hex("8e3fff91d87f0b078794596423d2a6b2e5722c28b0a1af5119ac55328d539a9e")),
               export_name: "cancel_primary_role_recovery_proposal",
             },
             "cancel_recovery_role_recovery_proposal" => PackageExport {
               code_hash: CodeHash(hex("8e3fff91d87f0b078794596423d2a6b2e5722c28b0a1af5119ac55328d539a9e")),
               export_name: "cancel_recovery_role_recovery_proposal",
             },
             "lock_primary_role" => PackageExport {
               code_hash: CodeHash(hex("8e3fff91d87f0b078794596423d2a6b2e5722c28b0a1af5119ac55328d539a9e")),
               export_name: "lock_primary_role",
             },
             "unlock_primary_role" => PackageExport {
               code_hash: CodeHash(hex("8e3fff91d87f0b078794596423d2a6b2e5722c28b0a1af5119ac55328d539a9e")),
               export_name: "unlock_primary_role",
             },
             "stop_timed_recovery" => PackageExport {
               code_hash: CodeHash(hex("8e3fff91d87f0b078794596423d2a6b2e5722c28b0a1af5119ac55328d539a9e")),
               export_name: "stop_timed_recovery",
             },
             "initiate_badge_withdraw_attempt_as_primary" => PackageExport {
               code_hash: CodeHash(hex("8e3fff91d87f0b078794596423d2a6b2e5722c28b0a1af5119ac55328d539a9e")),
               export_name: "initiate_badge_withdraw_attempt_as_primary",
             },
             "initiate_badge_withdraw_attempt_as_recovery" => PackageExport {
               code_hash: CodeHash(hex("8e3fff91d87f0b078794596423d2a6b2e5722c28b0a1af5119ac55328d539a9e")),
               export_name: "initiate_badge_withdraw_attempt_as_recovery",
             },
             "quick_confirm_primary_role_badge_withdraw_attempt" => PackageExport {
               code_hash: CodeHash(hex("8e3fff91d87f0b078794596423d2a6b2e5722c28b0a1af5119ac55328d539a9e")),
               export_name: "quick_confirm_primary_role_badge_withdraw_attempt",
             },
             "quick_confirm_recovery_role_badge_withdraw_attempt" => PackageExport {
               code_hash: CodeHash(hex("8e3fff91d87f0b078794596423d2a6b2e5722c28b0a1af5119ac55328d539a9e")),
               export_name: "quick_confirm_recovery_role_badge_withdraw_attempt",
             },
             "cancel_primary_role_badge_withdraw_attempt" => PackageExport {
               code_hash: CodeHash(hex("8e3fff91d87f0b078794596423d2a6b2e5722c28b0a1af5119ac55328d539a9e")),
               export_name: "cancel_primary_role_badge_withdraw_attempt",
             },
             "cancel_recovery_role_badge_withdraw_attempt" => PackageExport {
               code_hash: CodeHash(hex("8e3fff91d87f0b078794596423d2a6b2e5722c28b0a1af5119ac55328d539a9e")),
               export_name: "cancel_recovery_role_badge_withdraw_attempt",
             },
             "mint_recovery_badges" => PackageExport {
               code_hash: CodeHash(hex("8e3fff91d87f0b078794596423d2a6b2e5722c28b0a1af5119ac55328d539a9e")),
               export_name: "mint_recovery_badges",
             },
           },
           hook_exports: {},
         },
       )
  ├─ Partition(66): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "AccessController", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDependenciesEntryPayload::V1(
         BlueprintDependencies([
           GlobalAddress(Reference("resource_sim1nfxxxxxxxxxxpkcllrxxxxxxxxx003652646977xxxxxxxxxla870l")),
         ]),
       )
  ├─ Partition(67): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "AccessController", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionRoyaltyConfigEntryPayload::V1(
         PackageRoyaltyConfig::Disabled,
       )
  ├─ Partition(68): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "AccessController", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionAuthConfigEntryPayload::V1(
         AuthConfig {
           function_auth: FunctionAuth::AllowAll,
           method_auth: MethodAuthTemplate::StaticRoleDefinition(
             StaticRoleDefinition {
               roles: RoleSpecification::Normal(
                 {
                   RoleKey("primary") => RoleList([
                     RoleKey("_self_"),
                   ]),
                   RoleKey("recovery") => RoleList([
                     RoleKey("_self_"),
                   ]),
                   RoleKey("confirmation") => RoleList([
                     RoleKey("_self_"),
                   ]),
                 },
               ),
               methods: {
                 MethodKey("timed_confirm_recovery") => MethodAccessibility::Public,
                 MethodKey("create_proof") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("primary"),
                   ]),
                 ),
                 MethodKey("initiate_recovery_as_primary") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("primary"),
                   ]),
                 ),
                 MethodKey("cancel_primary_role_recovery_proposal") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("primary"),
                   ]),
                 ),
                 MethodKey("initiate_badge_withdraw_attempt_as_primary") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("primary"),
                   ]),
                 ),
                 MethodKey("cancel_primary_role_badge_withdraw_attempt") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("primary"),
                   ]),
                 ),
                 MethodKey("initiate_recovery_as_recovery") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("recovery"),
                   ]),
                 ),
                 MethodKey("cancel_recovery_role_recovery_proposal") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("recovery"),
                   ]),
                 ),
                 MethodKey("initiate_badge_withdraw_attempt_as_recovery") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("recovery"),
                   ]),
                 ),
                 MethodKey("cancel_recovery_role_badge_withdraw_attempt") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("recovery"),
                   ]),
                 ),
                 MethodKey("lock_primary_role") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("recovery"),
                   ]),
                 ),
                 MethodKey("unlock_primary_role") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("recovery"),
                   ]),
                 ),
                 MethodKey("quick_confirm_primary_role_recovery_proposal") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("recovery"),
                     RoleKey("confirmation"),
                   ]),
                 ),
                 MethodKey("quick_confirm_primary_role_badge_withdraw_attempt") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("recovery"),
                     RoleKey("confirmation"),
                   ]),
                 ),
                 MethodKey("quick_confirm_recovery_role_recovery_proposal") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("primary"),
                     RoleKey("confirmation"),
                   ]),
                 ),
                 MethodKey("quick_confirm_recovery_role_badge_withdraw_attempt") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("primary"),
                     RoleKey("confirmation"),
                   ]),
                 ),
                 MethodKey("mint_recovery_badges") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("primary"),
                     RoleKey("recovery"),
                   ]),
                 ),
                 MethodKey("stop_timed_recovery") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("primary"),
                     RoleKey("confirmation"),
                     RoleKey("recovery"),
                   ]),
                 ),
               },
             },
           ),
         },
       )
  ├─ Partition(69): 1 change
    └─ Set: CodeHash(hex("8e3fff91d87f0b078794596423d2a6b2e5722c28b0a1af5119ac55328d539a9e"))
       Value: LOCKED PackageCodeVmTypeEntryPayload::V1(
         PackageCodeVmTypeV1::Native,
       )
  ├─ Partition(70): 1 change
    └─ Set: CodeHash(hex("8e3fff91d87f0b078794596423d2a6b2e5722c28b0a1af5119ac55328d539a9e"))
       Value: LOCKED PackageCodeOriginalCodeEntryPayload::V1(
         PackageCodeOriginalCodeV1(hex("0000000000000006")),
       )
  └─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxpackgexxxxxxxxx000726633226xxxxxxxxxlk8hc9")),
               blueprint_name: "Package",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::None,
             features: [
               "package_royalty",
             ],
             generic_substitutions: [],
           },
           object_type: ObjectType::Global {
             modules: {
               AttachedModuleId::Metadata => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
               AttachedModuleId::RoleAssignment => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
             },
           },
         },
       )
├─ package_sim1pkgxxxxxxxxxplxxxxxxxxxxxxx020379220524xxxxxxxxxl5e8k6 across 11 partitions
  ├─ Partition(1): 3 changes
    ├─ Set: SchemaHash(0b4ae514b741b2ab034b937f1075da64cbe9ce8b9cd7ff1494fdc14d56cc5433)
       Value: KeyValueEntrySubstate::V1(
         KeyValueEntrySubstateV1 {
           value: Option::Some(
             PackageSchemaEntryPayload::V1(
               SchemaV1 {
                 type_kinds: [
                   TypeKind::Enum {
                     variants: {
                       0u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           1u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         2u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         4u64,
                       ),
                     ],
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::SchemaLocalIndex(
                       3u64,
                     ),
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(133u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(167u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(133u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(230u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(224u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         6u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         7u64,
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(133u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(133u8),
                       ),
                     ],
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(171u8),
                         ),
                       ],
                     },
                   },
                   TypeKind::Custom(
                     ScryptoCustomTypeKind::Reference,
                   ),
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         10u64,
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(161u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(161u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(161u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         12u64,
                       ),
                     ],
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(161u8),
                         ),
                       ],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(161u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(161u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(133u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         16u64,
                       ),
                     ],
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           17u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [],
                       2u8 => [],
                       3u8 => [],
                       4u8 => [],
                       5u8 => [],
                       6u8 => [],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                   TypeKind::Map {
                     key_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(133u8),
                     ),
                     value_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(192u8),
                     ),
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         19u64,
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         19u64,
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(133u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(133u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                 ],
                 type_metadata: [
                   TypeMetadata {
                     type_name: Option::Some(
                       "TwoResourcePoolStateFieldPayload",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "V1",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "TwoResourcePoolSubstate",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "vaults",
                           "pool_unit_resource_manager",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ResourceManager",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "TwoResourcePoolInstantiateInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "owner_role",
                           "pool_manager_rule",
                           "resource_addresses",
                           "address_reservation",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "Option",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "None",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Some",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "GlobalTwoResourcePool",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "TwoResourcePoolContributeInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "buckets",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "Option",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "None",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Some",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "TwoResourcePoolRedeemInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "bucket",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "TwoResourcePoolProtectedDepositInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "bucket",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "TwoResourcePoolProtectedWithdrawInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "resource_address",
                           "amount",
                           "withdraw_strategy",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "WithdrawStrategy",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Exact",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Rounded",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "RoundingMode",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "ToPositiveInfinity",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "ToNegativeInfinity",
                             ),
                             child_names: Option::None,
                           },
                           2u8 => TypeMetadata {
                             type_name: Option::Some(
                               "ToZero",
                             ),
                             child_names: Option::None,
                           },
                           3u8 => TypeMetadata {
                             type_name: Option::Some(
                               "AwayFromZero",
                             ),
                             child_names: Option::None,
                           },
                           4u8 => TypeMetadata {
                             type_name: Option::Some(
                               "ToNearestMidpointTowardZero",
                             ),
                             child_names: Option::None,
                           },
                           5u8 => TypeMetadata {
                             type_name: Option::Some(
                               "ToNearestMidpointAwayFromZero",
                             ),
                             child_names: Option::None,
                           },
                           6u8 => TypeMetadata {
                             type_name: Option::Some(
                               "ToNearestMidpointToEven",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "TwoResourcePoolGetRedemptionValueInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "amount_of_pool_units",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "TwoResourcePoolGetVaultAmountsInput",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ContributionEvent",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "contributed_resources",
                           "pool_units_minted",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "RedemptionEvent",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "pool_unit_tokens_redeemed",
                           "redeemed_resources",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "WithdrawEvent",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "resource_address",
                           "amount",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "DepositEvent",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "resource_address",
                           "amount",
                         ],
                       ),
                     ),
                   },
                 ],
                 type_validations: [
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::Array(
                     LengthValidation {
                       min: Option::Some(
                         2u32,
                       ),
                       max: Option::Some(
                         2u32,
                       ),
                     },
                   ),
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::Custom(
                     ScryptoCustomTypeValidation::Reference(
                       ReferenceValidation::IsGlobalTyped(
                         Option::Some(
                           PackageAddress(Reference("package_sim1pkgxxxxxxxxxplxxxxxxxxxxxxx020379220524xxxxxxxxxl5e8k6")),
                         ),
                         "TwoResourcePool",
                       ),
                     ),
                   ),
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                 ],
               },
             ),
           ),
           lock_status: LockStatus::Locked,
         },
       )
    ├─ Set: SchemaHash(380fc684007aad778eef82a06849c2726576265d631b59f1ffe18935953813f5)
       Value: KeyValueEntrySubstate::V1(
         KeyValueEntrySubstateV1 {
           value: Option::Some(
             PackageSchemaEntryPayload::V1(
               SchemaV1 {
                 type_kinds: [
                   TypeKind::Enum {
                     variants: {
                       0u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           1u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(167u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         2u64,
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(133u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(230u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(224u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(133u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         4u64,
                       ),
                     ],
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(171u8),
                         ),
                       ],
                     },
                   },
                   TypeKind::Custom(
                     ScryptoCustomTypeKind::Reference,
                   ),
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(161u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(161u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(161u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         10u64,
                       ),
                     ],
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           11u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [],
                       2u8 => [],
                       3u8 => [],
                       4u8 => [],
                       5u8 => [],
                       6u8 => [],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                 ],
                 type_metadata: [
                   TypeMetadata {
                     type_name: Option::Some(
                       "OneResourcePoolStateFieldPayload",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "V1",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "OneResourcePoolSubstate",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "vault",
                           "pool_unit_resource_manager",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ResourceManager",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "OneResourcePoolInstantiateInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "owner_role",
                           "pool_manager_rule",
                           "resource_address",
                           "address_reservation",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "Option",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "None",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Some",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "GlobalOneResourcePool",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "OneResourcePoolContributeInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "bucket",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "OneResourcePoolRedeemInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "bucket",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "OneResourcePoolProtectedDepositInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "bucket",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "OneResourcePoolProtectedWithdrawInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "amount",
                           "withdraw_strategy",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "WithdrawStrategy",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Exact",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Rounded",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "RoundingMode",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "ToPositiveInfinity",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "ToNegativeInfinity",
                             ),
                             child_names: Option::None,
                           },
                           2u8 => TypeMetadata {
                             type_name: Option::Some(
                               "ToZero",
                             ),
                             child_names: Option::None,
                           },
                           3u8 => TypeMetadata {
                             type_name: Option::Some(
                               "AwayFromZero",
                             ),
                             child_names: Option::None,
                           },
                           4u8 => TypeMetadata {
                             type_name: Option::Some(
                               "ToNearestMidpointTowardZero",
                             ),
                             child_names: Option::None,
                           },
                           5u8 => TypeMetadata {
                             type_name: Option::Some(
                               "ToNearestMidpointAwayFromZero",
                             ),
                             child_names: Option::None,
                           },
                           6u8 => TypeMetadata {
                             type_name: Option::Some(
                               "ToNearestMidpointToEven",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "OneResourcePoolGetRedemptionValueInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "amount_of_pool_units",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "OneResourcePoolGetVaultAmountInput",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ContributionEvent",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "amount_of_resources_contributed",
                           "pool_units_minted",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "RedemptionEvent",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "pool_unit_tokens_redeemed",
                           "redeemed_amount",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "WithdrawEvent",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "amount",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "DepositEvent",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "amount",
                         ],
                       ),
                     ),
                   },
                 ],
                 type_validations: [
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::Custom(
                     ScryptoCustomTypeValidation::Reference(
                       ReferenceValidation::IsGlobalTyped(
                         Option::Some(
                           PackageAddress(Reference("package_sim1pkgxxxxxxxxxplxxxxxxxxxxxxx020379220524xxxxxxxxxl5e8k6")),
                         ),
                         "OneResourcePool",
                       ),
                     ),
                   ),
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                 ],
               },
             ),
           ),
           lock_status: LockStatus::Locked,
         },
       )
    └─ Set: SchemaHash(bcdc947a46f46b92f6b01006acb22554c7130fa93f894fd471b52b7fcf5ec21d)
       Value: KeyValueEntrySubstate::V1(
         KeyValueEntrySubstateV1 {
           value: Option::Some(
             PackageSchemaEntryPayload::V1(
               SchemaV1 {
                 type_kinds: [
                   TypeKind::Enum {
                     variants: {
                       0u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           1u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         2u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         3u64,
                       ),
                     ],
                   },
                   TypeKind::Map {
                     key_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(133u8),
                     ),
                     value_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(167u8),
                     ),
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(133u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(230u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(224u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         5u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         6u64,
                       ),
                     ],
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(133u8),
                     ),
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(171u8),
                         ),
                       ],
                     },
                   },
                   TypeKind::Custom(
                     ScryptoCustomTypeKind::Reference,
                   ),
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         9u64,
                       ),
                     ],
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(161u8),
                     ),
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(161u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         9u64,
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(161u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(161u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(133u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         14u64,
                       ),
                     ],
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           15u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [],
                       2u8 => [],
                       3u8 => [],
                       4u8 => [],
                       5u8 => [],
                       6u8 => [],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                   TypeKind::Map {
                     key_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(133u8),
                     ),
                     value_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(192u8),
                     ),
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         17u64,
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         17u64,
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(133u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(133u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                 ],
                 type_metadata: [
                   TypeMetadata {
                     type_name: Option::Some(
                       "MultiResourcePoolStateFieldPayload",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "V1",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "MultiResourcePoolSubstate",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "vaults",
                           "pool_unit_resource_manager",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ResourceManager",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "MultiResourcePoolInstantiateInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "owner_role",
                           "pool_manager_rule",
                           "resource_addresses",
                           "address_reservation",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "Option",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "None",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Some",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "GlobalMultiResourcePool",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "MultiResourcePoolContributeInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "buckets",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "MultiResourcePoolRedeemInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "bucket",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "MultiResourcePoolProtectedDepositInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "bucket",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "MultiResourcePoolProtectedWithdrawInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "resource_address",
                           "amount",
                           "withdraw_strategy",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "WithdrawStrategy",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Exact",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Rounded",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "RoundingMode",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "ToPositiveInfinity",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "ToNegativeInfinity",
                             ),
                             child_names: Option::None,
                           },
                           2u8 => TypeMetadata {
                             type_name: Option::Some(
                               "ToZero",
                             ),
                             child_names: Option::None,
                           },
                           3u8 => TypeMetadata {
                             type_name: Option::Some(
                               "AwayFromZero",
                             ),
                             child_names: Option::None,
                           },
                           4u8 => TypeMetadata {
                             type_name: Option::Some(
                               "ToNearestMidpointTowardZero",
                             ),
                             child_names: Option::None,
                           },
                           5u8 => TypeMetadata {
                             type_name: Option::Some(
                               "ToNearestMidpointAwayFromZero",
                             ),
                             child_names: Option::None,
                           },
                           6u8 => TypeMetadata {
                             type_name: Option::Some(
                               "ToNearestMidpointToEven",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "MultiResourcePoolGetRedemptionValueInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "amount_of_pool_units",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "MultiResourcePoolGetVaultAmountsInput",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ContributionEvent",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "contributed_resources",
                           "pool_units_minted",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "RedemptionEvent",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "pool_unit_tokens_redeemed",
                           "redeemed_resources",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "WithdrawEvent",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "resource_address",
                           "amount",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "DepositEvent",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "resource_address",
                           "amount",
                         ],
                       ),
                     ),
                   },
                 ],
                 type_validations: [
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::Custom(
                     ScryptoCustomTypeValidation::Reference(
                       ReferenceValidation::IsGlobalTyped(
                         Option::Some(
                           PackageAddress(Reference("package_sim1pkgxxxxxxxxxplxxxxxxxxxxxxx020379220524xxxxxxxxxl5e8k6")),
                         ),
                         "MultiResourcePool",
                       ),
                     ),
                   ),
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                 ],
               },
             ),
           ),
           lock_status: LockStatus::Locked,
         },
       )
  ├─ Partition(2): 2 changes
    ├─ Set: "name"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "Pool Package",
         ),
       )
    └─ Set: "description"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "A native package that defines the logic for a selection of pool components.",
         ),
       )
  ├─ Partition(5): 1 change
    └─ Set: Field(0)
       Value: LOCKED RoleAssignmentOwnerFieldPayload::V1(
         OwnerRoleSubstate {
           rule: AccessRule::DenyAll,
           updater: OwnerRoleUpdater::None,
         },
       )
  ├─ Partition(64): 1 change
    └─ Set: Field(0)
       Value: LOCKED PackageRoyaltyAccumulatorFieldPayload::V1(
         PackageRoyaltyAccumulatorV1 {
           royalty_vault: Vault(Own("internal_vault_sim1tpxzhhq9kxkxlaken2q7l7q977f2fnv62fexklnwwsw8yp4vmsptmh")),
         },
       )
  ├─ Partition(65): 3 changes
    ├─ Set: BlueprintVersionKey { blueprint: "MultiResourcePool", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDefinitionEntryPayload::V1(
         BlueprintDefinition {
           interface: BlueprintInterface {
             blueprint_type: BlueprintType::Outer,
             is_transient: false,
             generics: [],
             feature_set: [],
             state: IndexedStateSchema {
               fields: Option::Some(
                 Tuple(
                   PartitionDescription::Logical(
                     PartitionOffset(
                       0u8,
                     ),
                   ),
                   [
                     FieldSchema {
                       field: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("bcdc947a46f46b92f6b01006acb22554c7130fa93f894fd471b52b7fcf5ec21d")),
                           LocalTypeId::SchemaLocalIndex(
                             0u64,
                           ),
                         ),
                       ),
                       condition: Condition::Always,
                       transience: FieldTransience::NotTransient,
                     },
                   ],
                 ),
               ),
               collections: [],
               num_logical_partitions: 1u8,
             },
             functions: {
               "instantiate" => FunctionSchema {
                 receiver: Option::None,
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("bcdc947a46f46b92f6b01006acb22554c7130fa93f894fd471b52b7fcf5ec21d")),
                     LocalTypeId::SchemaLocalIndex(
                       4u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("bcdc947a46f46b92f6b01006acb22554c7130fa93f894fd471b52b7fcf5ec21d")),
                     LocalTypeId::SchemaLocalIndex(
                       7u64,
                     ),
                   ),
                 ),
               },
               "contribute" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("bcdc947a46f46b92f6b01006acb22554c7130fa93f894fd471b52b7fcf5ec21d")),
                     LocalTypeId::SchemaLocalIndex(
                       8u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("bcdc947a46f46b92f6b01006acb22554c7130fa93f894fd471b52b7fcf5ec21d")),
                     LocalTypeId::SchemaLocalIndex(
                       10u64,
                     ),
                   ),
                 ),
               },
               "redeem" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("bcdc947a46f46b92f6b01006acb22554c7130fa93f894fd471b52b7fcf5ec21d")),
                     LocalTypeId::SchemaLocalIndex(
                       11u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("bcdc947a46f46b92f6b01006acb22554c7130fa93f894fd471b52b7fcf5ec21d")),
                     LocalTypeId::SchemaLocalIndex(
                       9u64,
                     ),
                   ),
                 ),
               },
               "protected_deposit" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("bcdc947a46f46b92f6b01006acb22554c7130fa93f894fd471b52b7fcf5ec21d")),
                     LocalTypeId::SchemaLocalIndex(
                       12u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("bcdc947a46f46b92f6b01006acb22554c7130fa93f894fd471b52b7fcf5ec21d")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "protected_withdraw" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("bcdc947a46f46b92f6b01006acb22554c7130fa93f894fd471b52b7fcf5ec21d")),
                     LocalTypeId::SchemaLocalIndex(
                       13u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("bcdc947a46f46b92f6b01006acb22554c7130fa93f894fd471b52b7fcf5ec21d")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(161u8),
                     ),
                   ),
                 ),
               },
               "get_redemption_value" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRef,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("bcdc947a46f46b92f6b01006acb22554c7130fa93f894fd471b52b7fcf5ec21d")),
                     LocalTypeId::SchemaLocalIndex(
                       16u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("bcdc947a46f46b92f6b01006acb22554c7130fa93f894fd471b52b7fcf5ec21d")),
                     LocalTypeId::SchemaLocalIndex(
                       17u64,
                     ),
                   ),
                 ),
               },
               "get_vault_amounts" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRef,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("bcdc947a46f46b92f6b01006acb22554c7130fa93f894fd471b52b7fcf5ec21d")),
                     LocalTypeId::SchemaLocalIndex(
                       18u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("bcdc947a46f46b92f6b01006acb22554c7130fa93f894fd471b52b7fcf5ec21d")),
                     LocalTypeId::SchemaLocalIndex(
                       17u64,
                     ),
                   ),
                 ),
               },
             },
             events: {
               "ContributionEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("bcdc947a46f46b92f6b01006acb22554c7130fa93f894fd471b52b7fcf5ec21d")),
                   LocalTypeId::SchemaLocalIndex(
                     19u64,
                   ),
                 ),
               ),
               "RedemptionEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("bcdc947a46f46b92f6b01006acb22554c7130fa93f894fd471b52b7fcf5ec21d")),
                   LocalTypeId::SchemaLocalIndex(
                     20u64,
                   ),
                 ),
               ),
               "WithdrawEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("bcdc947a46f46b92f6b01006acb22554c7130fa93f894fd471b52b7fcf5ec21d")),
                   LocalTypeId::SchemaLocalIndex(
                     21u64,
                   ),
                 ),
               ),
               "DepositEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("bcdc947a46f46b92f6b01006acb22554c7130fa93f894fd471b52b7fcf5ec21d")),
                   LocalTypeId::SchemaLocalIndex(
                     22u64,
                   ),
                 ),
               ),
             },
             types: {},
           },
           function_exports: {
             "instantiate" => PackageExport {
               code_hash: CodeHash(hex("6d4f48514bbc96c2fb67d4084e777413fd2c94b657bd8d19a7a2ea131ffb0144")),
               export_name: "instantiate_multi_resource_pool",
             },
             "contribute" => PackageExport {
               code_hash: CodeHash(hex("6d4f48514bbc96c2fb67d4084e777413fd2c94b657bd8d19a7a2ea131ffb0144")),
               export_name: "contribute_multi_resource_pool",
             },
             "redeem" => PackageExport {
               code_hash: CodeHash(hex("6d4f48514bbc96c2fb67d4084e777413fd2c94b657bd8d19a7a2ea131ffb0144")),
               export_name: "redeem_multi_resource_pool",
             },
             "protected_deposit" => PackageExport {
               code_hash: CodeHash(hex("6d4f48514bbc96c2fb67d4084e777413fd2c94b657bd8d19a7a2ea131ffb0144")),
               export_name: "protected_deposit_multi_resource_pool",
             },
             "protected_withdraw" => PackageExport {
               code_hash: CodeHash(hex("6d4f48514bbc96c2fb67d4084e777413fd2c94b657bd8d19a7a2ea131ffb0144")),
               export_name: "protected_withdraw_multi_resource_pool",
             },
             "get_redemption_value" => PackageExport {
               code_hash: CodeHash(hex("6d4f48514bbc96c2fb67d4084e777413fd2c94b657bd8d19a7a2ea131ffb0144")),
               export_name: "get_redemption_value_multi_resource_pool",
             },
             "get_vault_amounts" => PackageExport {
               code_hash: CodeHash(hex("6d4f48514bbc96c2fb67d4084e777413fd2c94b657bd8d19a7a2ea131ffb0144")),
               export_name: "get_vault_amounts_multi_resource_pool",
             },
           },
           hook_exports: {},
         },
       )
    ├─ Set: BlueprintVersionKey { blueprint: "OneResourcePool", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDefinitionEntryPayload::V1(
         BlueprintDefinition {
           interface: BlueprintInterface {
             blueprint_type: BlueprintType::Outer,
             is_transient: false,
             generics: [],
             feature_set: [],
             state: IndexedStateSchema {
               fields: Option::Some(
                 Tuple(
                   PartitionDescription::Logical(
                     PartitionOffset(
                       0u8,
                     ),
                   ),
                   [
                     FieldSchema {
                       field: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("380fc684007aad778eef82a06849c2726576265d631b59f1ffe18935953813f5")),
                           LocalTypeId::SchemaLocalIndex(
                             0u64,
                           ),
                         ),
                       ),
                       condition: Condition::Always,
                       transience: FieldTransience::NotTransient,
                     },
                   ],
                 ),
               ),
               collections: [],
               num_logical_partitions: 1u8,
             },
             functions: {
               "instantiate" => FunctionSchema {
                 receiver: Option::None,
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("380fc684007aad778eef82a06849c2726576265d631b59f1ffe18935953813f5")),
                     LocalTypeId::SchemaLocalIndex(
                       3u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("380fc684007aad778eef82a06849c2726576265d631b59f1ffe18935953813f5")),
                     LocalTypeId::SchemaLocalIndex(
                       5u64,
                     ),
                   ),
                 ),
               },
               "contribute" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("380fc684007aad778eef82a06849c2726576265d631b59f1ffe18935953813f5")),
                     LocalTypeId::SchemaLocalIndex(
                       6u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("380fc684007aad778eef82a06849c2726576265d631b59f1ffe18935953813f5")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(161u8),
                     ),
                   ),
                 ),
               },
               "redeem" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("380fc684007aad778eef82a06849c2726576265d631b59f1ffe18935953813f5")),
                     LocalTypeId::SchemaLocalIndex(
                       7u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("380fc684007aad778eef82a06849c2726576265d631b59f1ffe18935953813f5")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(161u8),
                     ),
                   ),
                 ),
               },
               "protected_deposit" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("380fc684007aad778eef82a06849c2726576265d631b59f1ffe18935953813f5")),
                     LocalTypeId::SchemaLocalIndex(
                       8u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("380fc684007aad778eef82a06849c2726576265d631b59f1ffe18935953813f5")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "protected_withdraw" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("380fc684007aad778eef82a06849c2726576265d631b59f1ffe18935953813f5")),
                     LocalTypeId::SchemaLocalIndex(
                       9u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("380fc684007aad778eef82a06849c2726576265d631b59f1ffe18935953813f5")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(161u8),
                     ),
                   ),
                 ),
               },
               "get_redemption_value" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRef,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("380fc684007aad778eef82a06849c2726576265d631b59f1ffe18935953813f5")),
                     LocalTypeId::SchemaLocalIndex(
                       12u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("380fc684007aad778eef82a06849c2726576265d631b59f1ffe18935953813f5")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(192u8),
                     ),
                   ),
                 ),
               },
               "get_vault_amount" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRef,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("380fc684007aad778eef82a06849c2726576265d631b59f1ffe18935953813f5")),
                     LocalTypeId::SchemaLocalIndex(
                       13u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("380fc684007aad778eef82a06849c2726576265d631b59f1ffe18935953813f5")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(192u8),
                     ),
                   ),
                 ),
               },
             },
             events: {
               "ContributionEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("380fc684007aad778eef82a06849c2726576265d631b59f1ffe18935953813f5")),
                   LocalTypeId::SchemaLocalIndex(
                     14u64,
                   ),
                 ),
               ),
               "RedemptionEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("380fc684007aad778eef82a06849c2726576265d631b59f1ffe18935953813f5")),
                   LocalTypeId::SchemaLocalIndex(
                     15u64,
                   ),
                 ),
               ),
               "WithdrawEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("380fc684007aad778eef82a06849c2726576265d631b59f1ffe18935953813f5")),
                   LocalTypeId::SchemaLocalIndex(
                     16u64,
                   ),
                 ),
               ),
               "DepositEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("380fc684007aad778eef82a06849c2726576265d631b59f1ffe18935953813f5")),
                   LocalTypeId::SchemaLocalIndex(
                     17u64,
                   ),
                 ),
               ),
             },
             types: {},
           },
           function_exports: {
             "instantiate" => PackageExport {
               code_hash: CodeHash(hex("6d4f48514bbc96c2fb67d4084e777413fd2c94b657bd8d19a7a2ea131ffb0144")),
               export_name: "instantiate_one_resource_pool",
             },
             "contribute" => PackageExport {
               code_hash: CodeHash(hex("6d4f48514bbc96c2fb67d4084e777413fd2c94b657bd8d19a7a2ea131ffb0144")),
               export_name: "contribute_one_resource_pool",
             },
             "redeem" => PackageExport {
               code_hash: CodeHash(hex("6d4f48514bbc96c2fb67d4084e777413fd2c94b657bd8d19a7a2ea131ffb0144")),
               export_name: "redeem_one_resource_pool",
             },
             "protected_deposit" => PackageExport {
               code_hash: CodeHash(hex("6d4f48514bbc96c2fb67d4084e777413fd2c94b657bd8d19a7a2ea131ffb0144")),
               export_name: "protected_deposit_one_resource_pool",
             },
             "protected_withdraw" => PackageExport {
               code_hash: CodeHash(hex("6d4f48514bbc96c2fb67d4084e777413fd2c94b657bd8d19a7a2ea131ffb0144")),
               export_name: "protected_withdraw_one_resource_pool",
             },
             "get_redemption_value" => PackageExport {
               code_hash: CodeHash(hex("6d4f48514bbc96c2fb67d4084e777413fd2c94b657bd8d19a7a2ea131ffb0144")),
               export_name: "get_redemption_value_one_resource_pool",
             },
             "get_vault_amount" => PackageExport {
               code_hash: CodeHash(hex("6d4f48514bbc96c2fb67d4084e777413fd2c94b657bd8d19a7a2ea131ffb0144")),
               export_name: "get_vault_amount_one_resource_pool",
             },
           },
           hook_exports: {},
         },
       )
    └─ Set: BlueprintVersionKey { blueprint: "TwoResourcePool", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDefinitionEntryPayload::V1(
         BlueprintDefinition {
           interface: BlueprintInterface {
             blueprint_type: BlueprintType::Outer,
             is_transient: false,
             generics: [],
             feature_set: [],
             state: IndexedStateSchema {
               fields: Option::Some(
                 Tuple(
                   PartitionDescription::Logical(
                     PartitionOffset(
                       0u8,
                     ),
                   ),
                   [
                     FieldSchema {
                       field: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("0b4ae514b741b2ab034b937f1075da64cbe9ce8b9cd7ff1494fdc14d56cc5433")),
                           LocalTypeId::SchemaLocalIndex(
                             0u64,
                           ),
                         ),
                       ),
                       condition: Condition::Always,
                       transience: FieldTransience::NotTransient,
                     },
                   ],
                 ),
               ),
               collections: [],
               num_logical_partitions: 1u8,
             },
             functions: {
               "instantiate" => FunctionSchema {
                 receiver: Option::None,
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("0b4ae514b741b2ab034b937f1075da64cbe9ce8b9cd7ff1494fdc14d56cc5433")),
                     LocalTypeId::SchemaLocalIndex(
                       5u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("0b4ae514b741b2ab034b937f1075da64cbe9ce8b9cd7ff1494fdc14d56cc5433")),
                     LocalTypeId::SchemaLocalIndex(
                       8u64,
                     ),
                   ),
                 ),
               },
               "contribute" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("0b4ae514b741b2ab034b937f1075da64cbe9ce8b9cd7ff1494fdc14d56cc5433")),
                     LocalTypeId::SchemaLocalIndex(
                       9u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("0b4ae514b741b2ab034b937f1075da64cbe9ce8b9cd7ff1494fdc14d56cc5433")),
                     LocalTypeId::SchemaLocalIndex(
                       11u64,
                     ),
                   ),
                 ),
               },
               "redeem" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("0b4ae514b741b2ab034b937f1075da64cbe9ce8b9cd7ff1494fdc14d56cc5433")),
                     LocalTypeId::SchemaLocalIndex(
                       13u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("0b4ae514b741b2ab034b937f1075da64cbe9ce8b9cd7ff1494fdc14d56cc5433")),
                     LocalTypeId::SchemaLocalIndex(
                       10u64,
                     ),
                   ),
                 ),
               },
               "protected_deposit" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("0b4ae514b741b2ab034b937f1075da64cbe9ce8b9cd7ff1494fdc14d56cc5433")),
                     LocalTypeId::SchemaLocalIndex(
                       14u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("0b4ae514b741b2ab034b937f1075da64cbe9ce8b9cd7ff1494fdc14d56cc5433")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "protected_withdraw" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("0b4ae514b741b2ab034b937f1075da64cbe9ce8b9cd7ff1494fdc14d56cc5433")),
                     LocalTypeId::SchemaLocalIndex(
                       15u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("0b4ae514b741b2ab034b937f1075da64cbe9ce8b9cd7ff1494fdc14d56cc5433")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(161u8),
                     ),
                   ),
                 ),
               },
               "get_redemption_value" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRef,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("0b4ae514b741b2ab034b937f1075da64cbe9ce8b9cd7ff1494fdc14d56cc5433")),
                     LocalTypeId::SchemaLocalIndex(
                       18u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("0b4ae514b741b2ab034b937f1075da64cbe9ce8b9cd7ff1494fdc14d56cc5433")),
                     LocalTypeId::SchemaLocalIndex(
                       19u64,
                     ),
                   ),
                 ),
               },
               "get_vault_amounts" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRef,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("0b4ae514b741b2ab034b937f1075da64cbe9ce8b9cd7ff1494fdc14d56cc5433")),
                     LocalTypeId::SchemaLocalIndex(
                       20u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("0b4ae514b741b2ab034b937f1075da64cbe9ce8b9cd7ff1494fdc14d56cc5433")),
                     LocalTypeId::SchemaLocalIndex(
                       19u64,
                     ),
                   ),
                 ),
               },
             },
             events: {
               "ContributionEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("0b4ae514b741b2ab034b937f1075da64cbe9ce8b9cd7ff1494fdc14d56cc5433")),
                   LocalTypeId::SchemaLocalIndex(
                     21u64,
                   ),
                 ),
               ),
               "RedemptionEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("0b4ae514b741b2ab034b937f1075da64cbe9ce8b9cd7ff1494fdc14d56cc5433")),
                   LocalTypeId::SchemaLocalIndex(
                     22u64,
                   ),
                 ),
               ),
               "WithdrawEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("0b4ae514b741b2ab034b937f1075da64cbe9ce8b9cd7ff1494fdc14d56cc5433")),
                   LocalTypeId::SchemaLocalIndex(
                     23u64,
                   ),
                 ),
               ),
               "DepositEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("0b4ae514b741b2ab034b937f1075da64cbe9ce8b9cd7ff1494fdc14d56cc5433")),
                   LocalTypeId::SchemaLocalIndex(
                     24u64,
                   ),
                 ),
               ),
             },
             types: {},
           },
           function_exports: {
             "instantiate" => PackageExport {
               code_hash: CodeHash(hex("6d4f48514bbc96c2fb67d4084e777413fd2c94b657bd8d19a7a2ea131ffb0144")),
               export_name: "instantiate_two_resource_pool",
             },
             "contribute" => PackageExport {
               code_hash: CodeHash(hex("6d4f48514bbc96c2fb67d4084e777413fd2c94b657bd8d19a7a2ea131ffb0144")),
               export_name: "contribute_two_resource_pool",
             },
             "redeem" => PackageExport {
               code_hash: CodeHash(hex("6d4f48514bbc96c2fb67d4084e777413fd2c94b657bd8d19a7a2ea131ffb0144")),
               export_name: "redeem_two_resource_pool",
             },
             "protected_deposit" => PackageExport {
               code_hash: CodeHash(hex("6d4f48514bbc96c2fb67d4084e777413fd2c94b657bd8d19a7a2ea131ffb0144")),
               export_name: "protected_deposit_two_resource_pool",
             },
             "protected_withdraw" => PackageExport {
               code_hash: CodeHash(hex("6d4f48514bbc96c2fb67d4084e777413fd2c94b657bd8d19a7a2ea131ffb0144")),
               export_name: "protected_withdraw_two_resource_pool",
             },
             "get_redemption_value" => PackageExport {
               code_hash: CodeHash(hex("6d4f48514bbc96c2fb67d4084e777413fd2c94b657bd8d19a7a2ea131ffb0144")),
               export_name: "get_redemption_value_two_resource_pool",
             },
             "get_vault_amounts" => PackageExport {
               code_hash: CodeHash(hex("6d4f48514bbc96c2fb67d4084e777413fd2c94b657bd8d19a7a2ea131ffb0144")),
               export_name: "get_vault_amounts_two_resource_pool",
             },
           },
           hook_exports: {},
         },
       )
  ├─ Partition(66): 3 changes
    ├─ Set: BlueprintVersionKey { blueprint: "MultiResourcePool", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDependenciesEntryPayload::V1(
         BlueprintDependencies([]),
       )
    ├─ Set: BlueprintVersionKey { blueprint: "OneResourcePool", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDependenciesEntryPayload::V1(
         BlueprintDependencies([]),
       )
    └─ Set: BlueprintVersionKey { blueprint: "TwoResourcePool", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDependenciesEntryPayload::V1(
         BlueprintDependencies([]),
       )
  ├─ Partition(67): 3 changes
    ├─ Set: BlueprintVersionKey { blueprint: "MultiResourcePool", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionRoyaltyConfigEntryPayload::V1(
         PackageRoyaltyConfig::Disabled,
       )
    ├─ Set: BlueprintVersionKey { blueprint: "OneResourcePool", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionRoyaltyConfigEntryPayload::V1(
         PackageRoyaltyConfig::Disabled,
       )
    └─ Set: BlueprintVersionKey { blueprint: "TwoResourcePool", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionRoyaltyConfigEntryPayload::V1(
         PackageRoyaltyConfig::Disabled,
       )
  ├─ Partition(68): 3 changes
    ├─ Set: BlueprintVersionKey { blueprint: "MultiResourcePool", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionAuthConfigEntryPayload::V1(
         AuthConfig {
           function_auth: FunctionAuth::AllowAll,
           method_auth: MethodAuthTemplate::StaticRoleDefinition(
             StaticRoleDefinition {
               roles: RoleSpecification::Normal(
                 {
                   RoleKey("pool_manager_role") => RoleList([]),
                 },
               ),
               methods: {
                 MethodKey("redeem") => MethodAccessibility::Public,
                 MethodKey("get_redemption_value") => MethodAccessibility::Public,
                 MethodKey("get_vault_amounts") => MethodAccessibility::Public,
                 MethodKey("contribute") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("pool_manager_role"),
                   ]),
                 ),
                 MethodKey("protected_deposit") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("pool_manager_role"),
                   ]),
                 ),
                 MethodKey("protected_withdraw") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("pool_manager_role"),
                   ]),
                 ),
               },
             },
           ),
         },
       )
    ├─ Set: BlueprintVersionKey { blueprint: "OneResourcePool", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionAuthConfigEntryPayload::V1(
         AuthConfig {
           function_auth: FunctionAuth::AllowAll,
           method_auth: MethodAuthTemplate::StaticRoleDefinition(
             StaticRoleDefinition {
               roles: RoleSpecification::Normal(
                 {
                   RoleKey("pool_manager_role") => RoleList([]),
                 },
               ),
               methods: {
                 MethodKey("redeem") => MethodAccessibility::Public,
                 MethodKey("get_redemption_value") => MethodAccessibility::Public,
                 MethodKey("get_vault_amount") => MethodAccessibility::Public,
                 MethodKey("contribute") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("pool_manager_role"),
                   ]),
                 ),
                 MethodKey("protected_deposit") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("pool_manager_role"),
                   ]),
                 ),
                 MethodKey("protected_withdraw") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("pool_manager_role"),
                   ]),
                 ),
               },
             },
           ),
         },
       )
    └─ Set: BlueprintVersionKey { blueprint: "TwoResourcePool", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionAuthConfigEntryPayload::V1(
         AuthConfig {
           function_auth: FunctionAuth::AllowAll,
           method_auth: MethodAuthTemplate::StaticRoleDefinition(
             StaticRoleDefinition {
               roles: RoleSpecification::Normal(
                 {
                   RoleKey("pool_manager_role") => RoleList([]),
                 },
               ),
               methods: {
                 MethodKey("redeem") => MethodAccessibility::Public,
                 MethodKey("get_redemption_value") => MethodAccessibility::Public,
                 MethodKey("get_vault_amounts") => MethodAccessibility::Public,
                 MethodKey("contribute") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("pool_manager_role"),
                   ]),
                 ),
                 MethodKey("protected_deposit") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("pool_manager_role"),
                   ]),
                 ),
                 MethodKey("protected_withdraw") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("pool_manager_role"),
                   ]),
                 ),
               },
             },
           ),
         },
       )
  ├─ Partition(69): 1 change
    └─ Set: CodeHash(hex("6d4f48514bbc96c2fb67d4084e777413fd2c94b657bd8d19a7a2ea131ffb0144"))
       Value: LOCKED PackageCodeVmTypeEntryPayload::V1(
         PackageCodeVmTypeV1::Native,
       )
  ├─ Partition(70): 1 change
    └─ Set: CodeHash(hex("6d4f48514bbc96c2fb67d4084e777413fd2c94b657bd8d19a7a2ea131ffb0144"))
       Value: LOCKED PackageCodeOriginalCodeEntryPayload::V1(
         PackageCodeOriginalCodeV1(hex("000000000000000d")),
       )
  └─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxpackgexxxxxxxxx000726633226xxxxxxxxxlk8hc9")),
               blueprint_name: "Package",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::None,
             features: [
               "package_royalty",
             ],
             generic_substitutions: [],
           },
           object_type: ObjectType::Global {
             modules: {
               AttachedModuleId::Metadata => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
               AttachedModuleId::RoleAssignment => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
             },
           },
         },
       )
├─ resource_sim1nfxxxxxxxxxxsecpsgxxxxxxxxx004638826440xxxxxxxxxwj8qq5 across 6 partitions
  ├─ Partition(1): 1 change
    └─ Set: SchemaHash(5984bee33c529de9f322241679b505ab2e60e2189bdf8c2b7811023ffb5c12f9)
       Value: KeyValueEntrySubstate::V1(
         KeyValueEntrySubstateV1 {
           value: Option::Some(
             PackageSchemaEntryPayload::V1(
               SchemaV1 {
                 type_kinds: [],
                 type_metadata: [],
                 type_validations: [],
               },
             ),
           ),
           lock_status: LockStatus::Locked,
         },
       )
  ├─ Partition(2): 4 changes
    ├─ Set: "name"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "ECDSA secp256k1 Virtual Badges",
         ),
       )
    ├─ Set: "description"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "Virtual badges generated automatically by the Radix system to represent ECDSA secp256k1 signatures applied to transactions. These badges cease to exist at the end of their transaction.",
         ),
       )
    ├─ Set: "icon_url"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::Url(
           Url("https://assets.radixdlt.com/icons/icon-ecdsa_secp256k1_signature_virtual_badge.png"),
         ),
       )
    └─ Set: "tags"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::StringArray(
           [
             "badge",
           ],
         ),
       )
  ├─ Partition(5): 1 change
    └─ Set: Field(0)
       Value: LOCKED RoleAssignmentOwnerFieldPayload::V1(
         OwnerRoleSubstate {
           rule: AccessRule::Protected(
             AccessRuleNode::ProofRule(
               ProofRule::Require(
                 ResourceOrNonFungible::NonFungible(
                   NonFungibleGlobalId {
                     resource_address: ResourceAddress(Reference("resource_sim1nfxxxxxxxxxxsystxnxxxxxxxxx002683325037xxxxxxxxxw002k0")),
                     local_id: NonFungibleLocalId("#0#"),
                   },
                 ),
               ),
             ),
           ),
           updater: OwnerRoleUpdater::None,
         },
       )
  ├─ Partition(6): 14 changes
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("depositor") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::AllowAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("burner_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("freezer") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("freezer_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("burner") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("recaller") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("withdrawer") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::AllowAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("non_fungible_data_updater_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("recaller_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("non_fungible_data_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("depositor_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("minter") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("withdrawer_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    └─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("minter_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
  ├─ Partition(64): 2 changes
    ├─ Set: Field(0)
       Value: LOCKED NonFungibleResourceManagerIdTypeFieldPayload::V1(
         NonFungibleIdType::Bytes,
       )
    └─ Set: Field(1)
       Value: LOCKED NonFungibleResourceManagerMutableFieldsFieldPayload::V1(
         NonFungibleResourceManagerMutableFieldsV1 {
           mutable_field_index: {},
         },
       )
  └─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxresrcexxxxxxxxx000538436477xxxxxxxxxaj0zg9")),
               blueprint_name: "NonFungibleResourceManager",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::None,
             features: [],
             generic_substitutions: [
               GenericSubstitution::Local(
                 ScopedTypeId(
                   SchemaHash(hex("5984bee33c529de9f322241679b505ab2e60e2189bdf8c2b7811023ffb5c12f9")),
                   LocalTypeId::WellKnown(
                     WellKnownTypeId(66u8),
                   ),
                 ),
               ),
             ],
           },
           object_type: ObjectType::Global {
             modules: {
               AttachedModuleId::RoleAssignment => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
               AttachedModuleId::Metadata => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
             },
           },
         },
       )
├─ resource_sim1nfxxxxxxxxxxed25sgxxxxxxxxx002236757237xxxxxxxxx8x44q5 across 6 partitions
  ├─ Partition(1): 1 change
    └─ Set: SchemaHash(5984bee33c529de9f322241679b505ab2e60e2189bdf8c2b7811023ffb5c12f9)
       Value: KeyValueEntrySubstate::V1(
         KeyValueEntrySubstateV1 {
           value: Option::Some(
             PackageSchemaEntryPayload::V1(
               SchemaV1 {
                 type_kinds: [],
                 type_metadata: [],
                 type_validations: [],
               },
             ),
           ),
           lock_status: LockStatus::Locked,
         },
       )
  ├─ Partition(2): 4 changes
    ├─ Set: "name"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "EdDSA Ed25519 Virtual Badges",
         ),
       )
    ├─ Set: "description"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "Virtual badges generated automatically by the Radix system to represent EdDSA Ed25519 signatures applied to transactions. These badges cease to exist at the end of their transaction.",
         ),
       )
    ├─ Set: "icon_url"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::Url(
           Url("https://assets.radixdlt.com/icons/icon-eddsa_ed25519_signature_virtual_badge.png"),
         ),
       )
    └─ Set: "tags"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::StringArray(
           [
             "badge",
           ],
         ),
       )
  ├─ Partition(5): 1 change
    └─ Set: Field(0)
       Value: LOCKED RoleAssignmentOwnerFieldPayload::V1(
         OwnerRoleSubstate {
           rule: AccessRule::Protected(
             AccessRuleNode::ProofRule(
               ProofRule::Require(
                 ResourceOrNonFungible::NonFungible(
                   NonFungibleGlobalId {
                     resource_address: ResourceAddress(Reference("resource_sim1nfxxxxxxxxxxsystxnxxxxxxxxx002683325037xxxxxxxxxw002k0")),
                     local_id: NonFungibleLocalId("#0#"),
                   },
                 ),
               ),
             ),
           ),
           updater: OwnerRoleUpdater::None,
         },
       )
  ├─ Partition(6): 14 changes
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("depositor") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::AllowAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("burner_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("freezer") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("freezer_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("burner") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("recaller") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("withdrawer") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::AllowAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("non_fungible_data_updater_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("recaller_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("non_fungible_data_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("depositor_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("minter") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("withdrawer_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    └─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("minter_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
  ├─ Partition(64): 2 changes
    ├─ Set: Field(0)
       Value: LOCKED NonFungibleResourceManagerIdTypeFieldPayload::V1(
         NonFungibleIdType::Bytes,
       )
    └─ Set: Field(1)
       Value: LOCKED NonFungibleResourceManagerMutableFieldsFieldPayload::V1(
         NonFungibleResourceManagerMutableFieldsV1 {
           mutable_field_index: {},
         },
       )
  └─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxresrcexxxxxxxxx000538436477xxxxxxxxxaj0zg9")),
               blueprint_name: "NonFungibleResourceManager",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::None,
             features: [],
             generic_substitutions: [
               GenericSubstitution::Local(
                 ScopedTypeId(
                   SchemaHash(hex("5984bee33c529de9f322241679b505ab2e60e2189bdf8c2b7811023ffb5c12f9")),
                   LocalTypeId::WellKnown(
                     WellKnownTypeId(66u8),
                   ),
                 ),
               ),
             ],
           },
           object_type: ObjectType::Global {
             modules: {
               AttachedModuleId::RoleAssignment => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
               AttachedModuleId::Metadata => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
             },
           },
         },
       )
├─ resource_sim1nfxxxxxxxxxxsystxnxxxxxxxxx002683325037xxxxxxxxxw002k0 across 6 partitions
  ├─ Partition(1): 1 change
    └─ Set: SchemaHash(5984bee33c529de9f322241679b505ab2e60e2189bdf8c2b7811023ffb5c12f9)
       Value: KeyValueEntrySubstate::V1(
         KeyValueEntrySubstateV1 {
           value: Option::Some(
             PackageSchemaEntryPayload::V1(
               SchemaV1 {
                 type_kinds: [],
                 type_metadata: [],
                 type_validations: [],
               },
             ),
           ),
           lock_status: LockStatus::Locked,
         },
       )
  ├─ Partition(2): 4 changes
    ├─ Set: "name"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "System Transaction Badge",
         ),
       )
    ├─ Set: "description"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "Virtual badges are created under this resource to represent the Radix system's authority at genesis and to affect changes to system entities during protocol updates, or to represent the Radix system's authority in the regularly occurring system transactions including round and epoch changes.",
         ),
       )
    ├─ Set: "icon_url"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::Url(
           Url("https://assets.radixdlt.com/icons/icon-system_transaction_badge.png"),
         ),
       )
    └─ Set: "tags"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::StringArray(
           [
             "badge",
             "system badge",
           ],
         ),
       )
  ├─ Partition(5): 1 change
    └─ Set: Field(0)
       Value: LOCKED RoleAssignmentOwnerFieldPayload::V1(
         OwnerRoleSubstate {
           rule: AccessRule::Protected(
             AccessRuleNode::ProofRule(
               ProofRule::Require(
                 ResourceOrNonFungible::NonFungible(
                   NonFungibleGlobalId {
                     resource_address: ResourceAddress(Reference("resource_sim1nfxxxxxxxxxxsystxnxxxxxxxxx002683325037xxxxxxxxxw002k0")),
                     local_id: NonFungibleLocalId("#0#"),
                   },
                 ),
               ),
             ),
           ),
           updater: OwnerRoleUpdater::None,
         },
       )
  ├─ Partition(6): 14 changes
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("depositor") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::AllowAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("burner_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("freezer") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("freezer_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("burner") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("recaller") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("withdrawer") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::AllowAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("non_fungible_data_updater_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("recaller_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("non_fungible_data_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("depositor_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("minter") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("withdrawer_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    └─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("minter_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
  ├─ Partition(64): 2 changes
    ├─ Set: Field(0)
       Value: LOCKED NonFungibleResourceManagerIdTypeFieldPayload::V1(
         NonFungibleIdType::Integer,
       )
    └─ Set: Field(1)
       Value: LOCKED NonFungibleResourceManagerMutableFieldsFieldPayload::V1(
         NonFungibleResourceManagerMutableFieldsV1 {
           mutable_field_index: {},
         },
       )
  └─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxresrcexxxxxxxxx000538436477xxxxxxxxxaj0zg9")),
               blueprint_name: "NonFungibleResourceManager",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::None,
             features: [],
             generic_substitutions: [
               GenericSubstitution::Local(
                 ScopedTypeId(
                   SchemaHash(hex("5984bee33c529de9f322241679b505ab2e60e2189bdf8c2b7811023ffb5c12f9")),
                   LocalTypeId::WellKnown(
                     WellKnownTypeId(66u8),
                   ),
                 ),
               ),
             ],
           },
           object_type: ObjectType::Global {
             modules: {
               AttachedModuleId::RoleAssignment => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
               AttachedModuleId::Metadata => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
             },
           },
         },
       )
├─ package_sim1pkgxxxxxxxxxfaucetxxxxxxxxx000034355863xxxxxxxxxhkrefh across 12 partitions
  ├─ Partition(1): 1 change
    └─ Set: SchemaHash(80070e7155d2ec9a55b8c79d8ee93fe83e41685be6fa5c94ef36b5a08d222353)
       Value: KeyValueEntrySubstate::V1(
         KeyValueEntrySubstateV1 {
           value: Option::Some(
             PackageSchemaEntryPayload::V1(
               SchemaV1 {
                 type_kinds: [
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(167u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(170u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(171u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(161u8),
                       ),
                     ],
                   },
                   TypeKind::Custom(
                     ScryptoCustomTypeKind::Reference,
                   ),
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                   TypeKind::U64,
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(7u8),
                     ),
                   },
                 ],
                 type_metadata: [
                   TypeMetadata {
                     type_name: Option::Some(
                       "Faucet",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "vault",
                           "transactions",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "Faucet_new_Input",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "address_reservation",
                           "bucket",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "GlobalFaucet",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "Faucet_free_Input",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "Faucet_lock_fee_Input",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "amount",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "Epoch",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "Hash",
                     ),
                     child_names: Option::None,
                   },
                 ],
                 type_validations: [
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::Custom(
                     ScryptoCustomTypeValidation::Reference(
                       ReferenceValidation::IsGlobalTyped(
                         Option::None,
                         "Faucet",
                       ),
                     ),
                   ),
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::Array(
                     LengthValidation {
                       min: Option::Some(
                         32u32,
                       ),
                       max: Option::Some(
                         32u32,
                       ),
                     },
                   ),
                 ],
               },
             ),
           ),
           lock_status: LockStatus::Locked,
         },
       )
  ├─ Partition(2): 2 changes
    ├─ Set: "name"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "Faucet Package",
         ),
       )
    └─ Set: "description"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "A package that defines the logic of a simple faucet component for testing purposes.",
         ),
       )
  ├─ Partition(5): 1 change
    └─ Set: Field(0)
       Value: LOCKED RoleAssignmentOwnerFieldPayload::V1(
         OwnerRoleSubstate {
           rule: AccessRule::DenyAll,
           updater: OwnerRoleUpdater::None,
         },
       )
  ├─ Partition(64): 1 change
    └─ Set: Field(0)
       Value: LOCKED PackageRoyaltyAccumulatorFieldPayload::V1(
         PackageRoyaltyAccumulatorV1 {
           royalty_vault: Vault(Own("internal_vault_sim1trp8uwdej0t4junelqa4fjtnzhjeyxt5gca5p927hagjjas6whx8sy")),
         },
       )
  ├─ Partition(65): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "Faucet", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDefinitionEntryPayload::V1(
         BlueprintDefinition {
           interface: BlueprintInterface {
             blueprint_type: BlueprintType::Outer,
             is_transient: false,
             generics: [],
             feature_set: [],
             state: IndexedStateSchema {
               fields: Option::Some(
                 Tuple(
                   PartitionDescription::Logical(
                     PartitionOffset(
                       0u8,
                     ),
                   ),
                   [
                     FieldSchema {
                       field: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("80070e7155d2ec9a55b8c79d8ee93fe83e41685be6fa5c94ef36b5a08d222353")),
                           LocalTypeId::SchemaLocalIndex(
                             0u64,
                           ),
                         ),
                       ),
                       condition: Condition::Always,
                       transience: FieldTransience::NotTransient,
                     },
                   ],
                 ),
               ),
               collections: [],
               num_logical_partitions: 1u8,
             },
             functions: {
               "new" => FunctionSchema {
                 receiver: Option::None,
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("80070e7155d2ec9a55b8c79d8ee93fe83e41685be6fa5c94ef36b5a08d222353")),
                     LocalTypeId::SchemaLocalIndex(
                       1u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("80070e7155d2ec9a55b8c79d8ee93fe83e41685be6fa5c94ef36b5a08d222353")),
                     LocalTypeId::SchemaLocalIndex(
                       2u64,
                     ),
                   ),
                 ),
               },
               "free" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("80070e7155d2ec9a55b8c79d8ee93fe83e41685be6fa5c94ef36b5a08d222353")),
                     LocalTypeId::SchemaLocalIndex(
                       3u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("80070e7155d2ec9a55b8c79d8ee93fe83e41685be6fa5c94ef36b5a08d222353")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(161u8),
                     ),
                   ),
                 ),
               },
               "lock_fee" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("80070e7155d2ec9a55b8c79d8ee93fe83e41685be6fa5c94ef36b5a08d222353")),
                     LocalTypeId::SchemaLocalIndex(
                       4u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("80070e7155d2ec9a55b8c79d8ee93fe83e41685be6fa5c94ef36b5a08d222353")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
             },
             events: {},
             types: {
               "Epoch" => ScopedTypeId(
                 SchemaHash(hex("80070e7155d2ec9a55b8c79d8ee93fe83e41685be6fa5c94ef36b5a08d222353")),
                 LocalTypeId::SchemaLocalIndex(
                   5u64,
                 ),
               ),
               "Hash" => ScopedTypeId(
                 SchemaHash(hex("80070e7155d2ec9a55b8c79d8ee93fe83e41685be6fa5c94ef36b5a08d222353")),
                 LocalTypeId::SchemaLocalIndex(
                   6u64,
                 ),
               ),
             },
           },
           function_exports: {
             "new" => PackageExport {
               code_hash: CodeHash(hex("922eba84843ce2ecfc15533a11cefd877101deb259c0c179d7c2e100f444ab60")),
               export_name: "Faucet_new",
             },
             "free" => PackageExport {
               code_hash: CodeHash(hex("922eba84843ce2ecfc15533a11cefd877101deb259c0c179d7c2e100f444ab60")),
               export_name: "Faucet_free",
             },
             "lock_fee" => PackageExport {
               code_hash: CodeHash(hex("922eba84843ce2ecfc15533a11cefd877101deb259c0c179d7c2e100f444ab60")),
               export_name: "Faucet_lock_fee",
             },
           },
           hook_exports: {},
         },
       )
  ├─ Partition(66): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "Faucet", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDependenciesEntryPayload::V1(
         BlueprintDependencies([]),
       )
  ├─ Partition(67): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "Faucet", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionRoyaltyConfigEntryPayload::V1(
         PackageRoyaltyConfig::Disabled,
       )
  ├─ Partition(68): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "Faucet", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionAuthConfigEntryPayload::V1(
         AuthConfig {
           function_auth: FunctionAuth::AllowAll,
           method_auth: MethodAuthTemplate::AllowAll,
         },
       )
  ├─ Partition(69): 1 change
    └─ Set: CodeHash(hex("922eba84843ce2ecfc15533a11cefd877101deb259c0c179d7c2e100f444ab60"))
       Value: LOCKED PackageCodeVmTypeEntryPayload::V1(
         PackageCodeVmTypeV1::ScryptoV1,
       )
  ├─ Partition(70): 1 change
    └─ Set: CodeHash(hex("922eba84843ce2ecfc15533a11cefd877101deb259c0c179d7c2e100f444ab60"))
       Value: (Hidden as longer than 10240 bytes. Hash: caa5fbbc4cdd2247afd7ba4f9d66077eb50b16dfefdd58b1935634b6dbd34b41)
  ├─ Partition(71): 1 change
    └─ Set: CodeHash(hex("922eba84843ce2ecfc15533a11cefd877101deb259c0c179d7c2e100f444ab60"))
       Value: (Hidden as longer than 10240 bytes. Hash: 7fb0c594ffc4a51d82c0fad5c203b70bf357811ac588ff663f02ec58e0033640)
  └─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxpackgexxxxxxxxx000726633226xxxxxxxxxlk8hc9")),
               blueprint_name: "Package",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::None,
             features: [
               "package_royalty",
             ],
             generic_substitutions: [],
           },
           object_type: ObjectType::Global {
             modules: {
               AttachedModuleId::Metadata => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
               AttachedModuleId::RoleAssignment => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
             },
           },
         },
       )
├─ package_sim1pkgxxxxxxxxxgenssxxxxxxxxxx004372642773xxxxxxxxxkjv3q6 across 12 partitions
  ├─ Partition(1): 1 change
    └─ Set: SchemaHash(513baeda09caabaa7e73986ce927fc8bf0f3686205c5087853394ec71cb10f24)
       Value: KeyValueEntrySubstate::V1(
         KeyValueEntrySubstateV1 {
           value: Option::Some(
             PackageSchemaEntryPayload::V1(
               SchemaV1 {
                 type_kinds: [
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         1u64,
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(170u8),
                       ),
                     ],
                   },
                   TypeKind::Custom(
                     ScryptoCustomTypeKind::Reference,
                   ),
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(171u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         1u64,
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(195u8),
                       ),
                     ],
                   },
                   TypeKind::Custom(
                     ScryptoCustomTypeKind::Reference,
                   ),
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         5u64,
                       ),
                     ],
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           6u64,
                         ),
                       ],
                       1u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           27u64,
                         ),
                         LocalTypeId::SchemaLocalIndex(
                           28u64,
                         ),
                       ],
                       2u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           32u64,
                         ),
                       ],
                       3u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           27u64,
                         ),
                         LocalTypeId::SchemaLocalIndex(
                           35u64,
                         ),
                       ],
                       4u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           39u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::SchemaLocalIndex(
                       7u64,
                     ),
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(209u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(1u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(1u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         8u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         26u64,
                       ),
                     ],
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::SchemaLocalIndex(
                       9u64,
                     ),
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(12u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         10u64,
                       ),
                     ],
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(12u8),
                         ),
                       ],
                       1u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(1u8),
                         ),
                       ],
                       2u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(7u8),
                         ),
                       ],
                       3u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(9u8),
                         ),
                       ],
                       4u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(10u8),
                         ),
                       ],
                       5u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(4u8),
                         ),
                       ],
                       6u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(5u8),
                         ),
                       ],
                       7u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(192u8),
                         ),
                       ],
                       8u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(129u8),
                         ),
                       ],
                       9u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(208u8),
                         ),
                       ],
                       10u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(195u8),
                         ),
                       ],
                       11u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(194u8),
                         ),
                       ],
                       12u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(196u8),
                         ),
                       ],
                       13u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(198u8),
                         ),
                       ],
                       14u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(199u8),
                         ),
                       ],
                       15u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(216u8),
                         ),
                       ],
                       128u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           11u64,
                         ),
                       ],
                       129u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           12u64,
                         ),
                       ],
                       130u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(65u8),
                         ),
                       ],
                       131u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           13u64,
                         ),
                       ],
                       132u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           14u64,
                         ),
                       ],
                       133u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           15u64,
                         ),
                       ],
                       134u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           16u64,
                         ),
                       ],
                       135u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           17u64,
                         ),
                       ],
                       136u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           18u64,
                         ),
                       ],
                       137u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           19u64,
                         ),
                       ],
                       138u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           20u64,
                         ),
                       ],
                       139u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           21u64,
                         ),
                       ],
                       140u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           22u64,
                         ),
                       ],
                       141u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           23u64,
                         ),
                       ],
                       142u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           24u64,
                         ),
                       ],
                       143u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           25u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(12u8),
                     ),
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(1u8),
                     ),
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(9u8),
                     ),
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(10u8),
                     ),
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(4u8),
                     ),
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(5u8),
                     ),
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(192u8),
                     ),
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(129u8),
                     ),
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(208u8),
                     ),
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(195u8),
                     ),
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(194u8),
                     ),
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(196u8),
                     ),
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(198u8),
                     ),
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(199u8),
                     ),
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(216u8),
                     ),
                   },
                   TypeKind::Custom(
                     ScryptoCustomTypeKind::Reference,
                   ),
                   TypeKind::Array {
                     element_type: LocalTypeId::SchemaLocalIndex(
                       26u64,
                     ),
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::SchemaLocalIndex(
                       29u64,
                     ),
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(209u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         30u64,
                       ),
                     ],
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::SchemaLocalIndex(
                       31u64,
                     ),
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(9u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::SchemaLocalIndex(
                       33u64,
                     ),
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(171u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         8u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         34u64,
                       ),
                     ],
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           26u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::SchemaLocalIndex(
                       36u64,
                     ),
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(133u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         37u64,
                       ),
                     ],
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::SchemaLocalIndex(
                       38u64,
                     ),
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(9u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::SchemaLocalIndex(
                       40u64,
                     ),
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         26u64,
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Custom(
                     ScryptoCustomTypeKind::Reference,
                   ),
                 ],
                 type_metadata: [
                   TypeMetadata {
                     type_name: Option::Some(
                       "GenesisHelper",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "consensus_manager",
                           "validators",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "GlobalConsensusManager",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "GenesisHelper_new_Input",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "address_reservation",
                           "consensus_manager",
                           "system_role",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "GlobalGenesisHelper",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "GenesisHelper_ingest_data_chunk_Input",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "chunk",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "GenesisDataChunk",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Validators",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Stakes",
                             ),
                             child_names: Option::Some(
                               ChildNames::NamedFields(
                                 [
                                   "accounts",
                                   "allocations",
                                 ],
                               ),
                             ),
                           },
                           2u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Resources",
                             ),
                             child_names: Option::None,
                           },
                           3u8 => TypeMetadata {
                             type_name: Option::Some(
                               "ResourceBalances",
                             ),
                             child_names: Option::Some(
                               ChildNames::NamedFields(
                                 [
                                   "accounts",
                                   "allocations",
                                 ],
                               ),
                             ),
                           },
                           4u8 => TypeMetadata {
                             type_name: Option::Some(
                               "XrdBalances",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "GenesisValidator",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "key",
                           "accept_delegated_stake",
                           "is_registered",
                           "fee_factor",
                           "metadata",
                           "owner",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "GenericMetadataValue",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "String",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Bool",
                             ),
                             child_names: Option::None,
                           },
                           2u8 => TypeMetadata {
                             type_name: Option::Some(
                               "U8",
                             ),
                             child_names: Option::None,
                           },
                           3u8 => TypeMetadata {
                             type_name: Option::Some(
                               "U32",
                             ),
                             child_names: Option::None,
                           },
                           4u8 => TypeMetadata {
                             type_name: Option::Some(
                               "U64",
                             ),
                             child_names: Option::None,
                           },
                           5u8 => TypeMetadata {
                             type_name: Option::Some(
                               "I32",
                             ),
                             child_names: Option::None,
                           },
                           6u8 => TypeMetadata {
                             type_name: Option::Some(
                               "I64",
                             ),
                             child_names: Option::None,
                           },
                           7u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Decimal",
                             ),
                             child_names: Option::None,
                           },
                           8u8 => TypeMetadata {
                             type_name: Option::Some(
                               "GlobalAddress",
                             ),
                             child_names: Option::None,
                           },
                           9u8 => TypeMetadata {
                             type_name: Option::Some(
                               "PublicKey",
                             ),
                             child_names: Option::None,
                           },
                           10u8 => TypeMetadata {
                             type_name: Option::Some(
                               "NonFungibleGlobalId",
                             ),
                             child_names: Option::None,
                           },
                           11u8 => TypeMetadata {
                             type_name: Option::Some(
                               "NonFungibleLocalId",
                             ),
                             child_names: Option::None,
                           },
                           12u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Instant",
                             ),
                             child_names: Option::None,
                           },
                           13u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Url",
                             ),
                             child_names: Option::None,
                           },
                           14u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Origin",
                             ),
                             child_names: Option::None,
                           },
                           15u8 => TypeMetadata {
                             type_name: Option::Some(
                               "PublicKeyHash",
                             ),
                             child_names: Option::None,
                           },
                           128u8 => TypeMetadata {
                             type_name: Option::Some(
                               "StringArray",
                             ),
                             child_names: Option::None,
                           },
                           129u8 => TypeMetadata {
                             type_name: Option::Some(
                               "BoolArray",
                             ),
                             child_names: Option::None,
                           },
                           130u8 => TypeMetadata {
                             type_name: Option::Some(
                               "U8Array",
                             ),
                             child_names: Option::None,
                           },
                           131u8 => TypeMetadata {
                             type_name: Option::Some(
                               "U32Array",
                             ),
                             child_names: Option::None,
                           },
                           132u8 => TypeMetadata {
                             type_name: Option::Some(
                               "U64Array",
                             ),
                             child_names: Option::None,
                           },
                           133u8 => TypeMetadata {
                             type_name: Option::Some(
                               "I32Array",
                             ),
                             child_names: Option::None,
                           },
                           134u8 => TypeMetadata {
                             type_name: Option::Some(
                               "I64Array",
                             ),
                             child_names: Option::None,
                           },
                           135u8 => TypeMetadata {
                             type_name: Option::Some(
                               "DecimalArray",
                             ),
                             child_names: Option::None,
                           },
                           136u8 => TypeMetadata {
                             type_name: Option::Some(
                               "GlobalAddressArray",
                             ),
                             child_names: Option::None,
                           },
                           137u8 => TypeMetadata {
                             type_name: Option::Some(
                               "PublicKeyArray",
                             ),
                             child_names: Option::None,
                           },
                           138u8 => TypeMetadata {
                             type_name: Option::Some(
                               "NonFungibleGlobalIdArray",
                             ),
                             child_names: Option::None,
                           },
                           139u8 => TypeMetadata {
                             type_name: Option::Some(
                               "NonFungibleLocalIdArray",
                             ),
                             child_names: Option::None,
                           },
                           140u8 => TypeMetadata {
                             type_name: Option::Some(
                               "InstantArray",
                             ),
                             child_names: Option::None,
                           },
                           141u8 => TypeMetadata {
                             type_name: Option::Some(
                               "UrlArray",
                             ),
                             child_names: Option::None,
                           },
                           142u8 => TypeMetadata {
                             type_name: Option::Some(
                               "OriginArray",
                             ),
                             child_names: Option::None,
                           },
                           143u8 => TypeMetadata {
                             type_name: Option::Some(
                               "PublicKeyHashArray",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "GlobalAccount",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "GenesisStakeAllocation",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "account_index",
                           "xrd_amount",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "GenesisResource",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "address_reservation",
                           "metadata",
                           "owner",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "Option",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "None",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Some",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "GenesisResourceAllocation",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "account_index",
                           "amount",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "GenesisHelper_wrap_up_Input",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "GlobalValidator",
                     ),
                     child_names: Option::None,
                   },
                 ],
                 type_validations: [
                   TypeValidation::None,
                   TypeValidation::Custom(
                     ScryptoCustomTypeValidation::Reference(
                       ReferenceValidation::IsGlobalTyped(
                         Option::Some(
                           PackageAddress(Reference("package_sim1pkgxxxxxxxxxcnsmgrxxxxxxxxx000746305335xxxxxxxxxxc06cl")),
                         ),
                         "ConsensusManager",
                       ),
                     ),
                   ),
                   TypeValidation::None,
                   TypeValidation::Custom(
                     ScryptoCustomTypeValidation::Reference(
                       ReferenceValidation::IsGlobalTyped(
                         Option::None,
                         "GenesisHelper",
                       ),
                     ),
                   ),
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::Custom(
                     ScryptoCustomTypeValidation::Reference(
                       ReferenceValidation::IsGlobalTyped(
                         Option::Some(
                           PackageAddress(Reference("package_sim1pkgxxxxxxxxxaccntxxxxxxxxxx000929625493xxxxxxxxxrn8jm6")),
                         ),
                         "Account",
                       ),
                     ),
                   ),
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::Custom(
                     ScryptoCustomTypeValidation::Reference(
                       ReferenceValidation::IsGlobalTyped(
                         Option::Some(
                           PackageAddress(Reference("package_sim1pkgxxxxxxxxxcnsmgrxxxxxxxxx000746305335xxxxxxxxxxc06cl")),
                         ),
                         "Validator",
                       ),
                     ),
                   ),
                 ],
               },
             ),
           ),
           lock_status: LockStatus::Locked,
         },
       )
  ├─ Partition(2): 2 changes
    ├─ Set: "name"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "Genesis Helper Package",
         ),
       )
    └─ Set: "description"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "A package that defines the logic of the genesis helper which includes various utility and helper functions used in the creation of the Babylon Genesis.",
         ),
       )
  ├─ Partition(5): 1 change
    └─ Set: Field(0)
       Value: LOCKED RoleAssignmentOwnerFieldPayload::V1(
         OwnerRoleSubstate {
           rule: AccessRule::DenyAll,
           updater: OwnerRoleUpdater::None,
         },
       )
  ├─ Partition(64): 1 change
    └─ Set: Field(0)
       Value: LOCKED PackageRoyaltyAccumulatorFieldPayload::V1(
         PackageRoyaltyAccumulatorV1 {
           royalty_vault: Vault(Own("internal_vault_sim1tpc7t2pvvdh8tgcxxanhcgxf02z3ap2p9t2thpx84uy0j074wy8pw6")),
         },
       )
  ├─ Partition(65): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "GenesisHelper", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDefinitionEntryPayload::V1(
         BlueprintDefinition {
           interface: BlueprintInterface {
             blueprint_type: BlueprintType::Outer,
             is_transient: false,
             generics: [],
             feature_set: [],
             state: IndexedStateSchema {
               fields: Option::Some(
                 Tuple(
                   PartitionDescription::Logical(
                     PartitionOffset(
                       0u8,
                     ),
                   ),
                   [
                     FieldSchema {
                       field: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("513baeda09caabaa7e73986ce927fc8bf0f3686205c5087853394ec71cb10f24")),
                           LocalTypeId::SchemaLocalIndex(
                             0u64,
                           ),
                         ),
                       ),
                       condition: Condition::Always,
                       transience: FieldTransience::NotTransient,
                     },
                   ],
                 ),
               ),
               collections: [],
               num_logical_partitions: 1u8,
             },
             functions: {
               "new" => FunctionSchema {
                 receiver: Option::None,
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("513baeda09caabaa7e73986ce927fc8bf0f3686205c5087853394ec71cb10f24")),
                     LocalTypeId::SchemaLocalIndex(
                       2u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("513baeda09caabaa7e73986ce927fc8bf0f3686205c5087853394ec71cb10f24")),
                     LocalTypeId::SchemaLocalIndex(
                       3u64,
                     ),
                   ),
                 ),
               },
               "ingest_data_chunk" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("513baeda09caabaa7e73986ce927fc8bf0f3686205c5087853394ec71cb10f24")),
                     LocalTypeId::SchemaLocalIndex(
                       4u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("513baeda09caabaa7e73986ce927fc8bf0f3686205c5087853394ec71cb10f24")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "wrap_up" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("513baeda09caabaa7e73986ce927fc8bf0f3686205c5087853394ec71cb10f24")),
                     LocalTypeId::SchemaLocalIndex(
                       41u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("513baeda09caabaa7e73986ce927fc8bf0f3686205c5087853394ec71cb10f24")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
             },
             events: {},
             types: {
               "Global_Validator" => ScopedTypeId(
                 SchemaHash(hex("513baeda09caabaa7e73986ce927fc8bf0f3686205c5087853394ec71cb10f24")),
                 LocalTypeId::SchemaLocalIndex(
                   42u64,
                 ),
               ),
               "Secp256k1PublicKey" => ScopedTypeId(
                 SchemaHash(hex("513baeda09caabaa7e73986ce927fc8bf0f3686205c5087853394ec71cb10f24")),
                 LocalTypeId::WellKnown(
                   WellKnownTypeId(209u8),
                 ),
               ),
             },
           },
           function_exports: {
             "new" => PackageExport {
               code_hash: CodeHash(hex("1e2a07262e7180bd2c7ab63bd56cd0b8da4b46b0a2c0d79aaa1e1cfa7c4c12ac")),
               export_name: "GenesisHelper_new",
             },
             "ingest_data_chunk" => PackageExport {
               code_hash: CodeHash(hex("1e2a07262e7180bd2c7ab63bd56cd0b8da4b46b0a2c0d79aaa1e1cfa7c4c12ac")),
               export_name: "GenesisHelper_ingest_data_chunk",
             },
             "wrap_up" => PackageExport {
               code_hash: CodeHash(hex("1e2a07262e7180bd2c7ab63bd56cd0b8da4b46b0a2c0d79aaa1e1cfa7c4c12ac")),
               export_name: "GenesisHelper_wrap_up",
             },
           },
           hook_exports: {},
         },
       )
  ├─ Partition(66): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "GenesisHelper", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDependenciesEntryPayload::V1(
         BlueprintDependencies([
           GlobalAddress(Reference("resource_sim1tknxxxxxxxxxradxrdxxxxxxxxx009923554798xxxxxxxxxakj8n3")),
         ]),
       )
  ├─ Partition(67): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "GenesisHelper", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionRoyaltyConfigEntryPayload::V1(
         PackageRoyaltyConfig::Disabled,
       )
  ├─ Partition(68): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "GenesisHelper", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionAuthConfigEntryPayload::V1(
         AuthConfig {
           function_auth: FunctionAuth::AccessRules(
             {
               "new" => AccessRule::DenyAll,
             },
           ),
           method_auth: MethodAuthTemplate::StaticRoleDefinition(
             StaticRoleDefinition {
               roles: RoleSpecification::Normal(
                 {
                   RoleKey("system") => RoleList([
                     RoleKey("system"),
                   ]),
                 },
               ),
               methods: {
                 MethodKey("ingest_data_chunk") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("system"),
                   ]),
                 ),
                 MethodKey("wrap_up") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("system"),
                   ]),
                 ),
               },
             },
           ),
         },
       )
  ├─ Partition(69): 1 change
    └─ Set: CodeHash(hex("1e2a07262e7180bd2c7ab63bd56cd0b8da4b46b0a2c0d79aaa1e1cfa7c4c12ac"))
       Value: LOCKED PackageCodeVmTypeEntryPayload::V1(
         PackageCodeVmTypeV1::ScryptoV1,
       )
  ├─ Partition(70): 1 change
    └─ Set: CodeHash(hex("1e2a07262e7180bd2c7ab63bd56cd0b8da4b46b0a2c0d79aaa1e1cfa7c4c12ac"))
       Value: (Hidden as longer than 10240 bytes. Hash: 6774a96cc2aef035fd6903b3598547028c7a66e7fe5b80dd0893636219c8c7c8)
  ├─ Partition(71): 1 change
    └─ Set: CodeHash(hex("1e2a07262e7180bd2c7ab63bd56cd0b8da4b46b0a2c0d79aaa1e1cfa7c4c12ac"))
       Value: (Hidden as longer than 10240 bytes. Hash: 1f7eadcd0591358358c34bf0d48b0e0ec02622aaaf699b6e36553f5ddfbcc352)
  └─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxpackgexxxxxxxxx000726633226xxxxxxxxxlk8hc9")),
               blueprint_name: "Package",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::None,
             features: [
               "package_royalty",
             ],
             generic_substitutions: [],
           },
           object_type: ObjectType::Global {
             modules: {
               AttachedModuleId::Metadata => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
               AttachedModuleId::RoleAssignment => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
             },
           },
         },
       )
├─ resource_sim1nfxxxxxxxxxxvdrwnrxxxxxxxxx004365253834xxxxxxxxxjxu0rl across 6 partitions
  ├─ Partition(1): 1 change
    └─ Set: SchemaHash(1c42c310b1a6000a83f8b918d24348c28de6abbef05b8e92e7389a6811f1c668)
       Value: KeyValueEntrySubstate::V1(
         KeyValueEntrySubstateV1 {
           value: Option::Some(
             PackageSchemaEntryPayload::V1(
               SchemaV1 {
                 type_kinds: [
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(12u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(132u8),
                       ),
                     ],
                   },
                 ],
                 type_metadata: [
                   TypeMetadata {
                     type_name: Option::Some(
                       "ValidatorOwnerBadgeData",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "name",
                           "validator",
                         ],
                       ),
                     ),
                   },
                 ],
                 type_validations: [
                   TypeValidation::None,
                 ],
               },
             ),
           ),
           lock_status: LockStatus::Locked,
         },
       )
  ├─ Partition(2): 4 changes
    ├─ Set: "name"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "Validator Owner Badges",
         ),
       )
    ├─ Set: "description"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "Badges created by the Radix system that provide individual control over the validator components created for validator node-runners.",
         ),
       )
    ├─ Set: "icon_url"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::Url(
           Url("https://assets.radixdlt.com/icons/icon-validator_owner_badge.png"),
         ),
       )
    └─ Set: "tags"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::StringArray(
           [
             "badge",
             "validator",
           ],
         ),
       )
  ├─ Partition(5): 1 change
    └─ Set: Field(0)
       Value: LOCKED RoleAssignmentOwnerFieldPayload::V1(
         OwnerRoleSubstate {
           rule: AccessRule::Protected(
             AccessRuleNode::ProofRule(
               ProofRule::Require(
                 ResourceOrNonFungible::NonFungible(
                   NonFungibleGlobalId {
                     resource_address: ResourceAddress(Reference("resource_sim1nfxxxxxxxxxxglcllrxxxxxxxxx002350006550xxxxxxxxxk5870l")),
                     local_id: NonFungibleLocalId("[68c44e9d432e71c51e2a2ac285897b372328d8b31374ff29131bc6b25b6bd070]"),
                   },
                 ),
               ),
             ),
           ),
           updater: OwnerRoleUpdater::None,
         },
       )
  ├─ Partition(6): 14 changes
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("depositor") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::AllowAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("burner_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("freezer") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("freezer_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("burner") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("recaller") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("withdrawer") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::AllowAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("non_fungible_data_updater_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("recaller_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("non_fungible_data_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("depositor_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("minter") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::Protected(
           AccessRuleNode::ProofRule(
             ProofRule::Require(
               ResourceOrNonFungible::NonFungible(
                 NonFungibleGlobalId {
                   resource_address: ResourceAddress(Reference("resource_sim1nfxxxxxxxxxxpkcllrxxxxxxxxx003652646977xxxxxxxxxla870l")),
                   local_id: NonFungibleLocalId("[9f47db80c483508e9d33d2df83706b67803244262c4494eb817039c8596d7f80]"),
                 },
               ),
             ),
           ),
         ),
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("withdrawer_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    └─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("minter_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
  ├─ Partition(64): 3 changes
    ├─ Set: Field(0)
       Value: LOCKED NonFungibleResourceManagerIdTypeFieldPayload::V1(
         NonFungibleIdType::Bytes,
       )
    ├─ Set: Field(1)
       Value: LOCKED NonFungibleResourceManagerMutableFieldsFieldPayload::V1(
         NonFungibleResourceManagerMutableFieldsV1 {
           mutable_field_index: {},
         },
       )
    └─ Set: Field(2)
       Value: UNLOCKED NonFungibleResourceManagerTotalSupplyFieldPayload::V1(
         Decimal("0"),
       )
  └─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxresrcexxxxxxxxx000538436477xxxxxxxxxaj0zg9")),
               blueprint_name: "NonFungibleResourceManager",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::None,
             features: [
               "track_total_supply",
               "mint",
             ],
             generic_substitutions: [
               GenericSubstitution::Local(
                 ScopedTypeId(
                   SchemaHash(hex("1c42c310b1a6000a83f8b918d24348c28de6abbef05b8e92e7389a6811f1c668")),
                   LocalTypeId::SchemaLocalIndex(
                     0u64,
                   ),
                 ),
               ),
             ],
           },
           object_type: ObjectType::Global {
             modules: {
               AttachedModuleId::RoleAssignment => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
               AttachedModuleId::Metadata => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
             },
           },
         },
       )
├─ component_sim1cptxxxxxxxxxgenssxxxxxxxxxx000977302539xxxxxxxxxkjv3q6 across 4 partitions
  ├─ Partition(2): 2 changes
    ├─ Set: "name"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "Genesis Helper",
         ),
       )
    └─ Set: "description"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "A component with various utility and helper methods used in the creation of the Babylon Genesis.",
         ),
       )
  ├─ Partition(5): 1 change
    └─ Set: Field(0)
       Value: UNLOCKED RoleAssignmentOwnerFieldPayload::V1(
         OwnerRoleSubstate {
           rule: AccessRule::Protected(
             AccessRuleNode::ProofRule(
               ProofRule::Require(
                 ResourceOrNonFungible::NonFungible(
                   NonFungibleGlobalId {
                     resource_address: ResourceAddress(Reference("resource_sim1nfxxxxxxxxxxsystxnxxxxxxxxx002683325037xxxxxxxxxw002k0")),
                     local_id: NonFungibleLocalId("#0#"),
                   },
                 ),
               ),
             ),
           ),
           updater: OwnerRoleUpdater::Owner,
         },
       )
  ├─ Partition(64): 1 change
    └─ Set: Field(0)
       Value: UNLOCKED GenesisHelper {
         consensus_manager: GlobalConsensusManager(Reference("consensusmanager_sim1scxxxxxxxxxxcnsmgrxxxxxxxxx000999665565xxxxxxxxxxc06cl")),
         validators: KeyValueStore(Own("internal_keyvaluestore_sim1kpkxjgh28rp2e2fudwfx3ck9sau86xzt3ckc7gnl25rd6dlt6cr7a9")),
       }
  └─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxgenssxxxxxxxxxx004372642773xxxxxxxxxkjv3q6")),
               blueprint_name: "GenesisHelper",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::None,
             features: [],
             generic_substitutions: [],
           },
           object_type: ObjectType::Global {
             modules: {
               AttachedModuleId::Metadata => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
               AttachedModuleId::RoleAssignment => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
             },
           },
         },
       )
├─ package_sim1pkgxxxxxxxxxtxtrakxxxxxxxxx000595975309xxxxxxxxx4d5zd2 across 10 partitions
  ├─ Partition(1): 1 change
    └─ Set: SchemaHash(bd71c021e525c608eaf7291c8c0eb2519993241a8e8d6d58c62e3ae056535592)
       Value: KeyValueEntrySubstate::V1(
         KeyValueEntrySubstateV1 {
           value: Option::Some(
             PackageSchemaEntryPayload::V1(
               SchemaV1 {
                 type_kinds: [
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(7u8),
                     ),
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           2u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [],
                       2u8 => [],
                     },
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           4u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(10u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(7u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(7u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(7u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(10u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(171u8),
                       ),
                     ],
                   },
                 ],
                 type_metadata: [
                   TypeMetadata {
                     type_name: Option::Some(
                       "Hash",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "TransactionStatus",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "V1",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "TransactionStatusV1",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "CommittedSuccess",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "CommittedFailure",
                             ),
                             child_names: Option::None,
                           },
                           2u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Cancelled",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "TransactionTrackerSubstate",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "V1",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "TransactionTrackerSubstateV1",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "start_epoch",
                           "start_partition",
                           "partition_range_start_inclusive",
                           "partition_range_end_inclusive",
                           "epochs_per_partition",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "TransactionTrackerCreateInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "address_reservation",
                         ],
                       ),
                     ),
                   },
                 ],
                 type_validations: [
                   TypeValidation::Array(
                     LengthValidation {
                       min: Option::Some(
                         32u32,
                       ),
                       max: Option::Some(
                         32u32,
                       ),
                     },
                   ),
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                 ],
               },
             ),
           ),
           lock_status: LockStatus::Locked,
         },
       )
  ├─ Partition(5): 1 change
    └─ Set: Field(0)
       Value: LOCKED RoleAssignmentOwnerFieldPayload::V1(
         OwnerRoleSubstate {
           rule: AccessRule::DenyAll,
           updater: OwnerRoleUpdater::None,
         },
       )
  ├─ Partition(64): 1 change
    └─ Set: Field(0)
       Value: LOCKED PackageRoyaltyAccumulatorFieldPayload::V1(
         PackageRoyaltyAccumulatorV1 {
           royalty_vault: Vault(Own("internal_vault_sim1tzvsmlwapqk6cgurty0guev59jnkhdxce65sjs4anxu6uzv602xfjr")),
         },
       )
  ├─ Partition(65): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "TransactionTracker", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: (Hidden as longer than 10240 bytes. Hash: 8c42621855b766b9137c800ad5c320113ec5885931323fb25aa8da1a0ddd05e3)
  ├─ Partition(66): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "TransactionTracker", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDependenciesEntryPayload::V1(
         BlueprintDependencies([]),
       )
  ├─ Partition(67): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "TransactionTracker", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionRoyaltyConfigEntryPayload::V1(
         PackageRoyaltyConfig::Disabled,
       )
  ├─ Partition(68): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "TransactionTracker", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionAuthConfigEntryPayload::V1(
         AuthConfig {
           function_auth: FunctionAuth::AccessRules(
             {
               "create" => AccessRule::Protected(
                 AccessRuleNode::ProofRule(
                   ProofRule::Require(
                     ResourceOrNonFungible::NonFungible(
                       NonFungibleGlobalId {
                         resource_address: ResourceAddress(Reference("resource_sim1nfxxxxxxxxxxsystxnxxxxxxxxx002683325037xxxxxxxxxw002k0")),
                         local_id: NonFungibleLocalId("#0#"),
                       },
                     ),
                   ),
                 ),
               ),
             },
           ),
           method_auth: MethodAuthTemplate::AllowAll,
         },
       )
  ├─ Partition(69): 1 change
    └─ Set: CodeHash(hex("239b965359bd589fba73f5871333bd09ec574f5bae0f5c44441fa2980df44d32"))
       Value: LOCKED PackageCodeVmTypeEntryPayload::V1(
         PackageCodeVmTypeV1::Native,
       )
  ├─ Partition(70): 1 change
    └─ Set: CodeHash(hex("239b965359bd589fba73f5871333bd09ec574f5bae0f5c44441fa2980df44d32"))
       Value: LOCKED PackageCodeOriginalCodeEntryPayload::V1(
         PackageCodeOriginalCodeV1(hex("000000000000000e")),
       )
  └─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxpackgexxxxxxxxx000726633226xxxxxxxxxlk8hc9")),
               blueprint_name: "Package",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::None,
             features: [
               "package_royalty",
             ],
             generic_substitutions: [],
           },
           object_type: ObjectType::Global {
             modules: {
               AttachedModuleId::Metadata => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
               AttachedModuleId::RoleAssignment => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
             },
           },
         },
       )
├─ transactiontracker_sim1stxxxxxxxxxxtxtrakxxxxxxxxx006844685494xxxxxxxxx4d5zd2 across 3 partitions
  ├─ Partition(5): 1 change
    └─ Set: Field(0)
       Value: LOCKED RoleAssignmentOwnerFieldPayload::V1(
         OwnerRoleSubstate {
           rule: AccessRule::DenyAll,
           updater: OwnerRoleUpdater::None,
         },
       )
  ├─ Partition(64): 1 change
    └─ Set: Field(0)
       Value: UNLOCKED TransactionTrackerSubstate::V1(
         TransactionTrackerSubstateV1 {
           start_epoch: 1u64,
           start_partition: 65u8,
           partition_range_start_inclusive: 65u8,
           partition_range_end_inclusive: 255u8,
           epochs_per_partition: 100u64,
         },
       )
  └─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxtxtrakxxxxxxxxx000595975309xxxxxxxxx4d5zd2")),
               blueprint_name: "TransactionTracker",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::None,
             features: [],
             generic_substitutions: [],
           },
           object_type: ObjectType::Global {
             modules: {
               AttachedModuleId::RoleAssignment => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
               AttachedModuleId::Metadata => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
             },
           },
         },
       )
├─ component_sim1cptxxxxxxxxxfaucetxxxxxxxxx000527798379xxxxxxxxxhkrefh across 4 partitions
  ├─ Partition(2): 2 changes
    ├─ Set: "name"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "Test Faucet",
         ),
       )
    └─ Set: "description"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "A simple faucet for distributing tokens for testing purposes.",
         ),
       )
  ├─ Partition(5): 1 change
    └─ Set: Field(0)
       Value: LOCKED RoleAssignmentOwnerFieldPayload::V1(
         OwnerRoleSubstate {
           rule: AccessRule::DenyAll,
           updater: OwnerRoleUpdater::None,
         },
       )
  ├─ Partition(64): 1 change
    └─ Set: Field(0)
       Value: UNLOCKED Faucet {
         vault: Vault(Own("internal_vault_sim1trn7clzr3qmq2zhwr77mdenksxswf00yeh8tn3vyzesg4kr3ktm0sm")),
         transactions: KeyValueStore(Own("internal_keyvaluestore_sim1krqvh6a49s57c7rg0n9xvdaqq74342wj6jvta0y7kzkrfcwsfjkqj6")),
       }
  └─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxfaucetxxxxxxxxx000034355863xxxxxxxxxhkrefh")),
               blueprint_name: "Faucet",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::None,
             features: [],
             generic_substitutions: [],
           },
           object_type: ObjectType::Global {
             modules: {
               AttachedModuleId::Metadata => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
               AttachedModuleId::RoleAssignment => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
             },
           },
         },
       )
├─ internal_vault_sim1tz3pl56e29v3yz7gps0vtl77m8yuj0zrclfthr95uwe35fz7jyjmhh across 2 partitions
  ├─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxresrcexxxxxxxxx000538436477xxxxxxxxxaj0zg9")),
               blueprint_name: "FungibleVault",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::Some {
               outer_object: GlobalAddress(Reference("resource_sim1tknxxxxxxxxxradxrdxxxxxxxxx009923554798xxxxxxxxxakj8n3")),
             },
             features: [],
             generic_substitutions: [],
           },
           object_type: ObjectType::Owned,
         },
       )
  └─ Partition(64): 1 change
    └─ Set: Field(0)
       Value: UNLOCKED FungibleVaultBalanceFieldPayload::V1(
         LiquidFungibleResource(Decimal("0")),
       )
├─ internal_vault_sim1tzqarnh06wwrmpt092qeaxkfw7xddkn6pk3m9q2mfshmtc9x5r65zw across 2 partitions
  ├─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxresrcexxxxxxxxx000538436477xxxxxxxxxaj0zg9")),
               blueprint_name: "FungibleVault",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::Some {
               outer_object: GlobalAddress(Reference("resource_sim1tknxxxxxxxxxradxrdxxxxxxxxx009923554798xxxxxxxxxakj8n3")),
             },
             features: [],
             generic_substitutions: [],
           },
           object_type: ObjectType::Owned,
         },
       )
  └─ Partition(64): 1 change
    └─ Set: Field(0)
       Value: UNLOCKED FungibleVaultBalanceFieldPayload::V1(
         LiquidFungibleResource(Decimal("0")),
       )
├─ internal_vault_sim1tzed638ulmf60n36xc7pt6cur8w0jj6de5ehwfe2y7hkvm8d0e3tqy across 2 partitions
  ├─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxresrcexxxxxxxxx000538436477xxxxxxxxxaj0zg9")),
               blueprint_name: "FungibleVault",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::Some {
               outer_object: GlobalAddress(Reference("resource_sim1tknxxxxxxxxxradxrdxxxxxxxxx009923554798xxxxxxxxxakj8n3")),
             },
             features: [],
             generic_substitutions: [],
           },
           object_type: ObjectType::Owned,
         },
       )
  └─ Partition(64): 1 change
    └─ Set: Field(0)
       Value: UNLOCKED FungibleVaultBalanceFieldPayload::V1(
         LiquidFungibleResource(Decimal("0")),
       )
├─ internal_vault_sim1trr3vxuy5m4jz0df323tlsvkfmsv6glss2k7uvj794tyg8e8x7t2pc across 2 partitions
  ├─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxresrcexxxxxxxxx000538436477xxxxxxxxxaj0zg9")),
               blueprint_name: "FungibleVault",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::Some {
               outer_object: GlobalAddress(Reference("resource_sim1tknxxxxxxxxxradxrdxxxxxxxxx009923554798xxxxxxxxxakj8n3")),
             },
             features: [],
             generic_substitutions: [],
           },
           object_type: ObjectType::Owned,
         },
       )
  └─ Partition(64): 1 change
    └─ Set: Field(0)
       Value: UNLOCKED FungibleVaultBalanceFieldPayload::V1(
         LiquidFungibleResource(Decimal("0")),
       )
├─ internal_vault_sim1tpxzhhq9kxkxlaken2q7l7q977f2fnv62fexklnwwsw8yp4vmsptmh across 2 partitions
  ├─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxresrcexxxxxxxxx000538436477xxxxxxxxxaj0zg9")),
               blueprint_name: "FungibleVault",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::Some {
               outer_object: GlobalAddress(Reference("resource_sim1tknxxxxxxxxxradxrdxxxxxxxxx009923554798xxxxxxxxxakj8n3")),
             },
             features: [],
             generic_substitutions: [],
           },
           object_type: ObjectType::Owned,
         },
       )
  └─ Partition(64): 1 change
    └─ Set: Field(0)
       Value: UNLOCKED FungibleVaultBalanceFieldPayload::V1(
         LiquidFungibleResource(Decimal("0")),
       )
├─ internal_vault_sim1trp8uwdej0t4junelqa4fjtnzhjeyxt5gca5p927hagjjas6whx8sy across 2 partitions
  ├─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxresrcexxxxxxxxx000538436477xxxxxxxxxaj0zg9")),
               blueprint_name: "FungibleVault",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::Some {
               outer_object: GlobalAddress(Reference("resource_sim1tknxxxxxxxxxradxrdxxxxxxxxx009923554798xxxxxxxxxakj8n3")),
             },
             features: [],
             generic_substitutions: [],
           },
           object_type: ObjectType::Owned,
         },
       )
  └─ Partition(64): 1 change
    └─ Set: Field(0)
       Value: UNLOCKED FungibleVaultBalanceFieldPayload::V1(
         LiquidFungibleResource(Decimal("0")),
       )
├─ internal_vault_sim1tpc7t2pvvdh8tgcxxanhcgxf02z3ap2p9t2thpx84uy0j074wy8pw6 across 2 partitions
  ├─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxresrcexxxxxxxxx000538436477xxxxxxxxxaj0zg9")),
               blueprint_name: "FungibleVault",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::Some {
               outer_object: GlobalAddress(Reference("resource_sim1tknxxxxxxxxxradxrdxxxxxxxxx009923554798xxxxxxxxxakj8n3")),
             },
             features: [],
             generic_substitutions: [],
           },
           object_type: ObjectType::Owned,
         },
       )
  └─ Partition(64): 1 change
    └─ Set: Field(0)
       Value: UNLOCKED FungibleVaultBalanceFieldPayload::V1(
         LiquidFungibleResource(Decimal("0")),
       )
├─ internal_vault_sim1tpsesv77qvw782kknjks9g3x2msg8cc8ldshk28pkf6m6lkhun3sel across 2 partitions
  ├─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxresrcexxxxxxxxx000538436477xxxxxxxxxaj0zg9")),
               blueprint_name: "FungibleVault",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::Some {
               outer_object: GlobalAddress(Reference("resource_sim1tknxxxxxxxxxradxrdxxxxxxxxx009923554798xxxxxxxxxakj8n3")),
             },
             features: [],
             generic_substitutions: [],
           },
           object_type: ObjectType::Owned,
         },
       )
  └─ Partition(64): 1 change
    └─ Set: Field(0)
       Value: UNLOCKED FungibleVaultBalanceFieldPayload::V1(
         LiquidFungibleResource(Decimal("0")),
       )
├─ internal_keyvaluestore_sim1kpkxjgh28rp2e2fudwfx3ck9sau86xzt3ckc7gnl25rd6dlt6cr7a9 across 1 partitions
  └─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::KeyValueStore(
         KeyValueStoreInfo {
           generic_substitutions: KeyValueStoreGenericSubstitutions {
             key_generic_substitution: GenericSubstitution::Remote(
               BlueprintTypeIdentifier {
                 package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxgenssxxxxxxxxxx004372642773xxxxxxxxxkjv3q6")),
                 blueprint_name: "GenesisHelper",
                 type_name: "Secp256k1PublicKey",
               },
             ),
             value_generic_substitution: GenericSubstitution::Remote(
               BlueprintTypeIdentifier {
                 package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxgenssxxxxxxxxxx004372642773xxxxxxxxxkjv3q6")),
                 blueprint_name: "GenesisHelper",
                 type_name: "Global_Validator",
               },
             ),
             allow_ownership: true,
           },
         },
       )
├─ internal_vault_sim1tzvsmlwapqk6cgurty0guev59jnkhdxce65sjs4anxu6uzv602xfjr across 2 partitions
  ├─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxresrcexxxxxxxxx000538436477xxxxxxxxxaj0zg9")),
               blueprint_name: "FungibleVault",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::Some {
               outer_object: GlobalAddress(Reference("resource_sim1tknxxxxxxxxxradxrdxxxxxxxxx009923554798xxxxxxxxxakj8n3")),
             },
             features: [],
             generic_substitutions: [],
           },
           object_type: ObjectType::Owned,
         },
       )
  └─ Partition(64): 1 change
    └─ Set: Field(0)
       Value: UNLOCKED FungibleVaultBalanceFieldPayload::V1(
         LiquidFungibleResource(Decimal("0")),
       )
├─ internal_vault_sim1trn7clzr3qmq2zhwr77mdenksxswf00yeh8tn3vyzesg4kr3ktm0sm across 2 partitions
  ├─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxresrcexxxxxxxxx000538436477xxxxxxxxxaj0zg9")),
               blueprint_name: "FungibleVault",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::Some {
               outer_object: GlobalAddress(Reference("resource_sim1tknxxxxxxxxxradxrdxxxxxxxxx009923554798xxxxxxxxxakj8n3")),
             },
             features: [],
             generic_substitutions: [],
           },
           object_type: ObjectType::Owned,
         },
       )
  └─ Partition(64): 1 change
    └─ Set: Field(0)
       Value: UNLOCKED FungibleVaultBalanceFieldPayload::V1(
         LiquidFungibleResource(Decimal("0")),
       )
└─ internal_keyvaluestore_sim1krqvh6a49s57c7rg0n9xvdaqq74342wj6jvta0y7kzkrfcwsfjkqj6 across 1 partitions
  └─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::KeyValueStore(
         KeyValueStoreInfo {
           generic_substitutions: KeyValueStoreGenericSubstitutions {
             key_generic_substitution: GenericSubstitution::Remote(
               BlueprintTypeIdentifier {
                 package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxfaucetxxxxxxxxx000034355863xxxxxxxxxhkrefh")),
                 blueprint_name: "Faucet",
                 type_name: "Hash",
               },
             ),
             value_generic_substitution: GenericSubstitution::Remote(
               BlueprintTypeIdentifier {
                 package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxfaucetxxxxxxxxx000034355863xxxxxxxxxhkrefh")),
                 blueprint_name: "Faucet",
                 type_name: "Epoch",
               },
             ),
             allow_ownership: true,
           },
         },
       )

OUTPUTS: 23
├─ Tuple(
     Reference("resource_sim1tknxxxxxxxxxradxrdxxxxxxxxx009923554798xxxxxxxxxakj8n3"),
     Own("internal_component_sim1lqp4f72g6ne28vl799facdp46uk3zk6tk65fqp7uyprf4u3ums63x2"),
   )
├─ Reference("resource_sim1nfxxxxxxxxxxpkcllrxxxxxxxxx003652646977xxxxxxxxxla870l")
├─ Reference("resource_sim1nfxxxxxxxxxxglcllrxxxxxxxxx002350006550xxxxxxxxxk5870l")
├─ Reference("resource_sim1nfxxxxxxxxxxpkgwnrxxxxxxxxx002558553505xxxxxxxxxlah0rl")
├─ Reference("resource_sim1nfxxxxxxxxxxdntwnrxxxxxxxxx002876444928xxxxxxxxxnc50rl")
├─ Reference("package_sim1pkgxxxxxxxxxdntyxxxxxxxxxxx008560783089xxxxxxxxxnc59k6")
├─ Reference("package_sim1pkgxxxxxxxxxcnsmgrxxxxxxxxx000746305335xxxxxxxxxxc06cl")
├─ Reference("resource_sim1nfxxxxxxxxxxaccwnrxxxxxxxxx006664022062xxxxxxxxxrn80rl")
├─ Reference("package_sim1pkgxxxxxxxxxaccntxxxxxxxxxx000929625493xxxxxxxxxrn8jm6")
├─ Reference("package_sim1pkgxxxxxxxxxcntrlrxxxxxxxxx000648572295xxxxxxxxxxc5z0l")
├─ Reference("package_sim1pkgxxxxxxxxxplxxxxxxxxxxxxx020379220524xxxxxxxxxl5e8k6")
├─ Reference("resource_sim1nfxxxxxxxxxxsecpsgxxxxxxxxx004638826440xxxxxxxxxwj8qq5")
├─ Reference("resource_sim1nfxxxxxxxxxxed25sgxxxxxxxxx002236757237xxxxxxxxx8x44q5")
├─ Reference("resource_sim1nfxxxxxxxxxxsystxnxxxxxxxxx002683325037xxxxxxxxxw002k0")
├─ Reference("package_sim1pkgxxxxxxxxxfaucetxxxxxxxxx000034355863xxxxxxxxxhkrefh")
├─ Reference("package_sim1pkgxxxxxxxxxgenssxxxxxxxxxx004372642773xxxxxxxxxkjv3q6")
├─ Unit
├─ Reference("component_sim1cptxxxxxxxxxgenssxxxxxxxxxx000977302539xxxxxxxxxkjv3q6")
├─ Reference("package_sim1pkgxxxxxxxxxtxtrakxxxxxxxxx000595975309xxxxxxxxx4d5zd2")
├─ Reference("transactiontracker_sim1stxxxxxxxxxxtxtrakxxxxxxxxx006844685494xxxxxxxxx4d5zd2")
├─ Own("internal_component_sim1lp3wz27la8xuakl8gtrmyd85wulgpfg7nkd5dvqjxqh2n92kkklnpu")
├─ None
└─ Reference("component_sim1cptxxxxxxxxxfaucetxxxxxxxxx000527798379xxxxxxxxxhkrefh")

BALANCE CHANGES: 0

NEW ENTITIES: 22
├─ Package: package_sim1pkgxxxxxxxxxdntyxxxxxxxxxxx008560783089xxxxxxxxxnc59k6
├─ Package: package_sim1pkgxxxxxxxxxcnsmgrxxxxxxxxx000746305335xxxxxxxxxxc06cl
├─ Package: package_sim1pkgxxxxxxxxxaccntxxxxxxxxxx000929625493xxxxxxxxxrn8jm6
├─ Package: package_sim1pkgxxxxxxxxxcntrlrxxxxxxxxx000648572295xxxxxxxxxxc5z0l
├─ Package: package_sim1pkgxxxxxxxxxplxxxxxxxxxxxxx020379220524xxxxxxxxxl5e8k6
├─ Package: package_sim1pkgxxxxxxxxxfaucetxxxxxxxxx000034355863xxxxxxxxxhkrefh
├─ Package: package_sim1pkgxxxxxxxxxgenssxxxxxxxxxx004372642773xxxxxxxxxkjv3q6
└─ Package: package_sim1pkgxxxxxxxxxtxtrakxxxxxxxxx000595975309xxxxxxxxx4d5zd2
├─ Component: consensusmanager_sim1scxxxxxxxxxxcnsmgrxxxxxxxxx000999665565xxxxxxxxxxc06cl
├─ Component: component_sim1cptxxxxxxxxxgenssxxxxxxxxxx000977302539xxxxxxxxxkjv3q6
├─ Component: transactiontracker_sim1stxxxxxxxxxxtxtrakxxxxxxxxx006844685494xxxxxxxxx4d5zd2
└─ Component: component_sim1cptxxxxxxxxxfaucetxxxxxxxxx000527798379xxxxxxxxxhkrefh
├─ Resource: resource_sim1tknxxxxxxxxxradxrdxxxxxxxxx009923554798xxxxxxxxxakj8n3
├─ Resource: resource_sim1nfxxxxxxxxxxpkcllrxxxxxxxxx003652646977xxxxxxxxxla870l
├─ Resource: resource_sim1nfxxxxxxxxxxglcllrxxxxxxxxx002350006550xxxxxxxxxk5870l
├─ Resource: resource_sim1nfxxxxxxxxxxpkgwnrxxxxxxxxx002558553505xxxxxxxxxlah0rl
├─ Resource: resource_sim1nfxxxxxxxxxxdntwnrxxxxxxxxx002876444928xxxxxxxxxnc50rl
├─ Resource: resource_sim1nfxxxxxxxxxxaccwnrxxxxxxxxx006664022062xxxxxxxxxrn80rl
├─ Resource: resource_sim1nfxxxxxxxxxxsecpsgxxxxxxxxx004638826440xxxxxxxxxwj8qq5
├─ Resource: resource_sim1nfxxxxxxxxxxed25sgxxxxxxxxx002236757237xxxxxxxxx8x44q5
├─ Resource: resource_sim1nfxxxxxxxxxxsystxnxxxxxxxxx002683325037xxxxxxxxxw002k0
└─ Resource: resource_sim1nfxxxxxxxxxxvdrwnrxxxxxxxxx004365253834xxxxxxxxxjxu0rl