TRANSACTION STATUS: COMMITTED SUCCESS

TRANSACTION COST: 0 XRD
├─ Network execution: 0 XRD, 0 execution cost units
├─ Network finalization: 0 XRD, 0 finalization cost units
├─ Tip: 0 XRD
├─ Network Storage: 0 XRD
└─ Royalties: 0 XRD

LOGS: 0

EVENTS: 11
├─ Emitter: Method { node: resource_sim1tknxxxxxxxxxradxrdxxxxxxxxx009923554798xxxxxxxxxakj8n3, module_id: Main }
   Event: VaultCreationEvent {
     vault_id: NodeId(hex("580dbc05796a016a0146e805fdeb82bfff15f1b2867af0e980c51bc1332c")),
   }
├─ Emitter: Method { node: resource_sim1tknxxxxxxxxxradxrdxxxxxxxxx009923554798xxxxxxxxxakj8n3, module_id: Main }
   Event: VaultCreationEvent {
     vault_id: NodeId(hex("5873cfcc9a54dec715c9d3b34f5a691b93ccd3ea194996b461749cc4d432")),
   }
├─ Emitter: Method { node: resource_sim1t5l4s99hpc6vvskktu2uy9egk86tszjnnez62zfu9t7z7tsq3a0vgu, module_id: Main }
   Event: VaultCreationEvent {
     vault_id: NodeId(hex("585199bfa39f1f5734c3f50898aa57d215a817a4bb21bf70c80ff7714fe0")),
   }
├─ Emitter: Method { node: resource_sim1t5l4s99hpc6vvskktu2uy9egk86tszjnnez62zfu9t7z7tsq3a0vgu, module_id: Main }
   Event: VaultCreationEvent {
     vault_id: NodeId(hex("58568f9a6897f20eb4cb3ac0ec30307ab38bc816918fc4c118848772d839")),
   }
├─ Emitter: Method { node: resource_sim1nfxxxxxxxxxxvdrwnrxxxxxxxxx004365253834xxxxxxxxxjxu0rl, module_id: Main }
   Event: MintNonFungibleResourceEvent {
     ids: [
       NonFungibleLocalId("[83fa5c16ce90e2ddbbc56c997efc828aa047737dc30fe8907edc1ea67954]"),
     ],
   }
├─ Emitter: Method { node: resource_sim1nfxxxxxxxxxxvdrwnrxxxxxxxxx004365253834xxxxxxxxxjxu0rl, module_id: Main }
   Event: VaultCreationEvent {
     vault_id: NodeId(hex("984b3510b558cac90a97d16be9cac4d2d8210b82b862e512623b93843abf")),
   }
├─ Emitter: Method { node: internal_vault_sim1np9n2y94tr9vjz5h6947njky6tvzzzuzhp3w2ynz8wfcgw4lveyqfz, module_id: Main }
   Event: DepositEvent {
     ids: [
       NonFungibleLocalId("[83fa5c16ce90e2ddbbc56c997efc828aa047737dc30fe8907edc1ea67954]"),
     ],
   }
├─ Emitter: Method { node: account_sim16yt9mmnctyjwwss6plgyrzse6hdwasu4l4g94y4ql5c30epg07y9ef, module_id: Main }
   Event: DepositEvent::NonFungible(
     ResourceAddress(Reference("resource_sim1nfxxxxxxxxxxvdrwnrxxxxxxxxx004365253834xxxxxxxxxjxu0rl")),
     [
       NonFungibleLocalId("[83fa5c16ce90e2ddbbc56c997efc828aa047737dc30fe8907edc1ea67954]"),
     ],
   )
├─ Emitter: Method { node: validator_sim1s0a9c9kwjr3dmw79djvhalyz32sywumacv873yr7ms02v725fydvm0, module_id: Main }
   Event: RegisterValidatorEvent
├─ Emitter: Method { node: validator_sim1s0a9c9kwjr3dmw79djvhalyz32sywumacv873yr7ms02v725fydvm0, module_id: Main }
   Event: UpdateAcceptingStakeDelegationStateEvent {
     accepts_delegation: true,
   }
└─ Emitter: Method { node: validator_sim1s0a9c9kwjr3dmw79djvhalyz32sywumacv873yr7ms02v725fydvm0, module_id: Metadata }
   Event: SetMetadataEvent {
     key: "url",
     value: GenericMetadataValue::Url(
       Url("http://test.local?validator=000000000000000000000000000000000000000000000000000000000000000000"),
     ),
   }

STATE UPDATES: 13 entities
├─ component_sim1cptxxxxxxxxxgenssxxxxxxxxxx000977302539xxxxxxxxxkjv3q6 across 1 partitions
  └─ Partition(64): 1 change
    └─ Set: Field(0)
       Value: UNLOCKED GenesisHelper {
         consensus_manager: GlobalConsensusManager(Reference("consensusmanager_sim1scxxxxxxxxxxcnsmgrxxxxxxxxx000999665565xxxxxxxxxxc06cl")),
         validators: KeyValueStore(Own("internal_keyvaluestore_sim1kpkxjgh28rp2e2fudwfx3ck9sau86xzt3ckc7gnl25rd6dlt6cr7a9")),
       }
├─ account_sim16yt9mmnctyjwwss6plgyrzse6hdwasu4l4g94y4ql5c30epg07y9ef across 6 partitions
  ├─ Partition(2): 2 changes
    ├─ Set: "owner_badge"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::NonFungibleLocalId(
           NonFungibleLocalId("[d1165dee785924e7421a0fd0418a19d5daeec395fd505a92a0fd3117e428]"),
         ),
       )
    └─ Set: "owner_keys"
       Value: UNLOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::PublicKeyHashArray(
           [
             PublicKeyHash::Secp256k1(
               Secp256k1PublicKeyHash(hex("165dee785924e7421a0fd0418a19d5daeec395fd505a92a0fd3117e428")),
             ),
           ],
         ),
       )
  ├─ Partition(5): 1 change
    └─ Set: Field(0)
       Value: UNLOCKED RoleAssignmentOwnerFieldPayload::V1(
         OwnerRoleSubstate {
           rule: AccessRule::Protected(
             AccessRuleNode::ProofRule(
               ProofRule::Require(
                 ResourceOrNonFungible::NonFungible(
                   NonFungibleGlobalId {
                     resource_address: ResourceAddress(Reference("resource_sim1nfxxxxxxxxxxsecpsgxxxxxxxxx004638826440xxxxxxxxxwj8qq5")),
                     local_id: NonFungibleLocalId("[165dee785924e7421a0fd0418a19d5daeec395fd505a92a0fd3117e428]"),
                   },
                 ),
               ),
             ),
           ),
           updater: OwnerRoleUpdater::Object,
         },
       )
  ├─ Partition(6): 1 change
    └─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("securify") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::Protected(
           AccessRuleNode::ProofRule(
             ProofRule::Require(
               ResourceOrNonFungible::NonFungible(
                 NonFungibleGlobalId {
                   resource_address: ResourceAddress(Reference("resource_sim1nfxxxxxxxxxxsecpsgxxxxxxxxx004638826440xxxxxxxxxwj8qq5")),
                   local_id: NonFungibleLocalId("[165dee785924e7421a0fd0418a19d5daeec395fd505a92a0fd3117e428]"),
                 },
               ),
             ),
           ),
         ),
       )
  ├─ Partition(64): 1 change
    └─ Set: Field(0)
       Value: UNLOCKED AccountDepositRuleFieldPayload::V1(
         AccountSubstate {
           default_deposit_rule: DefaultDepositRule::Accept,
         },
       )
  ├─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxaccntxxxxxxxxxx000929625493xxxxxxxxxrn8jm6")),
               blueprint_name: "Account",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::None,
             features: [],
             generic_substitutions: [],
           },
           object_type: ObjectType::Global {
             modules: {
               AttachedModuleId::RoleAssignment => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
               AttachedModuleId::Metadata => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
             },
           },
         },
       )
  └─ Partition(65): 1 change
    └─ Set: ResourceAddress(Reference("resource_sim1nfxxxxxxxxxxvdrwnrxxxxxxxxx004365253834xxxxxxxxxjxu0rl"))
       Value: UNLOCKED AccountResourceVaultEntryPayload::V1(
         Vault(Own("internal_vault_sim1np9n2y94tr9vjz5h6947njky6tvzzzuzhp3w2ynz8wfcgw4lveyqfz")),
       )
├─ validator_sim1s0a9c9kwjr3dmw79djvhalyz32sywumacv873yr7ms02v725fydvm0 across 4 partitions
  ├─ Partition(2): 4 changes
    ├─ Set: "url"
       Value: UNLOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::Url(
           Url("http://test.local?validator=000000000000000000000000000000000000000000000000000000000000000000"),
         ),
       )
    ├─ Set: "owner_badge"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::NonFungibleLocalId(
           NonFungibleLocalId("[83fa5c16ce90e2ddbbc56c997efc828aa047737dc30fe8907edc1ea67954]"),
         ),
       )
    ├─ Set: "pool_unit"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::GlobalAddress(
           GlobalAddress(Reference("resource_sim1t5l4s99hpc6vvskktu2uy9egk86tszjnnez62zfu9t7z7tsq3a0vgu")),
         ),
       )
    └─ Set: "claim_nft"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::GlobalAddress(
           GlobalAddress(Reference("resource_sim1ngnwzjcrnz8d4hmgu8d5zvnc8s6vglh8ln6s9s027uq82gx0ah2pn4")),
         ),
       )
  ├─ Partition(5): 1 change
    └─ Set: Field(0)
       Value: LOCKED RoleAssignmentOwnerFieldPayload::V1(
         OwnerRoleSubstate {
           rule: AccessRule::Protected(
             AccessRuleNode::ProofRule(
               ProofRule::Require(
                 ResourceOrNonFungible::NonFungible(
                   NonFungibleGlobalId {
                     resource_address: ResourceAddress(Reference("resource_sim1nfxxxxxxxxxxvdrwnrxxxxxxxxx004365253834xxxxxxxxxjxu0rl")),
                     local_id: NonFungibleLocalId("[83fa5c16ce90e2ddbbc56c997efc828aa047737dc30fe8907edc1ea67954]"),
                   },
                 ),
               ),
             ),
           ),
           updater: OwnerRoleUpdater::None,
         },
       )
  ├─ Partition(64): 2 changes
    ├─ Set: Field(0)
       Value: UNLOCKED ValidatorStateFieldPayload::V1(
         ValidatorSubstate {
           sorted_key: Option::None,
           key: Secp256k1PublicKey(hex("000000000000000000000000000000000000000000000000000000000000000000")),
           is_registered: true,
           accepts_delegated_stake: true,
           validator_fee_factor: Decimal("1"),
           validator_fee_change_request: Option::None,
           stake_unit_resource: ResourceAddress(Reference("resource_sim1t5l4s99hpc6vvskktu2uy9egk86tszjnnez62zfu9t7z7tsq3a0vgu")),
           stake_xrd_vault_id: Own("internal_vault_sim1tqxmcptedgqk5q2xaqzlm6uzhll3tudjsea0p6vqc5duzvev0uz0cz"),
           claim_nft: ResourceAddress(Reference("resource_sim1ngnwzjcrnz8d4hmgu8d5zvnc8s6vglh8ln6s9s027uq82gx0ah2pn4")),
           pending_xrd_withdraw_vault_id: Own("internal_vault_sim1tpeulny62n0vw9wf6we57knfrwfue5l2r9yeddrpwjwvf4pjld343w"),
           locked_owner_stake_unit_vault_id: Own("internal_vault_sim1tpgen0arnu04wdxr75yf32jh6g26s9ayhvsm7uxgplmhznlq8fdfmx"),
           pending_owner_stake_unit_unlock_vault_id: Own("internal_vault_sim1tptglxngjleqadxt8tqwcvps02echjqkjx8ufsgcsjrh9kpedjnu9h"),
           pending_owner_stake_unit_withdrawals: {},
           already_unlocked_owner_stake_unit_amount: Decimal("0"),
         },
       )
    └─ Set: Field(1)
       Value: UNLOCKED ValidatorProtocolUpdateReadinessSignalFieldPayload::V1(
         ValidatorProtocolUpdateReadinessSignalSubstate::None,
       )
  └─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxcnsmgrxxxxxxxxx000746305335xxxxxxxxxxc06cl")),
               blueprint_name: "Validator",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::Some {
               outer_object: GlobalAddress(Reference("consensusmanager_sim1scxxxxxxxxxxcnsmgrxxxxxxxxx000999665565xxxxxxxxxxc06cl")),
             },
             features: [],
             generic_substitutions: [],
           },
           object_type: ObjectType::Global {
             modules: {
               AttachedModuleId::RoleAssignment => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
               AttachedModuleId::Metadata => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
             },
           },
         },
       )
├─ resource_sim1ngnwzjcrnz8d4hmgu8d5zvnc8s6vglh8ln6s9s027uq82gx0ah2pn4 across 6 partitions
  ├─ Partition(1): 1 change
    └─ Set: SchemaHash(4942663e9f3d3a4e09cb78d03d803f9b8d5fcb2f21e04894b03ec171c998b599)
       Value: KeyValueEntrySubstate::V1(
         KeyValueEntrySubstateV1 {
           value: Option::Some(
             PackageSchemaEntryPayload::V1(
               SchemaV1 {
                 type_kinds: [
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(12u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         1u64,
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                   TypeKind::U64,
                 ],
                 type_metadata: [
                   TypeMetadata {
                     type_name: Option::Some(
                       "UnstakeData",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "name",
                           "claim_epoch",
                           "claim_amount",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "Epoch",
                     ),
                     child_names: Option::None,
                   },
                 ],
                 type_validations: [
                   TypeValidation::None,
                   TypeValidation::None,
                 ],
               },
             ),
           ),
           lock_status: LockStatus::Locked,
         },
       )
  ├─ Partition(2): 5 changes
    ├─ Set: "name"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "Stake Claims NFTs",
         ),
       )
    ├─ Set: "validator"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::GlobalAddress(
           GlobalAddress(Reference("validator_sim1s0a9c9kwjr3dmw79djvhalyz32sywumacv873yr7ms02v725fydvm0")),
         ),
       )
    ├─ Set: "description"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "Unique Stake Claim tokens that represent a timed claimable amount of XRD stake from a Radix Network validator.",
         ),
       )
    ├─ Set: "icon_url"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::Url(
           Url("https://assets.radixdlt.com/icons/icon-stake_claim_NFTs.png"),
         ),
       )
    └─ Set: "tags"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::StringArray(
           [],
         ),
       )
  ├─ Partition(5): 1 change
    └─ Set: Field(0)
       Value: LOCKED RoleAssignmentOwnerFieldPayload::V1(
         OwnerRoleSubstate {
           rule: AccessRule::Protected(
             AccessRuleNode::ProofRule(
               ProofRule::Require(
                 ResourceOrNonFungible::NonFungible(
                   NonFungibleGlobalId {
                     resource_address: ResourceAddress(Reference("resource_sim1nfxxxxxxxxxxglcllrxxxxxxxxx002350006550xxxxxxxxxk5870l")),
                     local_id: NonFungibleLocalId("[ba037d4c0865e415c5f5564a5dc2206656555fcfcbcf100aefbe5652e8077326]"),
                   },
                 ),
               ),
             ),
           ),
           updater: OwnerRoleUpdater::None,
         },
       )
  ├─ Partition(6): 14 changes
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("depositor") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::AllowAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("burner_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("freezer") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("freezer_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("burner") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::Protected(
           AccessRuleNode::ProofRule(
             ProofRule::Require(
               ResourceOrNonFungible::NonFungible(
                 NonFungibleGlobalId {
                   resource_address: ResourceAddress(Reference("resource_sim1nfxxxxxxxxxxglcllrxxxxxxxxx002350006550xxxxxxxxxk5870l")),
                   local_id: NonFungibleLocalId("[ba037d4c0865e415c5f5564a5dc2206656555fcfcbcf100aefbe5652e8077326]"),
                 },
               ),
             ),
           ),
         ),
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("recaller") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("withdrawer") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::AllowAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("non_fungible_data_updater_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("recaller_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("non_fungible_data_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("depositor_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("minter") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::Protected(
           AccessRuleNode::ProofRule(
             ProofRule::Require(
               ResourceOrNonFungible::NonFungible(
                 NonFungibleGlobalId {
                   resource_address: ResourceAddress(Reference("resource_sim1nfxxxxxxxxxxglcllrxxxxxxxxx002350006550xxxxxxxxxk5870l")),
                   local_id: NonFungibleLocalId("[ba037d4c0865e415c5f5564a5dc2206656555fcfcbcf100aefbe5652e8077326]"),
                 },
               ),
             ),
           ),
         ),
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("withdrawer_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    └─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("minter_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
  ├─ Partition(64): 3 changes
    ├─ Set: Field(0)
       Value: LOCKED NonFungibleResourceManagerIdTypeFieldPayload::V1(
         NonFungibleIdType::RUID,
       )
    ├─ Set: Field(1)
       Value: LOCKED NonFungibleResourceManagerMutableFieldsFieldPayload::V1(
         NonFungibleResourceManagerMutableFieldsV1 {
           mutable_field_index: {},
         },
       )
    └─ Set: Field(2)
       Value: UNLOCKED NonFungibleResourceManagerTotalSupplyFieldPayload::V1(
         Decimal("0"),
       )
  └─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxresrcexxxxxxxxx000538436477xxxxxxxxxaj0zg9")),
               blueprint_name: "NonFungibleResourceManager",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::None,
             features: [
               "track_total_supply",
               "mint",
               "burn",
             ],
             generic_substitutions: [
               GenericSubstitution::Local(
                 ScopedTypeId(
                   SchemaHash(hex("4942663e9f3d3a4e09cb78d03d803f9b8d5fcb2f21e04894b03ec171c998b599")),
                   LocalTypeId::SchemaLocalIndex(
                     0u64,
                   ),
                 ),
               ),
             ],
           },
           object_type: ObjectType::Global {
             modules: {
               AttachedModuleId::RoleAssignment => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
               AttachedModuleId::Metadata => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
             },
           },
         },
       )
├─ resource_sim1t5l4s99hpc6vvskktu2uy9egk86tszjnnez62zfu9t7z7tsq3a0vgu across 5 partitions
  ├─ Partition(2): 5 changes
    ├─ Set: "name"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "Liquid Stake Units",
         ),
       )
    ├─ Set: "validator"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::GlobalAddress(
           GlobalAddress(Reference("validator_sim1s0a9c9kwjr3dmw79djvhalyz32sywumacv873yr7ms02v725fydvm0")),
         ),
       )
    ├─ Set: "description"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "Liquid Stake Unit tokens that represent a proportion of XRD stake delegated to a Radix Network validator.",
         ),
       )
    ├─ Set: "icon_url"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::Url(
           Url("https://assets.radixdlt.com/icons/icon-liquid_stake_units.png"),
         ),
       )
    └─ Set: "tags"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::StringArray(
           [],
         ),
       )
  ├─ Partition(5): 1 change
    └─ Set: Field(0)
       Value: LOCKED RoleAssignmentOwnerFieldPayload::V1(
         OwnerRoleSubstate {
           rule: AccessRule::Protected(
             AccessRuleNode::ProofRule(
               ProofRule::Require(
                 ResourceOrNonFungible::NonFungible(
                   NonFungibleGlobalId {
                     resource_address: ResourceAddress(Reference("resource_sim1nfxxxxxxxxxxglcllrxxxxxxxxx002350006550xxxxxxxxxk5870l")),
                     local_id: NonFungibleLocalId("[ba037d4c0865e415c5f5564a5dc2206656555fcfcbcf100aefbe5652e8077326]"),
                   },
                 ),
               ),
             ),
           ),
           updater: OwnerRoleUpdater::None,
         },
       )
  ├─ Partition(6): 12 changes
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("depositor") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::AllowAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("burner_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("freezer") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("freezer_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("burner") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::Protected(
           AccessRuleNode::ProofRule(
             ProofRule::Require(
               ResourceOrNonFungible::NonFungible(
                 NonFungibleGlobalId {
                   resource_address: ResourceAddress(Reference("resource_sim1nfxxxxxxxxxxglcllrxxxxxxxxx002350006550xxxxxxxxxk5870l")),
                   local_id: NonFungibleLocalId("[ba037d4c0865e415c5f5564a5dc2206656555fcfcbcf100aefbe5652e8077326]"),
                 },
               ),
             ),
           ),
         ),
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("recaller") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("withdrawer") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::AllowAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("recaller_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("depositor_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("minter") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::Protected(
           AccessRuleNode::ProofRule(
             ProofRule::Require(
               ResourceOrNonFungible::NonFungible(
                 NonFungibleGlobalId {
                   resource_address: ResourceAddress(Reference("resource_sim1nfxxxxxxxxxxglcllrxxxxxxxxx002350006550xxxxxxxxxk5870l")),
                   local_id: NonFungibleLocalId("[ba037d4c0865e415c5f5564a5dc2206656555fcfcbcf100aefbe5652e8077326]"),
                 },
               ),
             ),
           ),
         ),
       )
    ├─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("withdrawer_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
    └─ Set: ModuleRoleKey { module: ModuleId::Main, key: RoleKey("minter_updater") }
       Value: UNLOCKED RoleAssignmentAccessRuleEntryPayload::V1(
         AccessRule::DenyAll,
       )
  ├─ Partition(64): 2 changes
    ├─ Set: Field(0)
       Value: LOCKED FungibleResourceManagerDivisibilityFieldPayload::V1(
         18u8,
       )
    └─ Set: Field(1)
       Value: UNLOCKED FungibleResourceManagerTotalSupplyFieldPayload::V1(
         Decimal("0"),
       )
  └─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxresrcexxxxxxxxx000538436477xxxxxxxxxaj0zg9")),
               blueprint_name: "FungibleResourceManager",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::None,
             features: [
               "track_total_supply",
               "mint",
               "burn",
             ],
             generic_substitutions: [],
           },
           object_type: ObjectType::Global {
             modules: {
               AttachedModuleId::RoleAssignment => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
               AttachedModuleId::Metadata => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
             },
           },
         },
       )
├─ resource_sim1nfxxxxxxxxxxvdrwnrxxxxxxxxx004365253834xxxxxxxxxjxu0rl across 2 partitions
  ├─ Partition(64): 1 change
    └─ Set: Field(2)
       Value: UNLOCKED NonFungibleResourceManagerTotalSupplyFieldPayload::V1(
         Decimal("1"),
       )
  └─ Partition(65): 1 change
    └─ Set: NonFungibleLocalId("[83fa5c16ce90e2ddbbc56c997efc828aa047737dc30fe8907edc1ea67954]")
       Value: UNLOCKED ValidatorOwnerBadgeData {
         name: "Validator Owner Badge",
         validator: ComponentAddress(Reference("validator_sim1s0a9c9kwjr3dmw79djvhalyz32sywumacv873yr7ms02v725fydvm0")),
       }
├─ internal_vault_sim1tqxmcptedgqk5q2xaqzlm6uzhll3tudjsea0p6vqc5duzvev0uz0cz across 2 partitions
  ├─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxresrcexxxxxxxxx000538436477xxxxxxxxxaj0zg9")),
               blueprint_name: "FungibleVault",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::Some {
               outer_object: GlobalAddress(Reference("resource_sim1tknxxxxxxxxxradxrdxxxxxxxxx009923554798xxxxxxxxxakj8n3")),
             },
             features: [],
             generic_substitutions: [],
           },
           object_type: ObjectType::Owned,
         },
       )
  └─ Partition(64): 1 change
    └─ Set: Field(0)
       Value: UNLOCKED FungibleVaultBalanceFieldPayload::V1(
         LiquidFungibleResource(Decimal("0")),
       )
├─ internal_vault_sim1tpeulny62n0vw9wf6we57knfrwfue5l2r9yeddrpwjwvf4pjld343w across 2 partitions
  ├─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxresrcexxxxxxxxx000538436477xxxxxxxxxaj0zg9")),
               blueprint_name: "FungibleVault",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::Some {
               outer_object: GlobalAddress(Reference("resource_sim1tknxxxxxxxxxradxrdxxxxxxxxx009923554798xxxxxxxxxakj8n3")),
             },
             features: [],
             generic_substitutions: [],
           },
           object_type: ObjectType::Owned,
         },
       )
  └─ Partition(64): 1 change
    └─ Set: Field(0)
       Value: UNLOCKED FungibleVaultBalanceFieldPayload::V1(
         LiquidFungibleResource(Decimal("0")),
       )
├─ internal_vault_sim1tpgen0arnu04wdxr75yf32jh6g26s9ayhvsm7uxgplmhznlq8fdfmx across 2 partitions
  ├─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxresrcexxxxxxxxx000538436477xxxxxxxxxaj0zg9")),
               blueprint_name: "FungibleVault",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::Some {
               outer_object: GlobalAddress(Reference("resource_sim1t5l4s99hpc6vvskktu2uy9egk86tszjnnez62zfu9t7z7tsq3a0vgu")),
             },
             features: [],
             generic_substitutions: [],
           },
           object_type: ObjectType::Owned,
         },
       )
  └─ Partition(64): 1 change
    └─ Set: Field(0)
       Value: UNLOCKED FungibleVaultBalanceFieldPayload::V1(
         LiquidFungibleResource(Decimal("0")),
       )
├─ internal_vault_sim1tptglxngjleqadxt8tqwcvps02echjqkjx8ufsgcsjrh9kpedjnu9h across 2 partitions
  ├─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxresrcexxxxxxxxx000538436477xxxxxxxxxaj0zg9")),
               blueprint_name: "FungibleVault",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::Some {
               outer_object: GlobalAddress(Reference("resource_sim1t5l4s99hpc6vvskktu2uy9egk86tszjnnez62zfu9t7z7tsq3a0vgu")),
             },
             features: [],
             generic_substitutions: [],
           },
           object_type: ObjectType::Owned,
         },
       )
  └─ Partition(64): 1 change
    └─ Set: Field(0)
       Value: UNLOCKED FungibleVaultBalanceFieldPayload::V1(
         LiquidFungibleResource(Decimal("0")),
       )
├─ internal_vault_sim1np9n2y94tr9vjz5h6947njky6tvzzzuzhp3w2ynz8wfcgw4lveyqfz across 3 partitions
  ├─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxresrcexxxxxxxxx000538436477xxxxxxxxxaj0zg9")),
               blueprint_name: "NonFungibleVault",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::Some {
               outer_object: GlobalAddress(Reference("resource_sim1nfxxxxxxxxxxvdrwnrxxxxxxxxx004365253834xxxxxxxxxjxu0rl")),
             },
             features: [],
             generic_substitutions: [],
           },
           object_type: ObjectType::Owned,
         },
       )
  ├─ Partition(64): 1 change
    └─ Set: Field(0)
       Value: UNLOCKED NonFungibleVaultBalanceFieldPayload::V1(
         LiquidNonFungibleVault(Decimal("1")),
       )
  └─ Partition(65): 1 change
    └─ Set: NonFungibleLocalId("[83fa5c16ce90e2ddbbc56c997efc828aa047737dc30fe8907edc1ea67954]")
       Value: NonFungibleVaultNonFungibleEntryPayload::V1(
         Unit,
       )
├─ internal_keyvaluestore_sim1kpkxjgh28rp2e2fudwfx3ck9sau86xzt3ckc7gnl25rd6dlt6cr7a9 across 1 partitions
  └─ Partition(64): 1 change
    └─ Set: Secp256k1PublicKey(hex("000000000000000000000000000000000000000000000000000000000000000000"))
       Value: GlobalValidator(Reference("validator_sim1s0a9c9kwjr3dmw79djvhalyz32sywumacv873yr7ms02v725fydvm0"))
└─ transactiontracker_sim1stxxxxxxxxxxtxtrakxxxxxxxxx006844685494xxxxxxxxx4d5zd2 across 1 partitions
  └─ Partition(64): 1 change
    └─ Set: Field(0)
       Value: UNLOCKED TransactionTrackerSubstate::V1(
         TransactionTrackerSubstateV1 {
           start_epoch: 1u64,
           start_partition: 65u8,
           partition_range_start_inclusive: 65u8,
           partition_range_end_inclusive: 255u8,
           epochs_per_partition: 100u64,
         },
       )

OUTPUTS: 1
└─ Unit

BALANCE CHANGES: 1
└─ Vault: internal_vault_sim1np9n2y94tr9vjz5h6947njky6tvzzzuzhp3w2ynz8wfcgw4lveyqfz
   ResAddr: resource_sim1nfxxxxxxxxxxvdrwnrxxxxxxxxx004365253834xxxxxxxxxjxu0rl
   Change: +{[83fa5c16ce90e2ddbbc56c997efc828aa047737dc30fe8907edc1ea67954]}, -{}

NEW ENTITIES: 4
├─ Component: account_sim16yt9mmnctyjwwss6plgyrzse6hdwasu4l4g94y4ql5c30epg07y9ef
└─ Component: validator_sim1s0a9c9kwjr3dmw79djvhalyz32sywumacv873yr7ms02v725fydvm0
├─ Resource: resource_sim1ngnwzjcrnz8d4hmgu8d5zvnc8s6vglh8ln6s9s027uq82gx0ah2pn4
└─ Resource: resource_sim1t5l4s99hpc6vvskktu2uy9egk86tszjnnez62zfu9t7z7tsq3a0vgu