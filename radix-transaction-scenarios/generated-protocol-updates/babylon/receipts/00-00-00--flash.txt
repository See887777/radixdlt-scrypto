TRANSACTION STATUS: COMMITTED SUCCESS

TRANSACTION COST: 0 XRD
├─ Network execution: 0 XRD, 0 execution cost units
├─ Network finalization: 0 XRD, 0 finalization cost units
├─ Tip: 0 XRD
├─ Network Storage: 0 XRD
└─ Royalties: 0 XRD

LOGS: 0

EVENTS: 0

STATE UPDATES: 7 entities
├─ package_sim1pkgxxxxxxxxxpackgexxxxxxxxx000726633226xxxxxxxxxlk8hc9 across 10 partitions
  ├─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxpackgexxxxxxxxx000726633226xxxxxxxxxlk8hc9")),
               blueprint_name: "Package",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::None,
             features: [],
             generic_substitutions: [],
           },
           object_type: ObjectType::Global {
             modules: {
               AttachedModuleId::Metadata => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
               AttachedModuleId::RoleAssignment => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
             },
           },
         },
       )
  ├─ Partition(1): 1 change
    └─ Set: SchemaHash(e3077e612a8c5c864191d89c2432dd44675068393ce85202b03e939147e9c16e)
       Value: (Hidden as longer than 10240 bytes. Hash: 9fada561797c60acdaac9e0dfcd7bc21d2fc487c57220d7cbcd67ac22705f51e)
  ├─ Partition(2): 2 changes
    ├─ Set: "name"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "Package Package",
         ),
       )
    └─ Set: "description"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "A native package that is called to create a new package on the network.",
         ),
       )
  ├─ Partition(5): 1 change
    └─ Set: Field(0)
       Value: LOCKED RoleAssignmentOwnerFieldPayload::V1(
         OwnerRoleSubstate {
           rule: AccessRule::DenyAll,
           updater: OwnerRoleUpdater::None,
         },
       )
  ├─ Partition(65): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "Package", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDefinitionEntryPayload::V1(
         BlueprintDefinition {
           interface: BlueprintInterface {
             blueprint_type: BlueprintType::Outer,
             is_transient: false,
             generics: [],
             feature_set: [
               "package_royalty",
             ],
             state: IndexedStateSchema {
               fields: Option::Some(
                 Tuple(
                   PartitionDescription::Logical(
                     PartitionOffset(
                       0u8,
                     ),
                   ),
                   [
                     FieldSchema {
                       field: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("e3077e612a8c5c864191d89c2432dd44675068393ce85202b03e939147e9c16e")),
                           LocalTypeId::SchemaLocalIndex(
                             0u64,
                           ),
                         ),
                       ),
                       condition: Condition::IfFeature(
                         "package_royalty",
                       ),
                       transience: FieldTransience::NotTransient,
                     },
                   ],
                 ),
               ),
               collections: [
                 Tuple(
                   PartitionDescription::Logical(
                     PartitionOffset(
                       1u8,
                     ),
                   ),
                   BlueprintCollectionSchema::KeyValueStore(
                     BlueprintKeyValueSchema {
                       key: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("e3077e612a8c5c864191d89c2432dd44675068393ce85202b03e939147e9c16e")),
                           LocalTypeId::SchemaLocalIndex(
                             2u64,
                           ),
                         ),
                       ),
                       value: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("e3077e612a8c5c864191d89c2432dd44675068393ce85202b03e939147e9c16e")),
                           LocalTypeId::SchemaLocalIndex(
                             4u64,
                           ),
                         ),
                       ),
                       allow_ownership: false,
                     },
                   ),
                 ),
                 Tuple(
                   PartitionDescription::Logical(
                     PartitionOffset(
                       2u8,
                     ),
                   ),
                   BlueprintCollectionSchema::KeyValueStore(
                     BlueprintKeyValueSchema {
                       key: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("e3077e612a8c5c864191d89c2432dd44675068393ce85202b03e939147e9c16e")),
                           LocalTypeId::SchemaLocalIndex(
                             2u64,
                           ),
                         ),
                       ),
                       value: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("e3077e612a8c5c864191d89c2432dd44675068393ce85202b03e939147e9c16e")),
                           LocalTypeId::SchemaLocalIndex(
                             43u64,
                           ),
                         ),
                       ),
                       allow_ownership: false,
                     },
                   ),
                 ),
                 Tuple(
                   PartitionDescription::Physical(
                     PartitionNumber(1u8),
                   ),
                   BlueprintCollectionSchema::KeyValueStore(
                     BlueprintKeyValueSchema {
                       key: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("e3077e612a8c5c864191d89c2432dd44675068393ce85202b03e939147e9c16e")),
                           LocalTypeId::SchemaLocalIndex(
                             21u64,
                           ),
                         ),
                       ),
                       value: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("e3077e612a8c5c864191d89c2432dd44675068393ce85202b03e939147e9c16e")),
                           LocalTypeId::SchemaLocalIndex(
                             45u64,
                           ),
                         ),
                       ),
                       allow_ownership: false,
                     },
                   ),
                 ),
                 Tuple(
                   PartitionDescription::Logical(
                     PartitionOffset(
                       3u8,
                     ),
                   ),
                   BlueprintCollectionSchema::KeyValueStore(
                     BlueprintKeyValueSchema {
                       key: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("e3077e612a8c5c864191d89c2432dd44675068393ce85202b03e939147e9c16e")),
                           LocalTypeId::SchemaLocalIndex(
                             2u64,
                           ),
                         ),
                       ),
                       value: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("e3077e612a8c5c864191d89c2432dd44675068393ce85202b03e939147e9c16e")),
                           LocalTypeId::SchemaLocalIndex(
                             86u64,
                           ),
                         ),
                       ),
                       allow_ownership: false,
                     },
                   ),
                 ),
                 Tuple(
                   PartitionDescription::Logical(
                     PartitionOffset(
                       4u8,
                     ),
                   ),
                   BlueprintCollectionSchema::KeyValueStore(
                     BlueprintKeyValueSchema {
                       key: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("e3077e612a8c5c864191d89c2432dd44675068393ce85202b03e939147e9c16e")),
                           LocalTypeId::SchemaLocalIndex(
                             2u64,
                           ),
                         ),
                       ),
                       value: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("e3077e612a8c5c864191d89c2432dd44675068393ce85202b03e939147e9c16e")),
                           LocalTypeId::SchemaLocalIndex(
                             89u64,
                           ),
                         ),
                       ),
                       allow_ownership: false,
                     },
                   ),
                 ),
                 Tuple(
                   PartitionDescription::Logical(
                     PartitionOffset(
                       5u8,
                     ),
                   ),
                   BlueprintCollectionSchema::KeyValueStore(
                     BlueprintKeyValueSchema {
                       key: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("e3077e612a8c5c864191d89c2432dd44675068393ce85202b03e939147e9c16e")),
                           LocalTypeId::SchemaLocalIndex(
                             40u64,
                           ),
                         ),
                       ),
                       value: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("e3077e612a8c5c864191d89c2432dd44675068393ce85202b03e939147e9c16e")),
                           LocalTypeId::SchemaLocalIndex(
                             101u64,
                           ),
                         ),
                       ),
                       allow_ownership: false,
                     },
                   ),
                 ),
                 Tuple(
                   PartitionDescription::Logical(
                     PartitionOffset(
                       6u8,
                     ),
                   ),
                   BlueprintCollectionSchema::KeyValueStore(
                     BlueprintKeyValueSchema {
                       key: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("e3077e612a8c5c864191d89c2432dd44675068393ce85202b03e939147e9c16e")),
                           LocalTypeId::SchemaLocalIndex(
                             40u64,
                           ),
                         ),
                       ),
                       value: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("e3077e612a8c5c864191d89c2432dd44675068393ce85202b03e939147e9c16e")),
                           LocalTypeId::SchemaLocalIndex(
                             103u64,
                           ),
                         ),
                       ),
                       allow_ownership: false,
                     },
                   ),
                 ),
                 Tuple(
                   PartitionDescription::Logical(
                     PartitionOffset(
                       7u8,
                     ),
                   ),
                   BlueprintCollectionSchema::KeyValueStore(
                     BlueprintKeyValueSchema {
                       key: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("e3077e612a8c5c864191d89c2432dd44675068393ce85202b03e939147e9c16e")),
                           LocalTypeId::SchemaLocalIndex(
                             40u64,
                           ),
                         ),
                       ),
                       value: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("e3077e612a8c5c864191d89c2432dd44675068393ce85202b03e939147e9c16e")),
                           LocalTypeId::SchemaLocalIndex(
                             105u64,
                           ),
                         ),
                       ),
                       allow_ownership: false,
                     },
                   ),
                 ),
               ],
               num_logical_partitions: 8u8,
             },
             functions: {
               "publish_wasm" => FunctionSchema {
                 receiver: Option::None,
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("e3077e612a8c5c864191d89c2432dd44675068393ce85202b03e939147e9c16e")),
                     LocalTypeId::SchemaLocalIndex(
                       107u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("e3077e612a8c5c864191d89c2432dd44675068393ce85202b03e939147e9c16e")),
                     LocalTypeId::SchemaLocalIndex(
                       146u64,
                     ),
                   ),
                 ),
               },
               "publish_wasm_advanced" => FunctionSchema {
                 receiver: Option::None,
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("e3077e612a8c5c864191d89c2432dd44675068393ce85202b03e939147e9c16e")),
                     LocalTypeId::SchemaLocalIndex(
                       147u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("e3077e612a8c5c864191d89c2432dd44675068393ce85202b03e939147e9c16e")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(131u8),
                     ),
                   ),
                 ),
               },
               "publish_native" => FunctionSchema {
                 receiver: Option::None,
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("e3077e612a8c5c864191d89c2432dd44675068393ce85202b03e939147e9c16e")),
                     LocalTypeId::SchemaLocalIndex(
                       149u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("e3077e612a8c5c864191d89c2432dd44675068393ce85202b03e939147e9c16e")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(131u8),
                     ),
                   ),
                 ),
               },
               "PackageRoyalty_claim_royalties" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("e3077e612a8c5c864191d89c2432dd44675068393ce85202b03e939147e9c16e")),
                     LocalTypeId::SchemaLocalIndex(
                       150u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("e3077e612a8c5c864191d89c2432dd44675068393ce85202b03e939147e9c16e")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(161u8),
                     ),
                   ),
                 ),
               },
             },
             events: {},
             types: {},
           },
           function_exports: {
             "publish_wasm" => PackageExport {
               code_hash: CodeHash(hex("81e47a19e6b29b0a65b9591762ce5143ed30d0261e5d24a3201752506b20f15c")),
               export_name: "publish_wasm",
             },
             "publish_wasm_advanced" => PackageExport {
               code_hash: CodeHash(hex("81e47a19e6b29b0a65b9591762ce5143ed30d0261e5d24a3201752506b20f15c")),
               export_name: "publish_wasm_advanced",
             },
             "publish_native" => PackageExport {
               code_hash: CodeHash(hex("81e47a19e6b29b0a65b9591762ce5143ed30d0261e5d24a3201752506b20f15c")),
               export_name: "publish_native",
             },
             "PackageRoyalty_claim_royalties" => PackageExport {
               code_hash: CodeHash(hex("81e47a19e6b29b0a65b9591762ce5143ed30d0261e5d24a3201752506b20f15c")),
               export_name: "PackageRoyalty_claim_royalties",
             },
           },
           hook_exports: {},
         },
       )
  ├─ Partition(66): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "Package", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDependenciesEntryPayload::V1(
         BlueprintDependencies([
           GlobalAddress(Reference("resource_sim1nfxxxxxxxxxxpkcllrxxxxxxxxx003652646977xxxxxxxxxla870l")),
           GlobalAddress(Reference("resource_sim1nfxxxxxxxxxxpkgwnrxxxxxxxxx002558553505xxxxxxxxxlah0rl")),
         ]),
       )
  ├─ Partition(67): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "Package", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionRoyaltyConfigEntryPayload::V1(
         PackageRoyaltyConfig::Disabled,
       )
  ├─ Partition(68): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "Package", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionAuthConfigEntryPayload::V1(
         AuthConfig {
           function_auth: FunctionAuth::AccessRules(
             {
               "publish_wasm" => AccessRule::Protected(
                 AccessRuleNode::ProofRule(
                   ProofRule::Require(
                     ResourceOrNonFungible::NonFungible(
                       NonFungibleGlobalId {
                         resource_address: ResourceAddress(Reference("resource_sim1nfxxxxxxxxxxpkcllrxxxxxxxxx003652646977xxxxxxxxxla870l")),
                         local_id: NonFungibleLocalId("[0ee4d4ec80c9de090cb1f1d7604d6d9156a3d63e18860faab51138650808e04d]"),
                       },
                     ),
                   ),
                 ),
               ),
               "publish_wasm_advanced" => AccessRule::Protected(
                 AccessRuleNode::ProofRule(
                   ProofRule::Require(
                     ResourceOrNonFungible::NonFungible(
                       NonFungibleGlobalId {
                         resource_address: ResourceAddress(Reference("resource_sim1nfxxxxxxxxxxpkcllrxxxxxxxxx003652646977xxxxxxxxxla870l")),
                         local_id: NonFungibleLocalId("[0ee4d4ec80c9de090cb1f1d7604d6d9156a3d63e18860faab51138650808e04d]"),
                       },
                     ),
                   ),
                 ),
               ),
               "publish_native" => AccessRule::Protected(
                 AccessRuleNode::ProofRule(
                   ProofRule::Require(
                     ResourceOrNonFungible::NonFungible(
                       NonFungibleGlobalId {
                         resource_address: ResourceAddress(Reference("resource_sim1nfxxxxxxxxxxsystxnxxxxxxxxx002683325037xxxxxxxxxw002k0")),
                         local_id: NonFungibleLocalId("#0#"),
                       },
                     ),
                   ),
                 ),
               ),
             },
           ),
           method_auth: MethodAuthTemplate::StaticRoleDefinition(
             StaticRoleDefinition {
               roles: RoleSpecification::Normal(
                 {
                   RoleKey("securify_owner") => RoleList([]),
                 },
               ),
               methods: {
                 MethodKey("PackageRoyalty_claim_royalties") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("securify_owner"),
                   ]),
                 ),
               },
             },
           ),
         },
       )
  ├─ Partition(69): 1 change
    └─ Set: CodeHash(hex("81e47a19e6b29b0a65b9591762ce5143ed30d0261e5d24a3201752506b20f15c"))
       Value: LOCKED PackageCodeVmTypeEntryPayload::V1(
         PackageCodeVmTypeV1::Native,
       )
  └─ Partition(70): 1 change
    └─ Set: CodeHash(hex("81e47a19e6b29b0a65b9591762ce5143ed30d0261e5d24a3201752506b20f15c"))
       Value: LOCKED PackageCodeOriginalCodeEntryPayload::V1(
         PackageCodeOriginalCodeV1(hex("0000000000000000")),
       )
├─ package_sim1pkgxxxxxxxxxryaltyxxxxxxxxx003849573396xxxxxxxxxa0z7mc across 10 partitions
  ├─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxpackgexxxxxxxxx000726633226xxxxxxxxxlk8hc9")),
               blueprint_name: "Package",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::None,
             features: [],
             generic_substitutions: [],
           },
           object_type: ObjectType::Global {
             modules: {
               AttachedModuleId::Metadata => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
               AttachedModuleId::RoleAssignment => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
             },
           },
         },
       )
  ├─ Partition(1): 1 change
    └─ Set: SchemaHash(bbcdf0c14495ebcfb51ade5d02c7ffda015f145e93314136df82d4410bd14d03)
       Value: KeyValueEntrySubstate::V1(
         KeyValueEntrySubstateV1 {
           value: Option::Some(
             PackageSchemaEntryPayload::V1(
               SchemaV1 {
                 type_kinds: [
                   TypeKind::Enum {
                     variants: {
                       0u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           1u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(167u8),
                       ),
                     ],
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(242u8),
                         ),
                       ],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         4u64,
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         5u64,
                       ),
                     ],
                   },
                   TypeKind::Map {
                     key_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(12u8),
                     ),
                     value_type: LocalTypeId::SchemaLocalIndex(
                       6u64,
                     ),
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(242u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(1u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(12u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(242u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(12u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                 ],
                 type_metadata: [
                   TypeMetadata {
                     type_name: Option::Some(
                       "ComponentRoyaltyAccumulatorFieldPayload",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "V1",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ComponentRoyaltySubstate",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "royalty_vault",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ComponentRoyaltyMethodAmountEntryPayload",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "V1",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ComponentRoyaltyCreateInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "royalty_config",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ComponentRoyaltyConfig",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "royalty_amounts",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ComponentRoyaltySetInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "method",
                           "amount",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ComponentRoyaltyLockInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "method",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ComponentClaimRoyaltiesInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [],
                       ),
                     ),
                   },
                 ],
                 type_validations: [
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                 ],
               },
             ),
           ),
           lock_status: LockStatus::Locked,
         },
       )
  ├─ Partition(2): 2 changes
    ├─ Set: "name"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "Royalty Package",
         ),
       )
    └─ Set: "description"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "A native package that defines the logic of the royalty module used by components.",
         ),
       )
  ├─ Partition(5): 1 change
    └─ Set: Field(0)
       Value: LOCKED RoleAssignmentOwnerFieldPayload::V1(
         OwnerRoleSubstate {
           rule: AccessRule::DenyAll,
           updater: OwnerRoleUpdater::None,
         },
       )
  ├─ Partition(65): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "ComponentRoyalty", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDefinitionEntryPayload::V1(
         BlueprintDefinition {
           interface: BlueprintInterface {
             blueprint_type: BlueprintType::Outer,
             is_transient: true,
             generics: [],
             feature_set: [],
             state: IndexedStateSchema {
               fields: Option::Some(
                 Tuple(
                   PartitionDescription::Logical(
                     PartitionOffset(
                       0u8,
                     ),
                   ),
                   [
                     FieldSchema {
                       field: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("bbcdf0c14495ebcfb51ade5d02c7ffda015f145e93314136df82d4410bd14d03")),
                           LocalTypeId::SchemaLocalIndex(
                             0u64,
                           ),
                         ),
                       ),
                       condition: Condition::Always,
                       transience: FieldTransience::NotTransient,
                     },
                   ],
                 ),
               ),
               collections: [
                 Tuple(
                   PartitionDescription::Logical(
                     PartitionOffset(
                       1u8,
                     ),
                   ),
                   BlueprintCollectionSchema::KeyValueStore(
                     BlueprintKeyValueSchema {
                       key: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("bbcdf0c14495ebcfb51ade5d02c7ffda015f145e93314136df82d4410bd14d03")),
                           LocalTypeId::WellKnown(
                             WellKnownTypeId(12u8),
                           ),
                         ),
                       ),
                       value: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("bbcdf0c14495ebcfb51ade5d02c7ffda015f145e93314136df82d4410bd14d03")),
                           LocalTypeId::SchemaLocalIndex(
                             2u64,
                           ),
                         ),
                       ),
                       allow_ownership: false,
                     },
                   ),
                 ),
               ],
               num_logical_partitions: 2u8,
             },
             functions: {
               "create" => FunctionSchema {
                 receiver: Option::None,
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("bbcdf0c14495ebcfb51ade5d02c7ffda015f145e93314136df82d4410bd14d03")),
                     LocalTypeId::SchemaLocalIndex(
                       3u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("bbcdf0c14495ebcfb51ade5d02c7ffda015f145e93314136df82d4410bd14d03")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(160u8),
                     ),
                   ),
                 ),
               },
               "set_royalty" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("bbcdf0c14495ebcfb51ade5d02c7ffda015f145e93314136df82d4410bd14d03")),
                     LocalTypeId::SchemaLocalIndex(
                       7u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("bbcdf0c14495ebcfb51ade5d02c7ffda015f145e93314136df82d4410bd14d03")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "lock_royalty" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("bbcdf0c14495ebcfb51ade5d02c7ffda015f145e93314136df82d4410bd14d03")),
                     LocalTypeId::SchemaLocalIndex(
                       8u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("bbcdf0c14495ebcfb51ade5d02c7ffda015f145e93314136df82d4410bd14d03")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "claim_royalties" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("bbcdf0c14495ebcfb51ade5d02c7ffda015f145e93314136df82d4410bd14d03")),
                     LocalTypeId::SchemaLocalIndex(
                       9u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("bbcdf0c14495ebcfb51ade5d02c7ffda015f145e93314136df82d4410bd14d03")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(161u8),
                     ),
                   ),
                 ),
               },
             },
             events: {},
             types: {},
           },
           function_exports: {
             "create" => PackageExport {
               code_hash: CodeHash(hex("b3417bdfe4c99261c345b00be4ed0040a7e01f522138339b3f88d426fe203a90")),
               export_name: "create",
             },
             "set_royalty" => PackageExport {
               code_hash: CodeHash(hex("b3417bdfe4c99261c345b00be4ed0040a7e01f522138339b3f88d426fe203a90")),
               export_name: "set_royalty",
             },
             "lock_royalty" => PackageExport {
               code_hash: CodeHash(hex("b3417bdfe4c99261c345b00be4ed0040a7e01f522138339b3f88d426fe203a90")),
               export_name: "lock_royalty",
             },
             "claim_royalties" => PackageExport {
               code_hash: CodeHash(hex("b3417bdfe4c99261c345b00be4ed0040a7e01f522138339b3f88d426fe203a90")),
               export_name: "claim_royalties",
             },
           },
           hook_exports: {},
         },
       )
  ├─ Partition(66): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "ComponentRoyalty", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDependenciesEntryPayload::V1(
         BlueprintDependencies([
           GlobalAddress(Reference("resource_sim1tknxxxxxxxxxradxrdxxxxxxxxx009923554798xxxxxxxxxakj8n3")),
         ]),
       )
  ├─ Partition(67): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "ComponentRoyalty", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionRoyaltyConfigEntryPayload::V1(
         PackageRoyaltyConfig::Disabled,
       )
  ├─ Partition(68): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "ComponentRoyalty", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionAuthConfigEntryPayload::V1(
         AuthConfig {
           function_auth: FunctionAuth::AllowAll,
           method_auth: MethodAuthTemplate::StaticRoleDefinition(
             StaticRoleDefinition {
               roles: RoleSpecification::Normal(
                 {
                   RoleKey("royalty_setter") => RoleList([
                     RoleKey("royalty_setter_updater"),
                   ]),
                   RoleKey("royalty_setter_updater") => RoleList([
                     RoleKey("royalty_setter_updater"),
                   ]),
                   RoleKey("royalty_locker") => RoleList([
                     RoleKey("royalty_locker_updater"),
                   ]),
                   RoleKey("royalty_locker_updater") => RoleList([
                     RoleKey("royalty_locker_updater"),
                   ]),
                   RoleKey("royalty_claimer") => RoleList([
                     RoleKey("royalty_claimer_updater"),
                   ]),
                   RoleKey("royalty_claimer_updater") => RoleList([
                     RoleKey("royalty_claimer_updater"),
                   ]),
                 },
               ),
               methods: {
                 MethodKey("claim_royalties") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("royalty_claimer"),
                   ]),
                 ),
                 MethodKey("set_royalty") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("royalty_setter"),
                   ]),
                 ),
                 MethodKey("lock_royalty") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("royalty_locker"),
                   ]),
                 ),
               },
             },
           ),
         },
       )
  ├─ Partition(69): 1 change
    └─ Set: CodeHash(hex("b3417bdfe4c99261c345b00be4ed0040a7e01f522138339b3f88d426fe203a90"))
       Value: LOCKED PackageCodeVmTypeEntryPayload::V1(
         PackageCodeVmTypeV1::Native,
       )
  └─ Partition(70): 1 change
    └─ Set: CodeHash(hex("b3417bdfe4c99261c345b00be4ed0040a7e01f522138339b3f88d426fe203a90"))
       Value: LOCKED PackageCodeOriginalCodeEntryPayload::V1(
         PackageCodeOriginalCodeV1(hex("000000000000000b")),
       )
├─ package_sim1pkgxxxxxxxxxresrcexxxxxxxxx000538436477xxxxxxxxxaj0zg9 across 10 partitions
  ├─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxpackgexxxxxxxxx000726633226xxxxxxxxxlk8hc9")),
               blueprint_name: "Package",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::None,
             features: [],
             generic_substitutions: [],
           },
           object_type: ObjectType::Global {
             modules: {
               AttachedModuleId::Metadata => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
               AttachedModuleId::RoleAssignment => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
             },
           },
         },
       )
  ├─ Partition(1): 10 changes
    ├─ Set: SchemaHash(13bcc1e1d055e469936948b51d3621e05f8130901231a0847b8ff16eee058759)
       Value: (Hidden as longer than 10240 bytes. Hash: 4f7495329e4e7033c40797748c607d052f0766c4572c076d7005de8e203fc236)
    ├─ Set: SchemaHash(385f392996a25f2f7a01979e07bebd8d87434b27ce391b7b64afdac449ee7578)
       Value: KeyValueEntrySubstate::V1(
         KeyValueEntrySubstateV1 {
           value: Option::Some(
             PackageSchemaEntryPayload::V1(
               SchemaV1 {
                 type_kinds: [
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(1u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         2u64,
                       ),
                     ],
                   },
                   TypeKind::Map {
                     key_type: LocalTypeId::SchemaLocalIndex(
                       3u64,
                     ),
                     value_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(192u8),
                     ),
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(128u8),
                         ),
                       ],
                       1u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(128u8),
                         ),
                       ],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(164u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                 ],
                 type_metadata: [
                   TypeMetadata {
                     type_name: Option::Some(
                       "ProofMoveableSubstate",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "restricted",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "FungibleProofSubstate",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "total_locked",
                           "evidence",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "LocalRef",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Bucket",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Vault",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ProofDropInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "proof",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ProofCloneInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ProofGetAmountInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ProofGetResourceAddressInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [],
                       ),
                     ),
                   },
                 ],
                 type_validations: [
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                 ],
               },
             ),
           ),
           lock_status: LockStatus::Locked,
         },
       )
    ├─ Set: SchemaHash(462a3fea283117aab2b01c297812bdc0fa9060b29eb5e68b847f361bc1201933)
       Value: KeyValueEntrySubstate::V1(
         KeyValueEntrySubstateV1 {
           value: Option::Some(
             PackageSchemaEntryPayload::V1(
               SchemaV1 {
                 type_kinds: [
                   TypeKind::Enum {
                     variants: {
                       0u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           1u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Custom(
                     ScryptoCustomTypeKind::Decimal,
                   ),
                   TypeKind::Enum {
                     variants: {
                       0u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           3u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         4u64,
                       ),
                     ],
                   },
                   TypeKind::Map {
                     key_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(192u8),
                     ),
                     value_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(10u8),
                     ),
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           6u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(9u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         9u64,
                       ),
                     ],
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           10u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [],
                       2u8 => [],
                       3u8 => [],
                       4u8 => [],
                       5u8 => [],
                       6u8 => [],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(161u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(1u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         16u64,
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(9u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         16u64,
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                 ],
                 type_metadata: [
                   TypeMetadata {
                     type_name: Option::Some(
                       "FungibleVaultBalanceFieldPayload",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "V1",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "LiquidFungibleResource",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "FungibleVaultLockedBalanceFieldPayload",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "V1",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "LockedFungibleResource",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "amounts",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "FungibleVaultFreezeStatusFieldPayload",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "V1",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "VaultFrozenFlag",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "bits",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "VaultTakeInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "amount",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "VaultTakeAdvancedInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "amount",
                           "withdraw_strategy",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "WithdrawStrategy",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Exact",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Rounded",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "RoundingMode",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "ToPositiveInfinity",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "ToNegativeInfinity",
                             ),
                             child_names: Option::None,
                           },
                           2u8 => TypeMetadata {
                             type_name: Option::Some(
                               "ToZero",
                             ),
                             child_names: Option::None,
                           },
                           3u8 => TypeMetadata {
                             type_name: Option::Some(
                               "AwayFromZero",
                             ),
                             child_names: Option::None,
                           },
                           4u8 => TypeMetadata {
                             type_name: Option::Some(
                               "ToNearestMidpointTowardZero",
                             ),
                             child_names: Option::None,
                           },
                           5u8 => TypeMetadata {
                             type_name: Option::Some(
                               "ToNearestMidpointAwayFromZero",
                             ),
                             child_names: Option::None,
                           },
                           6u8 => TypeMetadata {
                             type_name: Option::Some(
                               "ToNearestMidpointToEven",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "VaultPutInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "bucket",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "VaultGetAmountInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "FungibleVaultLockFeeInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "amount",
                           "contingent",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "VaultRecallInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "amount",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "VaultFreezeInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "to_freeze",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "VaultFreezeFlags",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "bits",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "VaultUnfreezeInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "to_unfreeze",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "FungibleVaultCreateProofOfAmountInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "amount",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "FungibleVaultLockFungibleAmountInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "amount",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "FungibleVaultUnlockFungibleAmountInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "amount",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "VaultBurnInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "amount",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "LockFeeEvent",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "amount",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "PayFeeEvent",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "amount",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "WithdrawEvent",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "amount",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "DepositEvent",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "amount",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "RecallEvent",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "amount",
                         ],
                       ),
                     ),
                   },
                 ],
                 type_validations: [
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                 ],
               },
             ),
           ),
           lock_status: LockStatus::Locked,
         },
       )
    ├─ Set: SchemaHash(61d7f29e0f470750d734dded75f70db09eee7d932325eefb1f5acc09de31543a)
       Value: KeyValueEntrySubstate::V1(
         KeyValueEntrySubstateV1 {
           value: Option::Some(
             PackageSchemaEntryPayload::V1(
               SchemaV1 {
                 type_kinds: [
                   TypeKind::Custom(
                     ScryptoCustomTypeKind::Decimal,
                   ),
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         2u64,
                       ),
                     ],
                   },
                   TypeKind::Map {
                     key_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(192u8),
                     ),
                     value_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(10u8),
                     ),
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(161u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         6u64,
                       ),
                     ],
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           7u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [],
                       2u8 => [],
                       3u8 => [],
                       4u8 => [],
                       5u8 => [],
                       6u8 => [],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                 ],
                 type_metadata: [
                   TypeMetadata {
                     type_name: Option::Some(
                       "LiquidFungibleResource",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "LockedFungibleResource",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "amounts",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "BucketPutInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "bucket",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "BucketTakeInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "amount",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "BucketTakeAdvancedInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "amount",
                           "withdraw_strategy",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "WithdrawStrategy",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Exact",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Rounded",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "RoundingMode",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "ToPositiveInfinity",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "ToNegativeInfinity",
                             ),
                             child_names: Option::None,
                           },
                           2u8 => TypeMetadata {
                             type_name: Option::Some(
                               "ToZero",
                             ),
                             child_names: Option::None,
                           },
                           3u8 => TypeMetadata {
                             type_name: Option::Some(
                               "AwayFromZero",
                             ),
                             child_names: Option::None,
                           },
                           4u8 => TypeMetadata {
                             type_name: Option::Some(
                               "ToNearestMidpointTowardZero",
                             ),
                             child_names: Option::None,
                           },
                           5u8 => TypeMetadata {
                             type_name: Option::Some(
                               "ToNearestMidpointAwayFromZero",
                             ),
                             child_names: Option::None,
                           },
                           6u8 => TypeMetadata {
                             type_name: Option::Some(
                               "ToNearestMidpointToEven",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "BucketGetAmountInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "BucketGetResourceAddressInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "FungibleBucketCreateProofOfAmountInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "amount",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "BucketCreateProofOfAllInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "FungibleBucketLockAmountInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "amount",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "FungibleBucketUnlockAmountInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "amount",
                         ],
                       ),
                     ),
                   },
                 ],
                 type_validations: [
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                 ],
               },
             ),
           ),
           lock_status: LockStatus::Locked,
         },
       )
    ├─ Set: SchemaHash(723e6bf6d798acc863bd5ac3574dfcebc3b32276eb0bab577fea1450433e417d)
       Value: KeyValueEntrySubstate::V1(
         KeyValueEntrySubstateV1 {
           value: Option::Some(
             PackageSchemaEntryPayload::V1(
               SchemaV1 {
                 type_kinds: [
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         1u64,
                       ),
                     ],
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(194u8),
                     ),
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         3u64,
                       ),
                     ],
                   },
                   TypeKind::Map {
                     key_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(194u8),
                     ),
                     value_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(10u8),
                     ),
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(161u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         7u64,
                       ),
                     ],
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           8u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [],
                       2u8 => [],
                       3u8 => [],
                       4u8 => [],
                       5u8 => [],
                       6u8 => [],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         1u64,
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         1u64,
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(194u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         1u64,
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         1u64,
                       ),
                     ],
                   },
                 ],
                 type_metadata: [
                   TypeMetadata {
                     type_name: Option::Some(
                       "LiquidNonFungibleResource",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "ids",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "LockedNonFungibleResource",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "ids",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "BucketPutInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "bucket",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "BucketTakeInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "amount",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "BucketTakeAdvancedInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "amount",
                           "withdraw_strategy",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "WithdrawStrategy",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Exact",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Rounded",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "RoundingMode",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "ToPositiveInfinity",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "ToNegativeInfinity",
                             ),
                             child_names: Option::None,
                           },
                           2u8 => TypeMetadata {
                             type_name: Option::Some(
                               "ToZero",
                             ),
                             child_names: Option::None,
                           },
                           3u8 => TypeMetadata {
                             type_name: Option::Some(
                               "AwayFromZero",
                             ),
                             child_names: Option::None,
                           },
                           4u8 => TypeMetadata {
                             type_name: Option::Some(
                               "ToNearestMidpointTowardZero",
                             ),
                             child_names: Option::None,
                           },
                           5u8 => TypeMetadata {
                             type_name: Option::Some(
                               "ToNearestMidpointAwayFromZero",
                             ),
                             child_names: Option::None,
                           },
                           6u8 => TypeMetadata {
                             type_name: Option::Some(
                               "ToNearestMidpointToEven",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "BucketTakeNonFungiblesInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "ids",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "BucketGetAmountInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "BucketGetResourceAddressInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "NonFungibleBucketCreateProofOfNonFungiblesInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "ids",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "BucketCreateProofOfAllInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "BucketGetNonFungibleLocalIdsInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "NonFungibleBucketContainsNonFungibleInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "id",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "NonFungibleBucketLockNonFungiblesInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "local_ids",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "NonFungibleBucketUnlockNonFungiblesInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "local_ids",
                         ],
                       ),
                     ),
                   },
                 ],
                 type_validations: [
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                 ],
               },
             ),
           ),
           lock_status: LockStatus::Locked,
         },
       )
    ├─ Set: SchemaHash(8dd3b61b086ed5767ccd95fb1477c3ea463ad5006118891e3b38ff9ff1f9a1df)
       Value: KeyValueEntrySubstate::V1(
         KeyValueEntrySubstateV1 {
           value: Option::Some(
             PackageSchemaEntryPayload::V1(
               SchemaV1 {
                 type_kinds: [
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         1u64,
                       ),
                     ],
                   },
                   TypeKind::Map {
                     key_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(133u8),
                     ),
                     value_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(160u8),
                     ),
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         3u64,
                       ),
                     ],
                   },
                   TypeKind::Custom(
                     ScryptoCustomTypeKind::Own,
                   ),
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(161u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(133u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         7u64,
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(133u8),
                       ),
                     ],
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(194u8),
                     ),
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(133u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(133u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(133u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(133u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         7u64,
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(161u8),
                     ),
                   },
                 ],
                 type_metadata: [
                   TypeMetadata {
                     type_name: Option::Some(
                       "WorktopSubstate",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "resources",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "WorktopDropInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "worktop",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "OwnedWorktop",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "WorktopPutInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "bucket",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "WorktopTakeInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "amount",
                           "resource_address",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "WorktopTakeNonFungiblesInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "ids",
                           "resource_address",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "WorktopTakeAllInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "resource_address",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "WorktopAssertContainsInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "resource_address",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "WorktopAssertContainsAmountInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "resource_address",
                           "amount",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "WorktopAssertContainsNonFungiblesInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "resource_address",
                           "ids",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "WorktopDrainInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                 ],
                 type_validations: [
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::Custom(
                     ScryptoCustomTypeValidation::Own(
                       OwnValidation::IsTypedObject(
                         Option::Some(
                           PackageAddress(Reference("package_sim1pkgxxxxxxxxxresrcexxxxxxxxx000538436477xxxxxxxxxaj0zg9")),
                         ),
                         "Worktop",
                       ),
                     ),
                   ),
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                 ],
               },
             ),
           ),
           lock_status: LockStatus::Locked,
         },
       )
    ├─ Set: SchemaHash(aa18e25a2222655fec8fdce11d9951f8258ce83b17e18cdfe52debea86b8419b)
       Value: KeyValueEntrySubstate::V1(
         KeyValueEntrySubstateV1 {
           value: Option::Some(
             PackageSchemaEntryPayload::V1(
               SchemaV1 {
                 type_kinds: [
                   TypeKind::Enum {
                     variants: {
                       0u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           1u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Custom(
                     ScryptoCustomTypeKind::Decimal,
                   ),
                   TypeKind::Enum {
                     variants: {
                       0u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           3u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         4u64,
                       ),
                     ],
                   },
                   TypeKind::Map {
                     key_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(194u8),
                     ),
                     value_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(10u8),
                     ),
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           6u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(9u8),
                       ),
                     ],
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(66u8),
                         ),
                       ],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         10u64,
                       ),
                     ],
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           11u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [],
                       2u8 => [],
                       3u8 => [],
                       4u8 => [],
                       5u8 => [],
                       6u8 => [],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         13u64,
                       ),
                     ],
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(194u8),
                     ),
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         16u64,
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(9u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         16u64,
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         13u64,
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(161u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(9u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(194u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         13u64,
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         13u64,
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         13u64,
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         13u64,
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         13u64,
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         13u64,
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         13u64,
                       ),
                     ],
                   },
                 ],
                 type_metadata: [
                   TypeMetadata {
                     type_name: Option::Some(
                       "NonFungibleVaultBalanceFieldPayload",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "V1",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "LiquidNonFungibleVault",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "NonFungibleVaultLockedResourceFieldPayload",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "V1",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "LockedNonFungibleResource",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "ids",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "NonFungibleVaultFreezeStatusFieldPayload",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "V1",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "VaultFrozenFlag",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "bits",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "NonFungibleVaultNonFungibleEntryPayload",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "V1",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "VaultTakeInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "amount",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "VaultTakeAdvancedInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "amount",
                           "withdraw_strategy",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "WithdrawStrategy",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Exact",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Rounded",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "RoundingMode",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "ToPositiveInfinity",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "ToNegativeInfinity",
                             ),
                             child_names: Option::None,
                           },
                           2u8 => TypeMetadata {
                             type_name: Option::Some(
                               "ToZero",
                             ),
                             child_names: Option::None,
                           },
                           3u8 => TypeMetadata {
                             type_name: Option::Some(
                               "AwayFromZero",
                             ),
                             child_names: Option::None,
                           },
                           4u8 => TypeMetadata {
                             type_name: Option::Some(
                               "ToNearestMidpointTowardZero",
                             ),
                             child_names: Option::None,
                           },
                           5u8 => TypeMetadata {
                             type_name: Option::Some(
                               "ToNearestMidpointAwayFromZero",
                             ),
                             child_names: Option::None,
                           },
                           6u8 => TypeMetadata {
                             type_name: Option::Some(
                               "ToNearestMidpointToEven",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "NonFungibleVaultTakeNonFungiblesInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "non_fungible_local_ids",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "VaultRecallInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "amount",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "VaultFreezeInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "to_freeze",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "VaultFreezeFlags",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "bits",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "VaultUnfreezeInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "to_unfreeze",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "NonFungibleVaultRecallNonFungiblesInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "non_fungible_local_ids",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "VaultPutInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "bucket",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "VaultGetAmountInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "NonFungibleVaultGetNonFungibleLocalIdsInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "limit",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "NonFungibleVaultContainsNonFungibleInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "id",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "NonFungibleVaultCreateProofOfNonFungiblesInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "ids",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "NonFungibleVaultLockNonFungiblesInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "local_ids",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "NonFungibleVaultUnlockNonFungiblesInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "local_ids",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "VaultBurnInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "amount",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "NonFungibleVaultBurnNonFungiblesInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "non_fungible_local_ids",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "WithdrawEvent",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "ids",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "DepositEvent",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "ids",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "RecallEvent",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "ids",
                         ],
                       ),
                     ),
                   },
                 ],
                 type_validations: [
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                 ],
               },
             ),
           ),
           lock_status: LockStatus::Locked,
         },
       )
    ├─ Set: SchemaHash(b3baa057fe6fe5361ec5bb7f6d21743cdec89844215a53ea964130f9570f5c03)
       Value: KeyValueEntrySubstate::V1(
         KeyValueEntrySubstateV1 {
           value: Option::Some(
             PackageSchemaEntryPayload::V1(
               SchemaV1 {
                 type_kinds: [
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         1u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         2u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         3u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         4u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         5u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         9u64,
                       ),
                     ],
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(164u8),
                     ),
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(133u8),
                     ),
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(195u8),
                     ),
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(131u8),
                         ),
                       ],
                     },
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           6u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         7u64,
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(128u8),
                       ),
                     ],
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(129u8),
                         ),
                       ],
                       1u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           8u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(131u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(12u8),
                       ),
                     ],
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(128u8),
                         ),
                       ],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(164u8),
                         ),
                       ],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(164u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(133u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         15u64,
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(133u8),
                       ),
                     ],
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(194u8),
                     ),
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(133u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(224u8),
                       ),
                     ],
                   },
                 ],
                 type_metadata: [
                   TypeMetadata {
                     type_name: Option::Some(
                       "AuthZone",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "proofs",
                           "virtual_resources",
                           "virtual_non_fungibles",
                           "local_caller_package_address",
                           "global_caller",
                           "parent",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "Option",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "None",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Some",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "Option",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "None",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Some",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "GlobalCaller",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "GlobalObject",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "PackageBlueprint",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "BlueprintId",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "package_address",
                           "blueprint_name",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "Option",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "None",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Some",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AuthZonePopInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "Option",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "None",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Some",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AuthZonePushInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "proof",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AuthZoneCreateProofOfAmountInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "amount",
                           "resource_address",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AuthZoneCreateProofOfNonFungiblesInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "ids",
                           "resource_address",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AuthZoneCreateProofOfAllInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "resource_address",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AuthZoneDropProofsInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AuthZoneDropSignatureProofsInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AuthZoneDrainInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AuthZoneAssertAccessRuleInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "rule",
                         ],
                       ),
                     ),
                   },
                 ],
                 type_validations: [
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                 ],
               },
             ),
           ),
           lock_status: LockStatus::Locked,
         },
       )
    ├─ Set: SchemaHash(ba27cc155884d6e1aa7a41346fd8c11f18cc99775653caef1fd3455d625fd147)
       Value: KeyValueEntrySubstate::V1(
         KeyValueEntrySubstateV1 {
           value: Option::Some(
             PackageSchemaEntryPayload::V1(
               SchemaV1 {
                 type_kinds: [
                   TypeKind::Enum {
                     variants: {
                       0u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(7u8),
                         ),
                       ],
                     },
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(192u8),
                         ),
                       ],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(230u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(1u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(7u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         3u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         17u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         38u64,
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         4u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         7u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         9u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         11u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         13u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         15u64,
                       ),
                     ],
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           5u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         6u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         6u64,
                       ),
                     ],
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(224u8),
                         ),
                       ],
                     },
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           8u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         6u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         6u64,
                       ),
                     ],
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           10u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         6u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         6u64,
                       ),
                     ],
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           12u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         6u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         6u64,
                       ),
                     ],
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           14u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         6u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         6u64,
                       ),
                     ],
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           16u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         6u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         6u64,
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         18u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         37u64,
                       ),
                     ],
                   },
                   TypeKind::Map {
                     key_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(12u8),
                     ),
                     value_type: LocalTypeId::SchemaLocalIndex(
                       19u64,
                     ),
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         20u64,
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(1u8),
                       ),
                     ],
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           21u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(12u8),
                         ),
                       ],
                       1u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(1u8),
                         ),
                       ],
                       2u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(7u8),
                         ),
                       ],
                       3u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(9u8),
                         ),
                       ],
                       4u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(10u8),
                         ),
                       ],
                       5u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(4u8),
                         ),
                       ],
                       6u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(5u8),
                         ),
                       ],
                       7u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(192u8),
                         ),
                       ],
                       8u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(129u8),
                         ),
                       ],
                       9u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(208u8),
                         ),
                       ],
                       10u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(195u8),
                         ),
                       ],
                       11u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(194u8),
                         ),
                       ],
                       12u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(196u8),
                         ),
                       ],
                       13u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(198u8),
                         ),
                       ],
                       14u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(199u8),
                         ),
                       ],
                       15u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(216u8),
                         ),
                       ],
                       128u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           22u64,
                         ),
                       ],
                       129u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           23u64,
                         ),
                       ],
                       130u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(65u8),
                         ),
                       ],
                       131u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           24u64,
                         ),
                       ],
                       132u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           25u64,
                         ),
                       ],
                       133u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           26u64,
                         ),
                       ],
                       134u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           27u64,
                         ),
                       ],
                       135u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           28u64,
                         ),
                       ],
                       136u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           29u64,
                         ),
                       ],
                       137u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           30u64,
                         ),
                       ],
                       138u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           31u64,
                         ),
                       ],
                       139u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           32u64,
                         ),
                       ],
                       140u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           33u64,
                         ),
                       ],
                       141u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           34u64,
                         ),
                       ],
                       142u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           35u64,
                         ),
                       ],
                       143u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           36u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(12u8),
                     ),
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(1u8),
                     ),
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(9u8),
                     ),
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(10u8),
                     ),
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(4u8),
                     ),
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(5u8),
                     ),
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(192u8),
                     ),
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(129u8),
                     ),
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(208u8),
                     ),
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(195u8),
                     ),
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(194u8),
                     ),
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(196u8),
                     ),
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(198u8),
                     ),
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(199u8),
                     ),
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(216u8),
                     ),
                   },
                   TypeKind::Map {
                     key_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(231u8),
                     ),
                     value_type: LocalTypeId::SchemaLocalIndex(
                       6u64,
                     ),
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(171u8),
                         ),
                       ],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(230u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(1u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(7u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         3u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         17u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         38u64,
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(133u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(161u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(161u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(161u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(7u8),
                         ),
                       ],
                       1u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           48u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [],
                       2u8 => [],
                       3u8 => [],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(192u8),
                         ),
                       ],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         52u64,
                       ),
                     ],
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           53u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [],
                       2u8 => [],
                       3u8 => [],
                       4u8 => [],
                       5u8 => [],
                       6u8 => [],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(161u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         56u64,
                       ),
                     ],
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(7u8),
                     ),
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(192u8),
                       ),
                     ],
                   },
                 ],
                 type_metadata: [
                   TypeMetadata {
                     type_name: Option::Some(
                       "FungibleResourceManagerDivisibilityFieldPayload",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "V1",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "FungibleResourceManagerTotalSupplyFieldPayload",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "V1",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "FungibleResourceManagerCreateInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "owner_role",
                           "track_total_supply",
                           "divisibility",
                           "resource_roles",
                           "metadata",
                           "address_reservation",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "FungibleResourceRoles",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "mint_roles",
                           "burn_roles",
                           "freeze_roles",
                           "recall_roles",
                           "withdraw_roles",
                           "deposit_roles",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "Option",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "None",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Some",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "MintRoles",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "minter",
                           "minter_updater",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "Option",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "None",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Some",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "Option",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "None",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Some",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "BurnRoles",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "burner",
                           "burner_updater",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "Option",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "None",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Some",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "FreezeRoles",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "freezer",
                           "freezer_updater",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "Option",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "None",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Some",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "RecallRoles",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "recaller",
                           "recaller_updater",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "Option",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "None",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Some",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "WithdrawRoles",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "withdrawer",
                           "withdrawer_updater",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "Option",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "None",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Some",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "DepositRoles",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "depositor",
                           "depositor_updater",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ModuleConfig",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "init",
                           "roles",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "KeyValueStoreInit",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "KeyValueStoreInitEntry",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "value",
                           "lock",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "Option",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "None",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Some",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "GenericMetadataValue",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "String",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Bool",
                             ),
                             child_names: Option::None,
                           },
                           2u8 => TypeMetadata {
                             type_name: Option::Some(
                               "U8",
                             ),
                             child_names: Option::None,
                           },
                           3u8 => TypeMetadata {
                             type_name: Option::Some(
                               "U32",
                             ),
                             child_names: Option::None,
                           },
                           4u8 => TypeMetadata {
                             type_name: Option::Some(
                               "U64",
                             ),
                             child_names: Option::None,
                           },
                           5u8 => TypeMetadata {
                             type_name: Option::Some(
                               "I32",
                             ),
                             child_names: Option::None,
                           },
                           6u8 => TypeMetadata {
                             type_name: Option::Some(
                               "I64",
                             ),
                             child_names: Option::None,
                           },
                           7u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Decimal",
                             ),
                             child_names: Option::None,
                           },
                           8u8 => TypeMetadata {
                             type_name: Option::Some(
                               "GlobalAddress",
                             ),
                             child_names: Option::None,
                           },
                           9u8 => TypeMetadata {
                             type_name: Option::Some(
                               "PublicKey",
                             ),
                             child_names: Option::None,
                           },
                           10u8 => TypeMetadata {
                             type_name: Option::Some(
                               "NonFungibleGlobalId",
                             ),
                             child_names: Option::None,
                           },
                           11u8 => TypeMetadata {
                             type_name: Option::Some(
                               "NonFungibleLocalId",
                             ),
                             child_names: Option::None,
                           },
                           12u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Instant",
                             ),
                             child_names: Option::None,
                           },
                           13u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Url",
                             ),
                             child_names: Option::None,
                           },
                           14u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Origin",
                             ),
                             child_names: Option::None,
                           },
                           15u8 => TypeMetadata {
                             type_name: Option::Some(
                               "PublicKeyHash",
                             ),
                             child_names: Option::None,
                           },
                           128u8 => TypeMetadata {
                             type_name: Option::Some(
                               "StringArray",
                             ),
                             child_names: Option::None,
                           },
                           129u8 => TypeMetadata {
                             type_name: Option::Some(
                               "BoolArray",
                             ),
                             child_names: Option::None,
                           },
                           130u8 => TypeMetadata {
                             type_name: Option::Some(
                               "U8Array",
                             ),
                             child_names: Option::None,
                           },
                           131u8 => TypeMetadata {
                             type_name: Option::Some(
                               "U32Array",
                             ),
                             child_names: Option::None,
                           },
                           132u8 => TypeMetadata {
                             type_name: Option::Some(
                               "U64Array",
                             ),
                             child_names: Option::None,
                           },
                           133u8 => TypeMetadata {
                             type_name: Option::Some(
                               "I32Array",
                             ),
                             child_names: Option::None,
                           },
                           134u8 => TypeMetadata {
                             type_name: Option::Some(
                               "I64Array",
                             ),
                             child_names: Option::None,
                           },
                           135u8 => TypeMetadata {
                             type_name: Option::Some(
                               "DecimalArray",
                             ),
                             child_names: Option::None,
                           },
                           136u8 => TypeMetadata {
                             type_name: Option::Some(
                               "GlobalAddressArray",
                             ),
                             child_names: Option::None,
                           },
                           137u8 => TypeMetadata {
                             type_name: Option::Some(
                               "PublicKeyArray",
                             ),
                             child_names: Option::None,
                           },
                           138u8 => TypeMetadata {
                             type_name: Option::Some(
                               "NonFungibleGlobalIdArray",
                             ),
                             child_names: Option::None,
                           },
                           139u8 => TypeMetadata {
                             type_name: Option::Some(
                               "NonFungibleLocalIdArray",
                             ),
                             child_names: Option::None,
                           },
                           140u8 => TypeMetadata {
                             type_name: Option::Some(
                               "InstantArray",
                             ),
                             child_names: Option::None,
                           },
                           141u8 => TypeMetadata {
                             type_name: Option::Some(
                               "UrlArray",
                             ),
                             child_names: Option::None,
                           },
                           142u8 => TypeMetadata {
                             type_name: Option::Some(
                               "OriginArray",
                             ),
                             child_names: Option::None,
                           },
                           143u8 => TypeMetadata {
                             type_name: Option::Some(
                               "PublicKeyHashArray",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "RoleAssignmentInit",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "Option",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "None",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Some",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "FungibleResourceManagerCreateWithInitialSupplyInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "owner_role",
                           "track_total_supply",
                           "divisibility",
                           "initial_supply",
                           "resource_roles",
                           "metadata",
                           "address_reservation",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "FungibleResourceManagerMintInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "amount",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ResourceManagerBurnInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "bucket",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ResourceManagerPackageBurnInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "bucket",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ResourceManagerCreateEmptyVaultInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ResourceManagerCreateEmptyBucketInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ResourceManagerGetResourceTypeInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ResourceType",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Fungible",
                             ),
                             child_names: Option::Some(
                               ChildNames::NamedFields(
                                 [
                                   "divisibility",
                                 ],
                               ),
                             ),
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "NonFungible",
                             ),
                             child_names: Option::Some(
                               ChildNames::NamedFields(
                                 [
                                   "id_type",
                                 ],
                               ),
                             ),
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "NonFungibleIdType",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "String",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Integer",
                             ),
                             child_names: Option::None,
                           },
                           2u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Bytes",
                             ),
                             child_names: Option::None,
                           },
                           3u8 => TypeMetadata {
                             type_name: Option::Some(
                               "RUID",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ResourceManagerGetTotalSupplyInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "Option",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "None",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Some",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ResourceManagerGetAmountForWithdrawalInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "request_amount",
                           "withdraw_strategy",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "WithdrawStrategy",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Exact",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Rounded",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "RoundingMode",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "ToPositiveInfinity",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "ToNegativeInfinity",
                             ),
                             child_names: Option::None,
                           },
                           2u8 => TypeMetadata {
                             type_name: Option::Some(
                               "ToZero",
                             ),
                             child_names: Option::None,
                           },
                           3u8 => TypeMetadata {
                             type_name: Option::Some(
                               "AwayFromZero",
                             ),
                             child_names: Option::None,
                           },
                           4u8 => TypeMetadata {
                             type_name: Option::Some(
                               "ToNearestMidpointTowardZero",
                             ),
                             child_names: Option::None,
                           },
                           5u8 => TypeMetadata {
                             type_name: Option::Some(
                               "ToNearestMidpointAwayFromZero",
                             ),
                             child_names: Option::None,
                           },
                           6u8 => TypeMetadata {
                             type_name: Option::Some(
                               "ToNearestMidpointToEven",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ResourceManagerDropEmptyBucketInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "bucket",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "VaultCreationEvent",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "vault_id",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "NodeId",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "MintFungibleResourceEvent",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "amount",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "BurnFungibleResourceEvent",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "amount",
                         ],
                       ),
                     ),
                   },
                 ],
                 type_validations: [
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::Array(
                     LengthValidation {
                       min: Option::Some(
                         30u32,
                       ),
                       max: Option::Some(
                         30u32,
                       ),
                     },
                   ),
                   TypeValidation::None,
                   TypeValidation::None,
                 ],
               },
             ),
           ),
           lock_status: LockStatus::Locked,
         },
       )
    └─ Set: SchemaHash(e1019ae8efac671ded45c42e359d734e65aac4136d4837006bed8e19cf405da0)
       Value: KeyValueEntrySubstate::V1(
         KeyValueEntrySubstateV1 {
           value: Option::Some(
             PackageSchemaEntryPayload::V1(
               SchemaV1 {
                 type_kinds: [
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(1u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         2u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         3u64,
                       ),
                     ],
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(194u8),
                     ),
                   },
                   TypeKind::Map {
                     key_type: LocalTypeId::SchemaLocalIndex(
                       4u64,
                     ),
                     value_type: LocalTypeId::SchemaLocalIndex(
                       2u64,
                     ),
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(128u8),
                         ),
                       ],
                       1u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(128u8),
                         ),
                       ],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(164u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                 ],
                 type_metadata: [
                   TypeMetadata {
                     type_name: Option::Some(
                       "ProofMoveableSubstate",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "restricted",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "NonFungibleProofSubstate",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "total_locked",
                           "evidence",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "LocalRef",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Bucket",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Vault",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ProofDropInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "proof",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ProofCloneInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ProofGetAmountInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ProofGetResourceAddressInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "NonFungibleProofGetLocalIdsInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [],
                       ),
                     ),
                   },
                 ],
                 type_validations: [
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                 ],
               },
             ),
           ),
           lock_status: LockStatus::Locked,
         },
       )
  ├─ Partition(2): 2 changes
    ├─ Set: "name"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "Resource Package",
         ),
       )
    └─ Set: "description"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "A native package that is called to create a new resource manager on the network.",
         ),
       )
  ├─ Partition(5): 1 change
    └─ Set: Field(0)
       Value: LOCKED RoleAssignmentOwnerFieldPayload::V1(
         OwnerRoleSubstate {
           rule: AccessRule::DenyAll,
           updater: OwnerRoleUpdater::None,
         },
       )
  ├─ Partition(65): 10 changes
    ├─ Set: BlueprintVersionKey { blueprint: "Worktop", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDefinitionEntryPayload::V1(
         BlueprintDefinition {
           interface: BlueprintInterface {
             blueprint_type: BlueprintType::Outer,
             is_transient: true,
             generics: [],
             feature_set: [],
             state: IndexedStateSchema {
               fields: Option::Some(
                 Tuple(
                   PartitionDescription::Logical(
                     PartitionOffset(
                       0u8,
                     ),
                   ),
                   [
                     FieldSchema {
                       field: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("8dd3b61b086ed5767ccd95fb1477c3ea463ad5006118891e3b38ff9ff1f9a1df")),
                           LocalTypeId::SchemaLocalIndex(
                             0u64,
                           ),
                         ),
                       ),
                       condition: Condition::Always,
                       transience: FieldTransience::NotTransient,
                     },
                   ],
                 ),
               ),
               collections: [],
               num_logical_partitions: 1u8,
             },
             functions: {
               "Worktop_drop" => FunctionSchema {
                 receiver: Option::None,
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("8dd3b61b086ed5767ccd95fb1477c3ea463ad5006118891e3b38ff9ff1f9a1df")),
                     LocalTypeId::SchemaLocalIndex(
                       2u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("8dd3b61b086ed5767ccd95fb1477c3ea463ad5006118891e3b38ff9ff1f9a1df")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "Worktop_put" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("8dd3b61b086ed5767ccd95fb1477c3ea463ad5006118891e3b38ff9ff1f9a1df")),
                     LocalTypeId::SchemaLocalIndex(
                       4u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("8dd3b61b086ed5767ccd95fb1477c3ea463ad5006118891e3b38ff9ff1f9a1df")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "Worktop_take" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("8dd3b61b086ed5767ccd95fb1477c3ea463ad5006118891e3b38ff9ff1f9a1df")),
                     LocalTypeId::SchemaLocalIndex(
                       5u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("8dd3b61b086ed5767ccd95fb1477c3ea463ad5006118891e3b38ff9ff1f9a1df")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(161u8),
                     ),
                   ),
                 ),
               },
               "Worktop_take_non_fungibles" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("8dd3b61b086ed5767ccd95fb1477c3ea463ad5006118891e3b38ff9ff1f9a1df")),
                     LocalTypeId::SchemaLocalIndex(
                       6u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("8dd3b61b086ed5767ccd95fb1477c3ea463ad5006118891e3b38ff9ff1f9a1df")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(161u8),
                     ),
                   ),
                 ),
               },
               "Worktop_take_all" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("8dd3b61b086ed5767ccd95fb1477c3ea463ad5006118891e3b38ff9ff1f9a1df")),
                     LocalTypeId::SchemaLocalIndex(
                       8u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("8dd3b61b086ed5767ccd95fb1477c3ea463ad5006118891e3b38ff9ff1f9a1df")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(161u8),
                     ),
                   ),
                 ),
               },
               "Worktop_assert_contains" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("8dd3b61b086ed5767ccd95fb1477c3ea463ad5006118891e3b38ff9ff1f9a1df")),
                     LocalTypeId::SchemaLocalIndex(
                       9u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("8dd3b61b086ed5767ccd95fb1477c3ea463ad5006118891e3b38ff9ff1f9a1df")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "Worktop_assert_contains_amount" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("8dd3b61b086ed5767ccd95fb1477c3ea463ad5006118891e3b38ff9ff1f9a1df")),
                     LocalTypeId::SchemaLocalIndex(
                       10u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("8dd3b61b086ed5767ccd95fb1477c3ea463ad5006118891e3b38ff9ff1f9a1df")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "Worktop_assert_contains_non_fungibles" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("8dd3b61b086ed5767ccd95fb1477c3ea463ad5006118891e3b38ff9ff1f9a1df")),
                     LocalTypeId::SchemaLocalIndex(
                       11u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("8dd3b61b086ed5767ccd95fb1477c3ea463ad5006118891e3b38ff9ff1f9a1df")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "Worktop_drain" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("8dd3b61b086ed5767ccd95fb1477c3ea463ad5006118891e3b38ff9ff1f9a1df")),
                     LocalTypeId::SchemaLocalIndex(
                       12u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("8dd3b61b086ed5767ccd95fb1477c3ea463ad5006118891e3b38ff9ff1f9a1df")),
                     LocalTypeId::SchemaLocalIndex(
                       13u64,
                     ),
                   ),
                 ),
               },
             },
             events: {},
             types: {},
           },
           function_exports: {
             "Worktop_drop" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "Worktop_drop",
             },
             "Worktop_put" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "Worktop_put",
             },
             "Worktop_take" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "Worktop_take",
             },
             "Worktop_take_non_fungibles" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "Worktop_take_non_fungibles",
             },
             "Worktop_take_all" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "Worktop_take_all",
             },
             "Worktop_assert_contains" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "Worktop_assert_contains",
             },
             "Worktop_assert_contains_amount" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "Worktop_assert_contains_amount",
             },
             "Worktop_assert_contains_non_fungibles" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "Worktop_assert_contains_non_fungibles",
             },
             "Worktop_drain" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "Worktop_drain",
             },
           },
           hook_exports: {},
         },
       )
    ├─ Set: BlueprintVersionKey { blueprint: "AuthZone", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDefinitionEntryPayload::V1(
         BlueprintDefinition {
           interface: BlueprintInterface {
             blueprint_type: BlueprintType::Outer,
             is_transient: true,
             generics: [],
             feature_set: [],
             state: IndexedStateSchema {
               fields: Option::Some(
                 Tuple(
                   PartitionDescription::Logical(
                     PartitionOffset(
                       0u8,
                     ),
                   ),
                   [
                     FieldSchema {
                       field: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("b3baa057fe6fe5361ec5bb7f6d21743cdec89844215a53ea964130f9570f5c03")),
                           LocalTypeId::SchemaLocalIndex(
                             0u64,
                           ),
                         ),
                       ),
                       condition: Condition::Always,
                       transience: FieldTransience::NotTransient,
                     },
                   ],
                 ),
               ),
               collections: [],
               num_logical_partitions: 1u8,
             },
             functions: {
               "pop" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("b3baa057fe6fe5361ec5bb7f6d21743cdec89844215a53ea964130f9570f5c03")),
                     LocalTypeId::SchemaLocalIndex(
                       10u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("b3baa057fe6fe5361ec5bb7f6d21743cdec89844215a53ea964130f9570f5c03")),
                     LocalTypeId::SchemaLocalIndex(
                       11u64,
                     ),
                   ),
                 ),
               },
               "push" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("b3baa057fe6fe5361ec5bb7f6d21743cdec89844215a53ea964130f9570f5c03")),
                     LocalTypeId::SchemaLocalIndex(
                       12u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("b3baa057fe6fe5361ec5bb7f6d21743cdec89844215a53ea964130f9570f5c03")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "create_proof_of_amount" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("b3baa057fe6fe5361ec5bb7f6d21743cdec89844215a53ea964130f9570f5c03")),
                     LocalTypeId::SchemaLocalIndex(
                       13u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("b3baa057fe6fe5361ec5bb7f6d21743cdec89844215a53ea964130f9570f5c03")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(164u8),
                     ),
                   ),
                 ),
               },
               "create_proof_of_non_fungibles" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("b3baa057fe6fe5361ec5bb7f6d21743cdec89844215a53ea964130f9570f5c03")),
                     LocalTypeId::SchemaLocalIndex(
                       14u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("b3baa057fe6fe5361ec5bb7f6d21743cdec89844215a53ea964130f9570f5c03")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(164u8),
                     ),
                   ),
                 ),
               },
               "create_proof_of_all" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("b3baa057fe6fe5361ec5bb7f6d21743cdec89844215a53ea964130f9570f5c03")),
                     LocalTypeId::SchemaLocalIndex(
                       16u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("b3baa057fe6fe5361ec5bb7f6d21743cdec89844215a53ea964130f9570f5c03")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(164u8),
                     ),
                   ),
                 ),
               },
               "drop_proofs" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("b3baa057fe6fe5361ec5bb7f6d21743cdec89844215a53ea964130f9570f5c03")),
                     LocalTypeId::SchemaLocalIndex(
                       17u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("b3baa057fe6fe5361ec5bb7f6d21743cdec89844215a53ea964130f9570f5c03")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "drop_signature_proofs" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("b3baa057fe6fe5361ec5bb7f6d21743cdec89844215a53ea964130f9570f5c03")),
                     LocalTypeId::SchemaLocalIndex(
                       18u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("b3baa057fe6fe5361ec5bb7f6d21743cdec89844215a53ea964130f9570f5c03")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "drop_regular_proofs" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("b3baa057fe6fe5361ec5bb7f6d21743cdec89844215a53ea964130f9570f5c03")),
                     LocalTypeId::SchemaLocalIndex(
                       18u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("b3baa057fe6fe5361ec5bb7f6d21743cdec89844215a53ea964130f9570f5c03")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "drain" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("b3baa057fe6fe5361ec5bb7f6d21743cdec89844215a53ea964130f9570f5c03")),
                     LocalTypeId::SchemaLocalIndex(
                       19u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("b3baa057fe6fe5361ec5bb7f6d21743cdec89844215a53ea964130f9570f5c03")),
                     LocalTypeId::SchemaLocalIndex(
                       1u64,
                     ),
                   ),
                 ),
               },
               "assert_access_rule" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRef,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("b3baa057fe6fe5361ec5bb7f6d21743cdec89844215a53ea964130f9570f5c03")),
                     LocalTypeId::SchemaLocalIndex(
                       20u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("b3baa057fe6fe5361ec5bb7f6d21743cdec89844215a53ea964130f9570f5c03")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
             },
             events: {},
             types: {},
           },
           function_exports: {
             "pop" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "AuthZone_pop",
             },
             "push" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "AuthZone_push",
             },
             "create_proof_of_amount" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "AuthZone_create_proof_of_amount",
             },
             "create_proof_of_non_fungibles" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "AuthZone_create_proof_of_non_fungibles",
             },
             "create_proof_of_all" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "AuthZone_create_proof_of_all",
             },
             "drop_proofs" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "AuthZone_drop_proofs",
             },
             "drop_signature_proofs" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "AuthZone_drop_signature_proofs",
             },
             "drop_regular_proofs" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "AuthZone_drop_regular_proofs",
             },
             "drain" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "AuthZone_drain",
             },
             "assert_access_rule" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "AuthZone_assert_access_rule",
             },
           },
           hook_exports: {},
         },
       )
    ├─ Set: BlueprintVersionKey { blueprint: "FungibleProof", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDefinitionEntryPayload::V1(
         BlueprintDefinition {
           interface: BlueprintInterface {
             blueprint_type: BlueprintType::Inner {
               outer_blueprint: "FungibleResourceManager",
             },
             is_transient: true,
             generics: [],
             feature_set: [],
             state: IndexedStateSchema {
               fields: Option::Some(
                 Tuple(
                   PartitionDescription::Logical(
                     PartitionOffset(
                       0u8,
                     ),
                   ),
                   [
                     FieldSchema {
                       field: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("385f392996a25f2f7a01979e07bebd8d87434b27ce391b7b64afdac449ee7578")),
                           LocalTypeId::SchemaLocalIndex(
                             0u64,
                           ),
                         ),
                       ),
                       condition: Condition::Always,
                       transience: FieldTransience::NotTransient,
                     },
                     FieldSchema {
                       field: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("385f392996a25f2f7a01979e07bebd8d87434b27ce391b7b64afdac449ee7578")),
                           LocalTypeId::SchemaLocalIndex(
                             1u64,
                           ),
                         ),
                       ),
                       condition: Condition::Always,
                       transience: FieldTransience::NotTransient,
                     },
                   ],
                 ),
               ),
               collections: [],
               num_logical_partitions: 1u8,
             },
             functions: {
               "Proof_drop" => FunctionSchema {
                 receiver: Option::None,
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("385f392996a25f2f7a01979e07bebd8d87434b27ce391b7b64afdac449ee7578")),
                     LocalTypeId::SchemaLocalIndex(
                       4u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("385f392996a25f2f7a01979e07bebd8d87434b27ce391b7b64afdac449ee7578")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "clone" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("385f392996a25f2f7a01979e07bebd8d87434b27ce391b7b64afdac449ee7578")),
                     LocalTypeId::SchemaLocalIndex(
                       5u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("385f392996a25f2f7a01979e07bebd8d87434b27ce391b7b64afdac449ee7578")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(164u8),
                     ),
                   ),
                 ),
               },
               "Proof_get_amount" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRef,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("385f392996a25f2f7a01979e07bebd8d87434b27ce391b7b64afdac449ee7578")),
                     LocalTypeId::SchemaLocalIndex(
                       6u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("385f392996a25f2f7a01979e07bebd8d87434b27ce391b7b64afdac449ee7578")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(192u8),
                     ),
                   ),
                 ),
               },
               "Proof_get_resource_address" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRef,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("385f392996a25f2f7a01979e07bebd8d87434b27ce391b7b64afdac449ee7578")),
                     LocalTypeId::SchemaLocalIndex(
                       7u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("385f392996a25f2f7a01979e07bebd8d87434b27ce391b7b64afdac449ee7578")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(133u8),
                     ),
                   ),
                 ),
               },
             },
             events: {},
             types: {},
           },
           function_exports: {
             "Proof_drop" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "drop_FungibleProof",
             },
             "clone" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "clone_FungibleProof",
             },
             "Proof_get_amount" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "get_amount_FungibleProof",
             },
             "Proof_get_resource_address" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "get_resource_address_FungibleProof",
             },
           },
           hook_exports: {
             BlueprintHook::OnDrop => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "on_drop_FungibleProof",
             },
             BlueprintHook::OnMove => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "on_move_FungibleProof",
             },
           },
         },
       )
    ├─ Set: BlueprintVersionKey { blueprint: "FungibleVault", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDefinitionEntryPayload::V1(
         BlueprintDefinition {
           interface: BlueprintInterface {
             blueprint_type: BlueprintType::Inner {
               outer_blueprint: "FungibleResourceManager",
             },
             is_transient: false,
             generics: [],
             feature_set: [],
             state: IndexedStateSchema {
               fields: Option::Some(
                 Tuple(
                   PartitionDescription::Logical(
                     PartitionOffset(
                       0u8,
                     ),
                   ),
                   [
                     FieldSchema {
                       field: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("462a3fea283117aab2b01c297812bdc0fa9060b29eb5e68b847f361bc1201933")),
                           LocalTypeId::SchemaLocalIndex(
                             0u64,
                           ),
                         ),
                       ),
                       condition: Condition::Always,
                       transience: FieldTransience::NotTransient,
                     },
                     FieldSchema {
                       field: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("462a3fea283117aab2b01c297812bdc0fa9060b29eb5e68b847f361bc1201933")),
                           LocalTypeId::SchemaLocalIndex(
                             2u64,
                           ),
                         ),
                       ),
                       condition: Condition::Always,
                       transience: FieldTransience::TransientStatic {
                         default_value: hex("5c220001210123a00a00"),
                       },
                     },
                     FieldSchema {
                       field: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("462a3fea283117aab2b01c297812bdc0fa9060b29eb5e68b847f361bc1201933")),
                           LocalTypeId::SchemaLocalIndex(
                             5u64,
                           ),
                         ),
                       ),
                       condition: Condition::IfOuterFeature(
                         "vault_freeze",
                       ),
                       transience: FieldTransience::NotTransient,
                     },
                   ],
                 ),
               ),
               collections: [],
               num_logical_partitions: 1u8,
             },
             functions: {
               "take" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("462a3fea283117aab2b01c297812bdc0fa9060b29eb5e68b847f361bc1201933")),
                     LocalTypeId::SchemaLocalIndex(
                       7u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("462a3fea283117aab2b01c297812bdc0fa9060b29eb5e68b847f361bc1201933")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(161u8),
                     ),
                   ),
                 ),
               },
               "take_advanced" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("462a3fea283117aab2b01c297812bdc0fa9060b29eb5e68b847f361bc1201933")),
                     LocalTypeId::SchemaLocalIndex(
                       8u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("462a3fea283117aab2b01c297812bdc0fa9060b29eb5e68b847f361bc1201933")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(161u8),
                     ),
                   ),
                 ),
               },
               "put" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("462a3fea283117aab2b01c297812bdc0fa9060b29eb5e68b847f361bc1201933")),
                     LocalTypeId::SchemaLocalIndex(
                       11u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("462a3fea283117aab2b01c297812bdc0fa9060b29eb5e68b847f361bc1201933")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "get_amount" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRef,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("462a3fea283117aab2b01c297812bdc0fa9060b29eb5e68b847f361bc1201933")),
                     LocalTypeId::SchemaLocalIndex(
                       12u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("462a3fea283117aab2b01c297812bdc0fa9060b29eb5e68b847f361bc1201933")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(192u8),
                     ),
                   ),
                 ),
               },
               "lock_fee" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("462a3fea283117aab2b01c297812bdc0fa9060b29eb5e68b847f361bc1201933")),
                     LocalTypeId::SchemaLocalIndex(
                       13u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("462a3fea283117aab2b01c297812bdc0fa9060b29eb5e68b847f361bc1201933")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "recall" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 2u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("462a3fea283117aab2b01c297812bdc0fa9060b29eb5e68b847f361bc1201933")),
                     LocalTypeId::SchemaLocalIndex(
                       14u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("462a3fea283117aab2b01c297812bdc0fa9060b29eb5e68b847f361bc1201933")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(161u8),
                     ),
                   ),
                 ),
               },
               "freeze" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 2u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("462a3fea283117aab2b01c297812bdc0fa9060b29eb5e68b847f361bc1201933")),
                     LocalTypeId::SchemaLocalIndex(
                       15u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("462a3fea283117aab2b01c297812bdc0fa9060b29eb5e68b847f361bc1201933")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "unfreeze" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 2u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("462a3fea283117aab2b01c297812bdc0fa9060b29eb5e68b847f361bc1201933")),
                     LocalTypeId::SchemaLocalIndex(
                       17u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("462a3fea283117aab2b01c297812bdc0fa9060b29eb5e68b847f361bc1201933")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "create_proof_of_amount" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("462a3fea283117aab2b01c297812bdc0fa9060b29eb5e68b847f361bc1201933")),
                     LocalTypeId::SchemaLocalIndex(
                       18u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("462a3fea283117aab2b01c297812bdc0fa9060b29eb5e68b847f361bc1201933")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(164u8),
                     ),
                   ),
                 ),
               },
               "lock_amount" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("462a3fea283117aab2b01c297812bdc0fa9060b29eb5e68b847f361bc1201933")),
                     LocalTypeId::SchemaLocalIndex(
                       19u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("462a3fea283117aab2b01c297812bdc0fa9060b29eb5e68b847f361bc1201933")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "unlock_amount" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("462a3fea283117aab2b01c297812bdc0fa9060b29eb5e68b847f361bc1201933")),
                     LocalTypeId::SchemaLocalIndex(
                       20u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("462a3fea283117aab2b01c297812bdc0fa9060b29eb5e68b847f361bc1201933")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "burn" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("462a3fea283117aab2b01c297812bdc0fa9060b29eb5e68b847f361bc1201933")),
                     LocalTypeId::SchemaLocalIndex(
                       21u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("462a3fea283117aab2b01c297812bdc0fa9060b29eb5e68b847f361bc1201933")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
             },
             events: {
               "LockFeeEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("462a3fea283117aab2b01c297812bdc0fa9060b29eb5e68b847f361bc1201933")),
                   LocalTypeId::SchemaLocalIndex(
                     22u64,
                   ),
                 ),
               ),
               "PayFeeEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("462a3fea283117aab2b01c297812bdc0fa9060b29eb5e68b847f361bc1201933")),
                   LocalTypeId::SchemaLocalIndex(
                     23u64,
                   ),
                 ),
               ),
               "WithdrawEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("462a3fea283117aab2b01c297812bdc0fa9060b29eb5e68b847f361bc1201933")),
                   LocalTypeId::SchemaLocalIndex(
                     24u64,
                   ),
                 ),
               ),
               "DepositEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("462a3fea283117aab2b01c297812bdc0fa9060b29eb5e68b847f361bc1201933")),
                   LocalTypeId::SchemaLocalIndex(
                     25u64,
                   ),
                 ),
               ),
               "RecallEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("462a3fea283117aab2b01c297812bdc0fa9060b29eb5e68b847f361bc1201933")),
                   LocalTypeId::SchemaLocalIndex(
                     26u64,
                   ),
                 ),
               ),
             },
             types: {},
           },
           function_exports: {
             "take" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "take_FungibleVault",
             },
             "take_advanced" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "take_advanced_FungibleVault",
             },
             "put" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "put_FungibleVault",
             },
             "get_amount" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "get_amount_FungibleVault",
             },
             "lock_fee" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "lock_fee",
             },
             "recall" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "recall_FungibleVault",
             },
             "freeze" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "freeze_FungibleVault",
             },
             "unfreeze" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "unfreeze_FungibleVault",
             },
             "create_proof_of_amount" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "create_proof_of_amount_FungibleVault",
             },
             "lock_amount" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "lock_amount_FungibleVault",
             },
             "unlock_amount" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "unlock_amount_FungibleVault",
             },
             "burn" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "burn_FungibleVault",
             },
           },
           hook_exports: {},
         },
       )
    ├─ Set: BlueprintVersionKey { blueprint: "FungibleBucket", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDefinitionEntryPayload::V1(
         BlueprintDefinition {
           interface: BlueprintInterface {
             blueprint_type: BlueprintType::Inner {
               outer_blueprint: "FungibleResourceManager",
             },
             is_transient: true,
             generics: [],
             feature_set: [],
             state: IndexedStateSchema {
               fields: Option::Some(
                 Tuple(
                   PartitionDescription::Logical(
                     PartitionOffset(
                       0u8,
                     ),
                   ),
                   [
                     FieldSchema {
                       field: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("61d7f29e0f470750d734dded75f70db09eee7d932325eefb1f5acc09de31543a")),
                           LocalTypeId::SchemaLocalIndex(
                             0u64,
                           ),
                         ),
                       ),
                       condition: Condition::Always,
                       transience: FieldTransience::NotTransient,
                     },
                     FieldSchema {
                       field: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("61d7f29e0f470750d734dded75f70db09eee7d932325eefb1f5acc09de31543a")),
                           LocalTypeId::SchemaLocalIndex(
                             1u64,
                           ),
                         ),
                       ),
                       condition: Condition::Always,
                       transience: FieldTransience::NotTransient,
                     },
                   ],
                 ),
               ),
               collections: [],
               num_logical_partitions: 1u8,
             },
             functions: {
               "put" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("61d7f29e0f470750d734dded75f70db09eee7d932325eefb1f5acc09de31543a")),
                     LocalTypeId::SchemaLocalIndex(
                       3u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("61d7f29e0f470750d734dded75f70db09eee7d932325eefb1f5acc09de31543a")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "take" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("61d7f29e0f470750d734dded75f70db09eee7d932325eefb1f5acc09de31543a")),
                     LocalTypeId::SchemaLocalIndex(
                       4u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("61d7f29e0f470750d734dded75f70db09eee7d932325eefb1f5acc09de31543a")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(161u8),
                     ),
                   ),
                 ),
               },
               "take_advanced" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("61d7f29e0f470750d734dded75f70db09eee7d932325eefb1f5acc09de31543a")),
                     LocalTypeId::SchemaLocalIndex(
                       5u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("61d7f29e0f470750d734dded75f70db09eee7d932325eefb1f5acc09de31543a")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(161u8),
                     ),
                   ),
                 ),
               },
               "get_amount" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRef,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("61d7f29e0f470750d734dded75f70db09eee7d932325eefb1f5acc09de31543a")),
                     LocalTypeId::SchemaLocalIndex(
                       8u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("61d7f29e0f470750d734dded75f70db09eee7d932325eefb1f5acc09de31543a")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(192u8),
                     ),
                   ),
                 ),
               },
               "get_resource_address" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRef,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("61d7f29e0f470750d734dded75f70db09eee7d932325eefb1f5acc09de31543a")),
                     LocalTypeId::SchemaLocalIndex(
                       9u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("61d7f29e0f470750d734dded75f70db09eee7d932325eefb1f5acc09de31543a")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(133u8),
                     ),
                   ),
                 ),
               },
               "create_proof_of_amount" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("61d7f29e0f470750d734dded75f70db09eee7d932325eefb1f5acc09de31543a")),
                     LocalTypeId::SchemaLocalIndex(
                       10u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("61d7f29e0f470750d734dded75f70db09eee7d932325eefb1f5acc09de31543a")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(164u8),
                     ),
                   ),
                 ),
               },
               "create_proof_of_all" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("61d7f29e0f470750d734dded75f70db09eee7d932325eefb1f5acc09de31543a")),
                     LocalTypeId::SchemaLocalIndex(
                       11u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("61d7f29e0f470750d734dded75f70db09eee7d932325eefb1f5acc09de31543a")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(164u8),
                     ),
                   ),
                 ),
               },
               "lock_amount" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("61d7f29e0f470750d734dded75f70db09eee7d932325eefb1f5acc09de31543a")),
                     LocalTypeId::SchemaLocalIndex(
                       12u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("61d7f29e0f470750d734dded75f70db09eee7d932325eefb1f5acc09de31543a")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "unlock_amount" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("61d7f29e0f470750d734dded75f70db09eee7d932325eefb1f5acc09de31543a")),
                     LocalTypeId::SchemaLocalIndex(
                       13u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("61d7f29e0f470750d734dded75f70db09eee7d932325eefb1f5acc09de31543a")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
             },
             events: {},
             types: {},
           },
           function_exports: {
             "put" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "put_FungibleBucket",
             },
             "take" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "take_FungibleBucket",
             },
             "take_advanced" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "take_advanced_FungibleBucket",
             },
             "get_amount" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "get_amount_FungibleBucket",
             },
             "get_resource_address" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "get_resource_address_FungibleBucket",
             },
             "create_proof_of_amount" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "create_proof_of_amount_FungibleBucket",
             },
             "create_proof_of_all" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "create_proof_of_all_FungibleBucket",
             },
             "lock_amount" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "lock_amount_FungibleBucket",
             },
             "unlock_amount" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "unlock_amount_FungibleBucket",
             },
           },
           hook_exports: {},
         },
       )
    ├─ Set: BlueprintVersionKey { blueprint: "NonFungibleProof", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDefinitionEntryPayload::V1(
         BlueprintDefinition {
           interface: BlueprintInterface {
             blueprint_type: BlueprintType::Inner {
               outer_blueprint: "NonFungibleResourceManager",
             },
             is_transient: true,
             generics: [],
             feature_set: [],
             state: IndexedStateSchema {
               fields: Option::Some(
                 Tuple(
                   PartitionDescription::Logical(
                     PartitionOffset(
                       0u8,
                     ),
                   ),
                   [
                     FieldSchema {
                       field: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("e1019ae8efac671ded45c42e359d734e65aac4136d4837006bed8e19cf405da0")),
                           LocalTypeId::SchemaLocalIndex(
                             0u64,
                           ),
                         ),
                       ),
                       condition: Condition::Always,
                       transience: FieldTransience::NotTransient,
                     },
                     FieldSchema {
                       field: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("e1019ae8efac671ded45c42e359d734e65aac4136d4837006bed8e19cf405da0")),
                           LocalTypeId::SchemaLocalIndex(
                             1u64,
                           ),
                         ),
                       ),
                       condition: Condition::Always,
                       transience: FieldTransience::NotTransient,
                     },
                   ],
                 ),
               ),
               collections: [],
               num_logical_partitions: 1u8,
             },
             functions: {
               "Proof_drop" => FunctionSchema {
                 receiver: Option::None,
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("e1019ae8efac671ded45c42e359d734e65aac4136d4837006bed8e19cf405da0")),
                     LocalTypeId::SchemaLocalIndex(
                       5u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("e1019ae8efac671ded45c42e359d734e65aac4136d4837006bed8e19cf405da0")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "clone" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRef,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("e1019ae8efac671ded45c42e359d734e65aac4136d4837006bed8e19cf405da0")),
                     LocalTypeId::SchemaLocalIndex(
                       6u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("e1019ae8efac671ded45c42e359d734e65aac4136d4837006bed8e19cf405da0")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(164u8),
                     ),
                   ),
                 ),
               },
               "Proof_get_amount" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRef,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("e1019ae8efac671ded45c42e359d734e65aac4136d4837006bed8e19cf405da0")),
                     LocalTypeId::SchemaLocalIndex(
                       7u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("e1019ae8efac671ded45c42e359d734e65aac4136d4837006bed8e19cf405da0")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(192u8),
                     ),
                   ),
                 ),
               },
               "Proof_get_resource_address" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRef,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("e1019ae8efac671ded45c42e359d734e65aac4136d4837006bed8e19cf405da0")),
                     LocalTypeId::SchemaLocalIndex(
                       8u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("e1019ae8efac671ded45c42e359d734e65aac4136d4837006bed8e19cf405da0")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(133u8),
                     ),
                   ),
                 ),
               },
               "NonFungibleProof_get_local_ids" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRef,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("e1019ae8efac671ded45c42e359d734e65aac4136d4837006bed8e19cf405da0")),
                     LocalTypeId::SchemaLocalIndex(
                       9u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("e1019ae8efac671ded45c42e359d734e65aac4136d4837006bed8e19cf405da0")),
                     LocalTypeId::SchemaLocalIndex(
                       2u64,
                     ),
                   ),
                 ),
               },
             },
             events: {},
             types: {},
           },
           function_exports: {
             "Proof_drop" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "drop_NonFungibleProof",
             },
             "clone" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "clone_NonFungibleProof",
             },
             "Proof_get_amount" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "get_amount_NonFungibleProof",
             },
             "Proof_get_resource_address" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "get_resource_address_NonFungibleProof",
             },
             "NonFungibleProof_get_local_ids" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "NonFungibleProof_get_local_ids",
             },
           },
           hook_exports: {
             BlueprintHook::OnDrop => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "on_drop_NonFungibleProof",
             },
             BlueprintHook::OnMove => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "on_move_NonFungibleProof",
             },
           },
         },
       )
    ├─ Set: BlueprintVersionKey { blueprint: "NonFungibleVault", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDefinitionEntryPayload::V1(
         BlueprintDefinition {
           interface: BlueprintInterface {
             blueprint_type: BlueprintType::Inner {
               outer_blueprint: "NonFungibleResourceManager",
             },
             is_transient: false,
             generics: [],
             feature_set: [],
             state: IndexedStateSchema {
               fields: Option::Some(
                 Tuple(
                   PartitionDescription::Logical(
                     PartitionOffset(
                       0u8,
                     ),
                   ),
                   [
                     FieldSchema {
                       field: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("aa18e25a2222655fec8fdce11d9951f8258ce83b17e18cdfe52debea86b8419b")),
                           LocalTypeId::SchemaLocalIndex(
                             0u64,
                           ),
                         ),
                       ),
                       condition: Condition::Always,
                       transience: FieldTransience::NotTransient,
                     },
                     FieldSchema {
                       field: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("aa18e25a2222655fec8fdce11d9951f8258ce83b17e18cdfe52debea86b8419b")),
                           LocalTypeId::SchemaLocalIndex(
                             2u64,
                           ),
                         ),
                       ),
                       condition: Condition::Always,
                       transience: FieldTransience::TransientStatic {
                         default_value: hex("5c220001210123c00a00"),
                       },
                     },
                     FieldSchema {
                       field: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("aa18e25a2222655fec8fdce11d9951f8258ce83b17e18cdfe52debea86b8419b")),
                           LocalTypeId::SchemaLocalIndex(
                             5u64,
                           ),
                         ),
                       ),
                       condition: Condition::IfOuterFeature(
                         "vault_freeze",
                       ),
                       transience: FieldTransience::NotTransient,
                     },
                   ],
                 ),
               ),
               collections: [
                 Tuple(
                   PartitionDescription::Logical(
                     PartitionOffset(
                       1u8,
                     ),
                   ),
                   BlueprintCollectionSchema::Index(
                     BlueprintKeyValueSchema {
                       key: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("aa18e25a2222655fec8fdce11d9951f8258ce83b17e18cdfe52debea86b8419b")),
                           LocalTypeId::WellKnown(
                             WellKnownTypeId(194u8),
                           ),
                         ),
                       ),
                       value: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("aa18e25a2222655fec8fdce11d9951f8258ce83b17e18cdfe52debea86b8419b")),
                           LocalTypeId::SchemaLocalIndex(
                             7u64,
                           ),
                         ),
                       ),
                       allow_ownership: false,
                     },
                   ),
                 ),
               ],
               num_logical_partitions: 2u8,
             },
             functions: {
               "take" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("aa18e25a2222655fec8fdce11d9951f8258ce83b17e18cdfe52debea86b8419b")),
                     LocalTypeId::SchemaLocalIndex(
                       8u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("aa18e25a2222655fec8fdce11d9951f8258ce83b17e18cdfe52debea86b8419b")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(161u8),
                     ),
                   ),
                 ),
               },
               "take_advanced" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("aa18e25a2222655fec8fdce11d9951f8258ce83b17e18cdfe52debea86b8419b")),
                     LocalTypeId::SchemaLocalIndex(
                       9u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("aa18e25a2222655fec8fdce11d9951f8258ce83b17e18cdfe52debea86b8419b")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(161u8),
                     ),
                   ),
                 ),
               },
               "take_non_fungibles" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("aa18e25a2222655fec8fdce11d9951f8258ce83b17e18cdfe52debea86b8419b")),
                     LocalTypeId::SchemaLocalIndex(
                       12u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("aa18e25a2222655fec8fdce11d9951f8258ce83b17e18cdfe52debea86b8419b")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(161u8),
                     ),
                   ),
                 ),
               },
               "recall" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 2u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("aa18e25a2222655fec8fdce11d9951f8258ce83b17e18cdfe52debea86b8419b")),
                     LocalTypeId::SchemaLocalIndex(
                       14u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("aa18e25a2222655fec8fdce11d9951f8258ce83b17e18cdfe52debea86b8419b")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(161u8),
                     ),
                   ),
                 ),
               },
               "freeze" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 2u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("aa18e25a2222655fec8fdce11d9951f8258ce83b17e18cdfe52debea86b8419b")),
                     LocalTypeId::SchemaLocalIndex(
                       15u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("aa18e25a2222655fec8fdce11d9951f8258ce83b17e18cdfe52debea86b8419b")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "unfreeze" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 2u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("aa18e25a2222655fec8fdce11d9951f8258ce83b17e18cdfe52debea86b8419b")),
                     LocalTypeId::SchemaLocalIndex(
                       17u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("aa18e25a2222655fec8fdce11d9951f8258ce83b17e18cdfe52debea86b8419b")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "recall_non_fungibles" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 2u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("aa18e25a2222655fec8fdce11d9951f8258ce83b17e18cdfe52debea86b8419b")),
                     LocalTypeId::SchemaLocalIndex(
                       18u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("aa18e25a2222655fec8fdce11d9951f8258ce83b17e18cdfe52debea86b8419b")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(161u8),
                     ),
                   ),
                 ),
               },
               "put" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("aa18e25a2222655fec8fdce11d9951f8258ce83b17e18cdfe52debea86b8419b")),
                     LocalTypeId::SchemaLocalIndex(
                       19u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("aa18e25a2222655fec8fdce11d9951f8258ce83b17e18cdfe52debea86b8419b")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "get_amount" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRef,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("aa18e25a2222655fec8fdce11d9951f8258ce83b17e18cdfe52debea86b8419b")),
                     LocalTypeId::SchemaLocalIndex(
                       20u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("aa18e25a2222655fec8fdce11d9951f8258ce83b17e18cdfe52debea86b8419b")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(192u8),
                     ),
                   ),
                 ),
               },
               "get_non_fungible_local_ids" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRef,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("aa18e25a2222655fec8fdce11d9951f8258ce83b17e18cdfe52debea86b8419b")),
                     LocalTypeId::SchemaLocalIndex(
                       21u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("aa18e25a2222655fec8fdce11d9951f8258ce83b17e18cdfe52debea86b8419b")),
                     LocalTypeId::SchemaLocalIndex(
                       13u64,
                     ),
                   ),
                 ),
               },
               "contains_non_fungible" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRef,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("aa18e25a2222655fec8fdce11d9951f8258ce83b17e18cdfe52debea86b8419b")),
                     LocalTypeId::SchemaLocalIndex(
                       22u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("aa18e25a2222655fec8fdce11d9951f8258ce83b17e18cdfe52debea86b8419b")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(1u8),
                     ),
                   ),
                 ),
               },
               "create_proof_of_non_fungibles" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("aa18e25a2222655fec8fdce11d9951f8258ce83b17e18cdfe52debea86b8419b")),
                     LocalTypeId::SchemaLocalIndex(
                       23u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("aa18e25a2222655fec8fdce11d9951f8258ce83b17e18cdfe52debea86b8419b")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(164u8),
                     ),
                   ),
                 ),
               },
               "lock_non_fungibles" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("aa18e25a2222655fec8fdce11d9951f8258ce83b17e18cdfe52debea86b8419b")),
                     LocalTypeId::SchemaLocalIndex(
                       24u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("aa18e25a2222655fec8fdce11d9951f8258ce83b17e18cdfe52debea86b8419b")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "unlock_non_fungibles" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("aa18e25a2222655fec8fdce11d9951f8258ce83b17e18cdfe52debea86b8419b")),
                     LocalTypeId::SchemaLocalIndex(
                       25u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("aa18e25a2222655fec8fdce11d9951f8258ce83b17e18cdfe52debea86b8419b")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "burn" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("aa18e25a2222655fec8fdce11d9951f8258ce83b17e18cdfe52debea86b8419b")),
                     LocalTypeId::SchemaLocalIndex(
                       26u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("aa18e25a2222655fec8fdce11d9951f8258ce83b17e18cdfe52debea86b8419b")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "burn_non_fungibles" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("aa18e25a2222655fec8fdce11d9951f8258ce83b17e18cdfe52debea86b8419b")),
                     LocalTypeId::SchemaLocalIndex(
                       27u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("aa18e25a2222655fec8fdce11d9951f8258ce83b17e18cdfe52debea86b8419b")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
             },
             events: {
               "WithdrawEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("aa18e25a2222655fec8fdce11d9951f8258ce83b17e18cdfe52debea86b8419b")),
                   LocalTypeId::SchemaLocalIndex(
                     28u64,
                   ),
                 ),
               ),
               "DepositEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("aa18e25a2222655fec8fdce11d9951f8258ce83b17e18cdfe52debea86b8419b")),
                   LocalTypeId::SchemaLocalIndex(
                     29u64,
                   ),
                 ),
               ),
               "RecallEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("aa18e25a2222655fec8fdce11d9951f8258ce83b17e18cdfe52debea86b8419b")),
                   LocalTypeId::SchemaLocalIndex(
                     30u64,
                   ),
                 ),
               ),
             },
             types: {},
           },
           function_exports: {
             "take" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "take_NonFungibleVault",
             },
             "take_advanced" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "take_advanced_NonFungibleVault",
             },
             "take_non_fungibles" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "take_non_fungibles",
             },
             "recall" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "recall_NonFungibleVault",
             },
             "freeze" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "freeze_NonFungibleVault",
             },
             "unfreeze" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "unfreeze_NonFungibleVault",
             },
             "recall_non_fungibles" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "recall_non_fungibles",
             },
             "put" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "put_NonFungibleVault",
             },
             "get_amount" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "get_amount_NonFungibleVault",
             },
             "get_non_fungible_local_ids" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "get_non_fungible_local_ids",
             },
             "contains_non_fungible" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "contains_non_fungible",
             },
             "create_proof_of_non_fungibles" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "create_proof_of_non_fungibles",
             },
             "lock_non_fungibles" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "unlock_fungibles_NonFungibleVault",
             },
             "unlock_non_fungibles" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "unlock_non_fungibles_NonFungibleVault",
             },
             "burn" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "burn_NonFungibleVault",
             },
             "burn_non_fungibles" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "burn_non_fungibles",
             },
           },
           hook_exports: {},
         },
       )
    ├─ Set: BlueprintVersionKey { blueprint: "NonFungibleBucket", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDefinitionEntryPayload::V1(
         BlueprintDefinition {
           interface: BlueprintInterface {
             blueprint_type: BlueprintType::Inner {
               outer_blueprint: "NonFungibleResourceManager",
             },
             is_transient: true,
             generics: [],
             feature_set: [],
             state: IndexedStateSchema {
               fields: Option::Some(
                 Tuple(
                   PartitionDescription::Logical(
                     PartitionOffset(
                       0u8,
                     ),
                   ),
                   [
                     FieldSchema {
                       field: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("723e6bf6d798acc863bd5ac3574dfcebc3b32276eb0bab577fea1450433e417d")),
                           LocalTypeId::SchemaLocalIndex(
                             0u64,
                           ),
                         ),
                       ),
                       condition: Condition::Always,
                       transience: FieldTransience::NotTransient,
                     },
                     FieldSchema {
                       field: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("723e6bf6d798acc863bd5ac3574dfcebc3b32276eb0bab577fea1450433e417d")),
                           LocalTypeId::SchemaLocalIndex(
                             2u64,
                           ),
                         ),
                       ),
                       condition: Condition::Always,
                       transience: FieldTransience::NotTransient,
                     },
                   ],
                 ),
               ),
               collections: [],
               num_logical_partitions: 1u8,
             },
             functions: {
               "put" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("723e6bf6d798acc863bd5ac3574dfcebc3b32276eb0bab577fea1450433e417d")),
                     LocalTypeId::SchemaLocalIndex(
                       4u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("723e6bf6d798acc863bd5ac3574dfcebc3b32276eb0bab577fea1450433e417d")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "take" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("723e6bf6d798acc863bd5ac3574dfcebc3b32276eb0bab577fea1450433e417d")),
                     LocalTypeId::SchemaLocalIndex(
                       5u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("723e6bf6d798acc863bd5ac3574dfcebc3b32276eb0bab577fea1450433e417d")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(161u8),
                     ),
                   ),
                 ),
               },
               "take_advanced" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("723e6bf6d798acc863bd5ac3574dfcebc3b32276eb0bab577fea1450433e417d")),
                     LocalTypeId::SchemaLocalIndex(
                       6u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("723e6bf6d798acc863bd5ac3574dfcebc3b32276eb0bab577fea1450433e417d")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(161u8),
                     ),
                   ),
                 ),
               },
               "take_non_fungibles" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("723e6bf6d798acc863bd5ac3574dfcebc3b32276eb0bab577fea1450433e417d")),
                     LocalTypeId::SchemaLocalIndex(
                       9u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("723e6bf6d798acc863bd5ac3574dfcebc3b32276eb0bab577fea1450433e417d")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(161u8),
                     ),
                   ),
                 ),
               },
               "get_amount" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRef,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("723e6bf6d798acc863bd5ac3574dfcebc3b32276eb0bab577fea1450433e417d")),
                     LocalTypeId::SchemaLocalIndex(
                       10u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("723e6bf6d798acc863bd5ac3574dfcebc3b32276eb0bab577fea1450433e417d")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(192u8),
                     ),
                   ),
                 ),
               },
               "get_resource_address" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRef,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("723e6bf6d798acc863bd5ac3574dfcebc3b32276eb0bab577fea1450433e417d")),
                     LocalTypeId::SchemaLocalIndex(
                       11u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("723e6bf6d798acc863bd5ac3574dfcebc3b32276eb0bab577fea1450433e417d")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(133u8),
                     ),
                   ),
                 ),
               },
               "create_proof_of_non_fungibles" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("723e6bf6d798acc863bd5ac3574dfcebc3b32276eb0bab577fea1450433e417d")),
                     LocalTypeId::SchemaLocalIndex(
                       12u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("723e6bf6d798acc863bd5ac3574dfcebc3b32276eb0bab577fea1450433e417d")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(164u8),
                     ),
                   ),
                 ),
               },
               "create_proof_of_all" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("723e6bf6d798acc863bd5ac3574dfcebc3b32276eb0bab577fea1450433e417d")),
                     LocalTypeId::SchemaLocalIndex(
                       13u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("723e6bf6d798acc863bd5ac3574dfcebc3b32276eb0bab577fea1450433e417d")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(164u8),
                     ),
                   ),
                 ),
               },
               "get_non_fungible_local_ids" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRef,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("723e6bf6d798acc863bd5ac3574dfcebc3b32276eb0bab577fea1450433e417d")),
                     LocalTypeId::SchemaLocalIndex(
                       14u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("723e6bf6d798acc863bd5ac3574dfcebc3b32276eb0bab577fea1450433e417d")),
                     LocalTypeId::SchemaLocalIndex(
                       1u64,
                     ),
                   ),
                 ),
               },
               "contains_non_fungible" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRef,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("723e6bf6d798acc863bd5ac3574dfcebc3b32276eb0bab577fea1450433e417d")),
                     LocalTypeId::SchemaLocalIndex(
                       15u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("723e6bf6d798acc863bd5ac3574dfcebc3b32276eb0bab577fea1450433e417d")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(1u8),
                     ),
                   ),
                 ),
               },
               "lock_non_fungibles" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("723e6bf6d798acc863bd5ac3574dfcebc3b32276eb0bab577fea1450433e417d")),
                     LocalTypeId::SchemaLocalIndex(
                       16u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("723e6bf6d798acc863bd5ac3574dfcebc3b32276eb0bab577fea1450433e417d")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "unlock_non_fungibles" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("723e6bf6d798acc863bd5ac3574dfcebc3b32276eb0bab577fea1450433e417d")),
                     LocalTypeId::SchemaLocalIndex(
                       17u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("723e6bf6d798acc863bd5ac3574dfcebc3b32276eb0bab577fea1450433e417d")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
             },
             events: {},
             types: {},
           },
           function_exports: {
             "put" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "put_NonFungibleBucket",
             },
             "take" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "take_NonFungibleBucket",
             },
             "take_advanced" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "take_advanced_NonFungibleBucket",
             },
             "take_non_fungibles" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "take_non_fungibles_NonFungibleBucket",
             },
             "get_amount" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "get_amount_NonFungibleBucket",
             },
             "get_resource_address" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "get_resource_address_NonFungibleBucket",
             },
             "create_proof_of_non_fungibles" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "create_proof_of_non_fungibles_NonFungibleBucket",
             },
             "create_proof_of_all" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "create_proof_of_all_NonFungibleBucket",
             },
             "get_non_fungible_local_ids" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "get_non_fungible_local_ids_NonFungibleBucket",
             },
             "contains_non_fungible" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "contains_non_fungible_NonFungibleBucket",
             },
             "lock_non_fungibles" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "unlock_fungibles_NonFungibleBucket",
             },
             "unlock_non_fungibles" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "unlock_non_fungibles_NonFungibleBucket",
             },
           },
           hook_exports: {},
         },
       )
    ├─ Set: BlueprintVersionKey { blueprint: "FungibleResourceManager", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDefinitionEntryPayload::V1(
         BlueprintDefinition {
           interface: BlueprintInterface {
             blueprint_type: BlueprintType::Outer,
             is_transient: false,
             generics: [],
             feature_set: [
               "track_total_supply",
               "vault_freeze",
               "vault_recall",
               "mint",
               "burn",
             ],
             state: IndexedStateSchema {
               fields: Option::Some(
                 Tuple(
                   PartitionDescription::Logical(
                     PartitionOffset(
                       0u8,
                     ),
                   ),
                   [
                     FieldSchema {
                       field: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("ba27cc155884d6e1aa7a41346fd8c11f18cc99775653caef1fd3455d625fd147")),
                           LocalTypeId::SchemaLocalIndex(
                             0u64,
                           ),
                         ),
                       ),
                       condition: Condition::Always,
                       transience: FieldTransience::NotTransient,
                     },
                     FieldSchema {
                       field: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("ba27cc155884d6e1aa7a41346fd8c11f18cc99775653caef1fd3455d625fd147")),
                           LocalTypeId::SchemaLocalIndex(
                             1u64,
                           ),
                         ),
                       ),
                       condition: Condition::IfFeature(
                         "track_total_supply",
                       ),
                       transience: FieldTransience::NotTransient,
                     },
                   ],
                 ),
               ),
               collections: [],
               num_logical_partitions: 1u8,
             },
             functions: {
               "create" => FunctionSchema {
                 receiver: Option::None,
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("ba27cc155884d6e1aa7a41346fd8c11f18cc99775653caef1fd3455d625fd147")),
                     LocalTypeId::SchemaLocalIndex(
                       2u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("ba27cc155884d6e1aa7a41346fd8c11f18cc99775653caef1fd3455d625fd147")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(133u8),
                     ),
                   ),
                 ),
               },
               "create_with_initial_supply" => FunctionSchema {
                 receiver: Option::None,
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("ba27cc155884d6e1aa7a41346fd8c11f18cc99775653caef1fd3455d625fd147")),
                     LocalTypeId::SchemaLocalIndex(
                       39u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("ba27cc155884d6e1aa7a41346fd8c11f18cc99775653caef1fd3455d625fd147")),
                     LocalTypeId::SchemaLocalIndex(
                       40u64,
                     ),
                   ),
                 ),
               },
               "mint" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("ba27cc155884d6e1aa7a41346fd8c11f18cc99775653caef1fd3455d625fd147")),
                     LocalTypeId::SchemaLocalIndex(
                       41u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("ba27cc155884d6e1aa7a41346fd8c11f18cc99775653caef1fd3455d625fd147")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(161u8),
                     ),
                   ),
                 ),
               },
               "burn" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("ba27cc155884d6e1aa7a41346fd8c11f18cc99775653caef1fd3455d625fd147")),
                     LocalTypeId::SchemaLocalIndex(
                       42u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("ba27cc155884d6e1aa7a41346fd8c11f18cc99775653caef1fd3455d625fd147")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "package_burn" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("ba27cc155884d6e1aa7a41346fd8c11f18cc99775653caef1fd3455d625fd147")),
                     LocalTypeId::SchemaLocalIndex(
                       43u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("ba27cc155884d6e1aa7a41346fd8c11f18cc99775653caef1fd3455d625fd147")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "create_empty_vault" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("ba27cc155884d6e1aa7a41346fd8c11f18cc99775653caef1fd3455d625fd147")),
                     LocalTypeId::SchemaLocalIndex(
                       44u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("ba27cc155884d6e1aa7a41346fd8c11f18cc99775653caef1fd3455d625fd147")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(167u8),
                     ),
                   ),
                 ),
               },
               "create_empty_bucket" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("ba27cc155884d6e1aa7a41346fd8c11f18cc99775653caef1fd3455d625fd147")),
                     LocalTypeId::SchemaLocalIndex(
                       45u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("ba27cc155884d6e1aa7a41346fd8c11f18cc99775653caef1fd3455d625fd147")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(161u8),
                     ),
                   ),
                 ),
               },
               "get_resource_type" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRef,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("ba27cc155884d6e1aa7a41346fd8c11f18cc99775653caef1fd3455d625fd147")),
                     LocalTypeId::SchemaLocalIndex(
                       46u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("ba27cc155884d6e1aa7a41346fd8c11f18cc99775653caef1fd3455d625fd147")),
                     LocalTypeId::SchemaLocalIndex(
                       47u64,
                     ),
                   ),
                 ),
               },
               "get_total_supply" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRef,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("ba27cc155884d6e1aa7a41346fd8c11f18cc99775653caef1fd3455d625fd147")),
                     LocalTypeId::SchemaLocalIndex(
                       49u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("ba27cc155884d6e1aa7a41346fd8c11f18cc99775653caef1fd3455d625fd147")),
                     LocalTypeId::SchemaLocalIndex(
                       50u64,
                     ),
                   ),
                 ),
               },
               "amount_for_withdrawal" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRef,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("ba27cc155884d6e1aa7a41346fd8c11f18cc99775653caef1fd3455d625fd147")),
                     LocalTypeId::SchemaLocalIndex(
                       51u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("ba27cc155884d6e1aa7a41346fd8c11f18cc99775653caef1fd3455d625fd147")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(192u8),
                     ),
                   ),
                 ),
               },
               "drop_empty_bucket" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRef,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("ba27cc155884d6e1aa7a41346fd8c11f18cc99775653caef1fd3455d625fd147")),
                     LocalTypeId::SchemaLocalIndex(
                       54u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("ba27cc155884d6e1aa7a41346fd8c11f18cc99775653caef1fd3455d625fd147")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
             },
             events: {
               "VaultCreationEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("ba27cc155884d6e1aa7a41346fd8c11f18cc99775653caef1fd3455d625fd147")),
                   LocalTypeId::SchemaLocalIndex(
                     55u64,
                   ),
                 ),
               ),
               "MintFungibleResourceEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("ba27cc155884d6e1aa7a41346fd8c11f18cc99775653caef1fd3455d625fd147")),
                   LocalTypeId::SchemaLocalIndex(
                     57u64,
                   ),
                 ),
               ),
               "BurnFungibleResourceEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("ba27cc155884d6e1aa7a41346fd8c11f18cc99775653caef1fd3455d625fd147")),
                   LocalTypeId::SchemaLocalIndex(
                     58u64,
                   ),
                 ),
               ),
             },
             types: {},
           },
           function_exports: {
             "create" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "create_FungibleResourceManager",
             },
             "create_with_initial_supply" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "create_with_initial_supply_and_address_FungibleResourceManager",
             },
             "mint" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "mint_FungibleResourceManager",
             },
             "burn" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "burn_FungibleResourceManager",
             },
             "package_burn" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "package_burn_FungibleResourceManager",
             },
             "create_empty_vault" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "create_empty_vault_FungibleResourceManager",
             },
             "create_empty_bucket" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "create_empty_bucket_FungibleResourceManager",
             },
             "get_resource_type" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "get_resource_type_FungibleResourceManager",
             },
             "get_total_supply" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "get_total_supply_FungibleResourceManager",
             },
             "amount_for_withdrawal" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "amount_for_withdrawal_FungibleResourceManager",
             },
             "drop_empty_bucket" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "drop_empty_bucket_FungibleResourceManager",
             },
           },
           hook_exports: {},
         },
       )
    └─ Set: BlueprintVersionKey { blueprint: "NonFungibleResourceManager", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDefinitionEntryPayload::V1(
         BlueprintDefinition {
           interface: BlueprintInterface {
             blueprint_type: BlueprintType::Outer,
             is_transient: false,
             generics: [
               GenericBound::Any,
             ],
             feature_set: [
               "track_total_supply",
               "vault_freeze",
               "vault_recall",
               "mint",
               "burn",
             ],
             state: IndexedStateSchema {
               fields: Option::Some(
                 Tuple(
                   PartitionDescription::Logical(
                     PartitionOffset(
                       0u8,
                     ),
                   ),
                   [
                     FieldSchema {
                       field: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("13bcc1e1d055e469936948b51d3621e05f8130901231a0847b8ff16eee058759")),
                           LocalTypeId::SchemaLocalIndex(
                             0u64,
                           ),
                         ),
                       ),
                       condition: Condition::Always,
                       transience: FieldTransience::NotTransient,
                     },
                     FieldSchema {
                       field: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("13bcc1e1d055e469936948b51d3621e05f8130901231a0847b8ff16eee058759")),
                           LocalTypeId::SchemaLocalIndex(
                             2u64,
                           ),
                         ),
                       ),
                       condition: Condition::Always,
                       transience: FieldTransience::NotTransient,
                     },
                     FieldSchema {
                       field: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("13bcc1e1d055e469936948b51d3621e05f8130901231a0847b8ff16eee058759")),
                           LocalTypeId::SchemaLocalIndex(
                             5u64,
                           ),
                         ),
                       ),
                       condition: Condition::IfFeature(
                         "track_total_supply",
                       ),
                       transience: FieldTransience::NotTransient,
                     },
                   ],
                 ),
               ),
               collections: [
                 Tuple(
                   PartitionDescription::Logical(
                     PartitionOffset(
                       1u8,
                     ),
                   ),
                   BlueprintCollectionSchema::KeyValueStore(
                     BlueprintKeyValueSchema {
                       key: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("13bcc1e1d055e469936948b51d3621e05f8130901231a0847b8ff16eee058759")),
                           LocalTypeId::WellKnown(
                             WellKnownTypeId(194u8),
                           ),
                         ),
                       ),
                       value: BlueprintPayloadDef::Generic(
                         0u8,
                       ),
                       allow_ownership: false,
                     },
                   ),
                 ),
               ],
               num_logical_partitions: 2u8,
             },
             functions: {
               "create" => FunctionSchema {
                 receiver: Option::None,
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("13bcc1e1d055e469936948b51d3621e05f8130901231a0847b8ff16eee058759")),
                     LocalTypeId::SchemaLocalIndex(
                       6u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("13bcc1e1d055e469936948b51d3621e05f8130901231a0847b8ff16eee058759")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(133u8),
                     ),
                   ),
                 ),
               },
               "create_with_initial_supply" => FunctionSchema {
                 receiver: Option::None,
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("13bcc1e1d055e469936948b51d3621e05f8130901231a0847b8ff16eee058759")),
                     LocalTypeId::SchemaLocalIndex(
                       90u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("13bcc1e1d055e469936948b51d3621e05f8130901231a0847b8ff16eee058759")),
                     LocalTypeId::SchemaLocalIndex(
                       93u64,
                     ),
                   ),
                 ),
               },
               "create_ruid_non_fungible_with_initial_supply" => FunctionSchema {
                 receiver: Option::None,
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("13bcc1e1d055e469936948b51d3621e05f8130901231a0847b8ff16eee058759")),
                     LocalTypeId::SchemaLocalIndex(
                       94u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("13bcc1e1d055e469936948b51d3621e05f8130901231a0847b8ff16eee058759")),
                     LocalTypeId::SchemaLocalIndex(
                       93u64,
                     ),
                   ),
                 ),
               },
               "mint" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("13bcc1e1d055e469936948b51d3621e05f8130901231a0847b8ff16eee058759")),
                     LocalTypeId::SchemaLocalIndex(
                       96u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("13bcc1e1d055e469936948b51d3621e05f8130901231a0847b8ff16eee058759")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(161u8),
                     ),
                   ),
                 ),
               },
               "get_non_fungible" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRef,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("13bcc1e1d055e469936948b51d3621e05f8130901231a0847b8ff16eee058759")),
                     LocalTypeId::SchemaLocalIndex(
                       97u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("13bcc1e1d055e469936948b51d3621e05f8130901231a0847b8ff16eee058759")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(64u8),
                     ),
                   ),
                 ),
               },
               "update_non_fungible_data" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("13bcc1e1d055e469936948b51d3621e05f8130901231a0847b8ff16eee058759")),
                     LocalTypeId::SchemaLocalIndex(
                       98u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("13bcc1e1d055e469936948b51d3621e05f8130901231a0847b8ff16eee058759")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "non_fungible_exists" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("13bcc1e1d055e469936948b51d3621e05f8130901231a0847b8ff16eee058759")),
                     LocalTypeId::SchemaLocalIndex(
                       99u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("13bcc1e1d055e469936948b51d3621e05f8130901231a0847b8ff16eee058759")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(1u8),
                     ),
                   ),
                 ),
               },
               "mint_ruid" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("13bcc1e1d055e469936948b51d3621e05f8130901231a0847b8ff16eee058759")),
                     LocalTypeId::SchemaLocalIndex(
                       100u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("13bcc1e1d055e469936948b51d3621e05f8130901231a0847b8ff16eee058759")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(161u8),
                     ),
                   ),
                 ),
               },
               "mint_single_ruid" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("13bcc1e1d055e469936948b51d3621e05f8130901231a0847b8ff16eee058759")),
                     LocalTypeId::SchemaLocalIndex(
                       101u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("13bcc1e1d055e469936948b51d3621e05f8130901231a0847b8ff16eee058759")),
                     LocalTypeId::SchemaLocalIndex(
                       102u64,
                     ),
                   ),
                 ),
               },
               "package_burn" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("13bcc1e1d055e469936948b51d3621e05f8130901231a0847b8ff16eee058759")),
                     LocalTypeId::SchemaLocalIndex(
                       103u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("13bcc1e1d055e469936948b51d3621e05f8130901231a0847b8ff16eee058759")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "burn" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("13bcc1e1d055e469936948b51d3621e05f8130901231a0847b8ff16eee058759")),
                     LocalTypeId::SchemaLocalIndex(
                       104u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("13bcc1e1d055e469936948b51d3621e05f8130901231a0847b8ff16eee058759")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "create_empty_vault" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("13bcc1e1d055e469936948b51d3621e05f8130901231a0847b8ff16eee058759")),
                     LocalTypeId::SchemaLocalIndex(
                       105u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("13bcc1e1d055e469936948b51d3621e05f8130901231a0847b8ff16eee058759")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(167u8),
                     ),
                   ),
                 ),
               },
               "create_empty_bucket" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("13bcc1e1d055e469936948b51d3621e05f8130901231a0847b8ff16eee058759")),
                     LocalTypeId::SchemaLocalIndex(
                       106u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("13bcc1e1d055e469936948b51d3621e05f8130901231a0847b8ff16eee058759")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(161u8),
                     ),
                   ),
                 ),
               },
               "get_resource_type" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRef,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("13bcc1e1d055e469936948b51d3621e05f8130901231a0847b8ff16eee058759")),
                     LocalTypeId::SchemaLocalIndex(
                       107u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("13bcc1e1d055e469936948b51d3621e05f8130901231a0847b8ff16eee058759")),
                     LocalTypeId::SchemaLocalIndex(
                       108u64,
                     ),
                   ),
                 ),
               },
               "get_total_supply" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRef,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("13bcc1e1d055e469936948b51d3621e05f8130901231a0847b8ff16eee058759")),
                     LocalTypeId::SchemaLocalIndex(
                       109u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("13bcc1e1d055e469936948b51d3621e05f8130901231a0847b8ff16eee058759")),
                     LocalTypeId::SchemaLocalIndex(
                       110u64,
                     ),
                   ),
                 ),
               },
               "amount_for_withdrawal" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRef,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("13bcc1e1d055e469936948b51d3621e05f8130901231a0847b8ff16eee058759")),
                     LocalTypeId::SchemaLocalIndex(
                       111u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("13bcc1e1d055e469936948b51d3621e05f8130901231a0847b8ff16eee058759")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(192u8),
                     ),
                   ),
                 ),
               },
               "drop_empty_bucket" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRef,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("13bcc1e1d055e469936948b51d3621e05f8130901231a0847b8ff16eee058759")),
                     LocalTypeId::SchemaLocalIndex(
                       114u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("13bcc1e1d055e469936948b51d3621e05f8130901231a0847b8ff16eee058759")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
             },
             events: {
               "VaultCreationEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("13bcc1e1d055e469936948b51d3621e05f8130901231a0847b8ff16eee058759")),
                   LocalTypeId::SchemaLocalIndex(
                     115u64,
                   ),
                 ),
               ),
               "MintNonFungibleResourceEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("13bcc1e1d055e469936948b51d3621e05f8130901231a0847b8ff16eee058759")),
                   LocalTypeId::SchemaLocalIndex(
                     117u64,
                   ),
                 ),
               ),
               "BurnNonFungibleResourceEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("13bcc1e1d055e469936948b51d3621e05f8130901231a0847b8ff16eee058759")),
                   LocalTypeId::SchemaLocalIndex(
                     119u64,
                   ),
                 ),
               ),
             },
             types: {},
           },
           function_exports: {
             "create" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "create_NonFungibleResourceManager",
             },
             "create_with_initial_supply" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "create_with_initial_supply_NonFungibleResourceManager",
             },
             "create_ruid_non_fungible_with_initial_supply" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "create_ruid_non_fungible_with_initial_supply",
             },
             "mint" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "mint_NonFungibleResourceManager",
             },
             "get_non_fungible" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "get_non_fungible",
             },
             "update_non_fungible_data" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "update_non_fungible_data",
             },
             "non_fungible_exists" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "non_fungible_exists",
             },
             "mint_ruid" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "mint_ruid_NonFungibleResourceManager",
             },
             "mint_single_ruid" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "mint_single_ruid",
             },
             "package_burn" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "package_burn_NonFungibleResourceManager",
             },
             "burn" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "burn_NonFungibleResourceManager",
             },
             "create_empty_vault" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "create_empty_vault_NonFungibleResourceManager",
             },
             "create_empty_bucket" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "create_empty_bucket_NonFungibleResourceManager",
             },
             "get_resource_type" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "get_resource_type_NonFungibleResourceManager",
             },
             "get_total_supply" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "get_total_supply_NonFungibleResourceManager",
             },
             "amount_for_withdrawal" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "amount_for_withdrawal_NonFungibleResourceManager",
             },
             "drop_empty_bucket" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "drop_empty_bucket_NonFungibleResourceManager",
             },
           },
           hook_exports: {},
         },
       )
  ├─ Partition(66): 10 changes
    ├─ Set: BlueprintVersionKey { blueprint: "Worktop", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDependenciesEntryPayload::V1(
         BlueprintDependencies([]),
       )
    ├─ Set: BlueprintVersionKey { blueprint: "AuthZone", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDependenciesEntryPayload::V1(
         BlueprintDependencies([]),
       )
    ├─ Set: BlueprintVersionKey { blueprint: "FungibleProof", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDependenciesEntryPayload::V1(
         BlueprintDependencies([]),
       )
    ├─ Set: BlueprintVersionKey { blueprint: "FungibleVault", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDependenciesEntryPayload::V1(
         BlueprintDependencies([]),
       )
    ├─ Set: BlueprintVersionKey { blueprint: "FungibleBucket", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDependenciesEntryPayload::V1(
         BlueprintDependencies([]),
       )
    ├─ Set: BlueprintVersionKey { blueprint: "NonFungibleProof", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDependenciesEntryPayload::V1(
         BlueprintDependencies([]),
       )
    ├─ Set: BlueprintVersionKey { blueprint: "NonFungibleVault", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDependenciesEntryPayload::V1(
         BlueprintDependencies([]),
       )
    ├─ Set: BlueprintVersionKey { blueprint: "NonFungibleBucket", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDependenciesEntryPayload::V1(
         BlueprintDependencies([]),
       )
    ├─ Set: BlueprintVersionKey { blueprint: "FungibleResourceManager", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDependenciesEntryPayload::V1(
         BlueprintDependencies([]),
       )
    └─ Set: BlueprintVersionKey { blueprint: "NonFungibleResourceManager", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDependenciesEntryPayload::V1(
         BlueprintDependencies([]),
       )
  ├─ Partition(67): 10 changes
    ├─ Set: BlueprintVersionKey { blueprint: "Worktop", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionRoyaltyConfigEntryPayload::V1(
         PackageRoyaltyConfig::Disabled,
       )
    ├─ Set: BlueprintVersionKey { blueprint: "AuthZone", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionRoyaltyConfigEntryPayload::V1(
         PackageRoyaltyConfig::Disabled,
       )
    ├─ Set: BlueprintVersionKey { blueprint: "FungibleProof", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionRoyaltyConfigEntryPayload::V1(
         PackageRoyaltyConfig::Disabled,
       )
    ├─ Set: BlueprintVersionKey { blueprint: "FungibleVault", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionRoyaltyConfigEntryPayload::V1(
         PackageRoyaltyConfig::Disabled,
       )
    ├─ Set: BlueprintVersionKey { blueprint: "FungibleBucket", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionRoyaltyConfigEntryPayload::V1(
         PackageRoyaltyConfig::Disabled,
       )
    ├─ Set: BlueprintVersionKey { blueprint: "NonFungibleProof", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionRoyaltyConfigEntryPayload::V1(
         PackageRoyaltyConfig::Disabled,
       )
    ├─ Set: BlueprintVersionKey { blueprint: "NonFungibleVault", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionRoyaltyConfigEntryPayload::V1(
         PackageRoyaltyConfig::Disabled,
       )
    ├─ Set: BlueprintVersionKey { blueprint: "NonFungibleBucket", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionRoyaltyConfigEntryPayload::V1(
         PackageRoyaltyConfig::Disabled,
       )
    ├─ Set: BlueprintVersionKey { blueprint: "FungibleResourceManager", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionRoyaltyConfigEntryPayload::V1(
         PackageRoyaltyConfig::Disabled,
       )
    └─ Set: BlueprintVersionKey { blueprint: "NonFungibleResourceManager", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionRoyaltyConfigEntryPayload::V1(
         PackageRoyaltyConfig::Disabled,
       )
  ├─ Partition(68): 10 changes
    ├─ Set: BlueprintVersionKey { blueprint: "Worktop", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionAuthConfigEntryPayload::V1(
         AuthConfig {
           function_auth: FunctionAuth::AllowAll,
           method_auth: MethodAuthTemplate::AllowAll,
         },
       )
    ├─ Set: BlueprintVersionKey { blueprint: "AuthZone", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionAuthConfigEntryPayload::V1(
         AuthConfig {
           function_auth: FunctionAuth::AllowAll,
           method_auth: MethodAuthTemplate::AllowAll,
         },
       )
    ├─ Set: BlueprintVersionKey { blueprint: "FungibleProof", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionAuthConfigEntryPayload::V1(
         AuthConfig {
           function_auth: FunctionAuth::AllowAll,
           method_auth: MethodAuthTemplate::AllowAll,
         },
       )
    ├─ Set: BlueprintVersionKey { blueprint: "FungibleVault", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionAuthConfigEntryPayload::V1(
         AuthConfig {
           function_auth: FunctionAuth::AllowAll,
           method_auth: MethodAuthTemplate::StaticRoleDefinition(
             StaticRoleDefinition {
               roles: RoleSpecification::UseOuter,
               methods: {
                 MethodKey("get_amount") => MethodAccessibility::Public,
                 MethodKey("create_proof_of_amount") => MethodAccessibility::Public,
                 MethodKey("freeze") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("freezer"),
                   ]),
                 ),
                 MethodKey("unfreeze") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("freezer"),
                   ]),
                 ),
                 MethodKey("take") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("withdrawer"),
                   ]),
                 ),
                 MethodKey("take_advanced") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("withdrawer"),
                   ]),
                 ),
                 MethodKey("lock_fee") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("withdrawer"),
                   ]),
                 ),
                 MethodKey("recall") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("recaller"),
                   ]),
                 ),
                 MethodKey("put") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("depositor"),
                   ]),
                 ),
                 MethodKey("burn") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("burner"),
                   ]),
                 ),
                 MethodKey("lock_amount") => MethodAccessibility::OwnPackageOnly,
                 MethodKey("unlock_amount") => MethodAccessibility::OwnPackageOnly,
               },
             },
           ),
         },
       )
    ├─ Set: BlueprintVersionKey { blueprint: "FungibleBucket", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionAuthConfigEntryPayload::V1(
         AuthConfig {
           function_auth: FunctionAuth::AllowAll,
           method_auth: MethodAuthTemplate::StaticRoleDefinition(
             StaticRoleDefinition {
               roles: RoleSpecification::UseOuter,
               methods: {
                 MethodKey("get_amount") => MethodAccessibility::Public,
                 MethodKey("get_resource_address") => MethodAccessibility::Public,
                 MethodKey("create_proof_of_all") => MethodAccessibility::Public,
                 MethodKey("create_proof_of_amount") => MethodAccessibility::Public,
                 MethodKey("put") => MethodAccessibility::Public,
                 MethodKey("take") => MethodAccessibility::Public,
                 MethodKey("take_advanced") => MethodAccessibility::Public,
                 MethodKey("lock_amount") => MethodAccessibility::OwnPackageOnly,
                 MethodKey("unlock_amount") => MethodAccessibility::OwnPackageOnly,
               },
             },
           ),
         },
       )
    ├─ Set: BlueprintVersionKey { blueprint: "NonFungibleProof", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionAuthConfigEntryPayload::V1(
         AuthConfig {
           function_auth: FunctionAuth::AllowAll,
           method_auth: MethodAuthTemplate::AllowAll,
         },
       )
    ├─ Set: BlueprintVersionKey { blueprint: "NonFungibleVault", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionAuthConfigEntryPayload::V1(
         AuthConfig {
           function_auth: FunctionAuth::AllowAll,
           method_auth: MethodAuthTemplate::StaticRoleDefinition(
             StaticRoleDefinition {
               roles: RoleSpecification::UseOuter,
               methods: {
                 MethodKey("get_amount") => MethodAccessibility::Public,
                 MethodKey("get_non_fungible_local_ids") => MethodAccessibility::Public,
                 MethodKey("contains_non_fungible") => MethodAccessibility::Public,
                 MethodKey("create_proof_of_non_fungibles") => MethodAccessibility::Public,
                 MethodKey("take") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("withdrawer"),
                   ]),
                 ),
                 MethodKey("take_advanced") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("withdrawer"),
                   ]),
                 ),
                 MethodKey("take_non_fungibles") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("withdrawer"),
                   ]),
                 ),
                 MethodKey("recall") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("recaller"),
                   ]),
                 ),
                 MethodKey("freeze") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("freezer"),
                   ]),
                 ),
                 MethodKey("unfreeze") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("freezer"),
                   ]),
                 ),
                 MethodKey("recall_non_fungibles") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("recaller"),
                   ]),
                 ),
                 MethodKey("put") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("depositor"),
                   ]),
                 ),
                 MethodKey("burn") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("burner"),
                   ]),
                 ),
                 MethodKey("burn_non_fungibles") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("burner"),
                   ]),
                 ),
                 MethodKey("lock_non_fungibles") => MethodAccessibility::OwnPackageOnly,
                 MethodKey("unlock_non_fungibles") => MethodAccessibility::OwnPackageOnly,
               },
             },
           ),
         },
       )
    ├─ Set: BlueprintVersionKey { blueprint: "NonFungibleBucket", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionAuthConfigEntryPayload::V1(
         AuthConfig {
           function_auth: FunctionAuth::AllowAll,
           method_auth: MethodAuthTemplate::StaticRoleDefinition(
             StaticRoleDefinition {
               roles: RoleSpecification::UseOuter,
               methods: {
                 MethodKey("get_amount") => MethodAccessibility::Public,
                 MethodKey("get_resource_address") => MethodAccessibility::Public,
                 MethodKey("create_proof_of_all") => MethodAccessibility::Public,
                 MethodKey("put") => MethodAccessibility::Public,
                 MethodKey("take") => MethodAccessibility::Public,
                 MethodKey("take_advanced") => MethodAccessibility::Public,
                 MethodKey("take_non_fungibles") => MethodAccessibility::Public,
                 MethodKey("get_non_fungible_local_ids") => MethodAccessibility::Public,
                 MethodKey("contains_non_fungible") => MethodAccessibility::Public,
                 MethodKey("create_proof_of_non_fungibles") => MethodAccessibility::Public,
                 MethodKey("lock_non_fungibles") => MethodAccessibility::OwnPackageOnly,
                 MethodKey("unlock_non_fungibles") => MethodAccessibility::OwnPackageOnly,
               },
             },
           ),
         },
       )
    ├─ Set: BlueprintVersionKey { blueprint: "FungibleResourceManager", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionAuthConfigEntryPayload::V1(
         AuthConfig {
           function_auth: FunctionAuth::AllowAll,
           method_auth: MethodAuthTemplate::StaticRoleDefinition(
             StaticRoleDefinition {
               roles: RoleSpecification::Normal(
                 {
                   RoleKey("minter") => RoleList([
                     RoleKey("minter_updater"),
                   ]),
                   RoleKey("minter_updater") => RoleList([
                     RoleKey("minter_updater"),
                   ]),
                   RoleKey("burner") => RoleList([
                     RoleKey("burner_updater"),
                   ]),
                   RoleKey("burner_updater") => RoleList([
                     RoleKey("burner_updater"),
                   ]),
                   RoleKey("withdrawer") => RoleList([
                     RoleKey("withdrawer_updater"),
                   ]),
                   RoleKey("withdrawer_updater") => RoleList([
                     RoleKey("withdrawer_updater"),
                   ]),
                   RoleKey("depositor") => RoleList([
                     RoleKey("depositor_updater"),
                   ]),
                   RoleKey("depositor_updater") => RoleList([
                     RoleKey("depositor_updater"),
                   ]),
                   RoleKey("recaller") => RoleList([
                     RoleKey("recaller_updater"),
                   ]),
                   RoleKey("recaller_updater") => RoleList([
                     RoleKey("recaller_updater"),
                   ]),
                   RoleKey("freezer") => RoleList([
                     RoleKey("freezer_updater"),
                   ]),
                   RoleKey("freezer_updater") => RoleList([
                     RoleKey("freezer_updater"),
                   ]),
                 },
               ),
               methods: {
                 MethodKey("mint") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("minter"),
                   ]),
                 ),
                 MethodKey("burn") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("burner"),
                   ]),
                 ),
                 MethodKey("package_burn") => MethodAccessibility::OwnPackageOnly,
                 MethodKey("create_empty_bucket") => MethodAccessibility::Public,
                 MethodKey("create_empty_vault") => MethodAccessibility::Public,
                 MethodKey("get_total_supply") => MethodAccessibility::Public,
                 MethodKey("amount_for_withdrawal") => MethodAccessibility::Public,
                 MethodKey("drop_empty_bucket") => MethodAccessibility::Public,
                 MethodKey("get_resource_type") => MethodAccessibility::Public,
               },
             },
           ),
         },
       )
    └─ Set: BlueprintVersionKey { blueprint: "NonFungibleResourceManager", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionAuthConfigEntryPayload::V1(
         AuthConfig {
           function_auth: FunctionAuth::AllowAll,
           method_auth: MethodAuthTemplate::StaticRoleDefinition(
             StaticRoleDefinition {
               roles: RoleSpecification::Normal(
                 {
                   RoleKey("minter") => RoleList([
                     RoleKey("minter_updater"),
                   ]),
                   RoleKey("minter_updater") => RoleList([
                     RoleKey("minter_updater"),
                   ]),
                   RoleKey("burner") => RoleList([
                     RoleKey("burner_updater"),
                   ]),
                   RoleKey("burner_updater") => RoleList([
                     RoleKey("burner_updater"),
                   ]),
                   RoleKey("withdrawer") => RoleList([
                     RoleKey("withdrawer_updater"),
                   ]),
                   RoleKey("withdrawer_updater") => RoleList([
                     RoleKey("withdrawer_updater"),
                   ]),
                   RoleKey("depositor") => RoleList([
                     RoleKey("depositor_updater"),
                   ]),
                   RoleKey("depositor_updater") => RoleList([
                     RoleKey("depositor_updater"),
                   ]),
                   RoleKey("recaller") => RoleList([
                     RoleKey("recaller_updater"),
                   ]),
                   RoleKey("recaller_updater") => RoleList([
                     RoleKey("recaller_updater"),
                   ]),
                   RoleKey("freezer") => RoleList([
                     RoleKey("freezer_updater"),
                   ]),
                   RoleKey("freezer_updater") => RoleList([
                     RoleKey("freezer_updater"),
                   ]),
                   RoleKey("non_fungible_data_updater") => RoleList([
                     RoleKey("non_fungible_data_updater_updater"),
                   ]),
                   RoleKey("non_fungible_data_updater_updater") => RoleList([
                     RoleKey("non_fungible_data_updater_updater"),
                   ]),
                 },
               ),
               methods: {
                 MethodKey("mint") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("minter"),
                   ]),
                 ),
                 MethodKey("mint_ruid") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("minter"),
                   ]),
                 ),
                 MethodKey("mint_single_ruid") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("minter"),
                   ]),
                 ),
                 MethodKey("burn") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("burner"),
                   ]),
                 ),
                 MethodKey("package_burn") => MethodAccessibility::OwnPackageOnly,
                 MethodKey("update_non_fungible_data") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("non_fungible_data_updater"),
                   ]),
                 ),
                 MethodKey("create_empty_bucket") => MethodAccessibility::Public,
                 MethodKey("create_empty_vault") => MethodAccessibility::Public,
                 MethodKey("get_total_supply") => MethodAccessibility::Public,
                 MethodKey("amount_for_withdrawal") => MethodAccessibility::Public,
                 MethodKey("drop_empty_bucket") => MethodAccessibility::Public,
                 MethodKey("get_resource_type") => MethodAccessibility::Public,
                 MethodKey("get_non_fungible") => MethodAccessibility::Public,
                 MethodKey("non_fungible_exists") => MethodAccessibility::Public,
               },
             },
           ),
         },
       )
  ├─ Partition(69): 1 change
    └─ Set: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60"))
       Value: LOCKED PackageCodeVmTypeEntryPayload::V1(
         PackageCodeVmTypeV1::Native,
       )
  └─ Partition(70): 1 change
    └─ Set: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60"))
       Value: LOCKED PackageCodeOriginalCodeEntryPayload::V1(
         PackageCodeOriginalCodeV1(hex("0000000000000001")),
       )
├─ package_sim1pkgxxxxxxxxxtxnpxrxxxxxxxxx002962227406xxxxxxxxx4dvqkl across 10 partitions
  ├─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxpackgexxxxxxxxx000726633226xxxxxxxxxlk8hc9")),
               blueprint_name: "Package",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::None,
             features: [],
             generic_substitutions: [],
           },
           object_type: ObjectType::Global {
             modules: {
               AttachedModuleId::Metadata => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
               AttachedModuleId::RoleAssignment => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
             },
           },
         },
       )
  ├─ Partition(1): 1 change
    └─ Set: SchemaHash(bc0ce86e5bc91369e09cb6104100045b228d397c48befd270c0200df3d2aaed8)
       Value: KeyValueEntrySubstate::V1(
         KeyValueEntrySubstateV1 {
           value: Option::Some(
             PackageSchemaEntryPayload::V1(
               SchemaV1 {
                 type_kinds: [
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(65u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         1u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         2u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         3u64,
                       ),
                     ],
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(171u8),
                     ),
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(128u8),
                     ),
                   },
                   TypeKind::Map {
                     key_type: LocalTypeId::SchemaLocalIndex(
                       4u64,
                     ),
                     value_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(65u8),
                     ),
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(7u8),
                     ),
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::SchemaLocalIndex(
                       6u64,
                     ),
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(65u8),
                         ),
                       ],
                       1u8 => [],
                     },
                   },
                 ],
                 type_metadata: [
                   TypeMetadata {
                     type_name: Option::Some(
                       "TransactionProcessorRunInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "manifest_encoded_instructions",
                           "global_address_reservations",
                           "references",
                           "blobs",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "Hash",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "InstructionOutput",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "CallReturn",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "None",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                 ],
                 type_validations: [
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::Array(
                     LengthValidation {
                       min: Option::Some(
                         32u32,
                       ),
                       max: Option::Some(
                         32u32,
                       ),
                     },
                   ),
                   TypeValidation::None,
                   TypeValidation::None,
                 ],
               },
             ),
           ),
           lock_status: LockStatus::Locked,
         },
       )
  ├─ Partition(2): 2 changes
    ├─ Set: "name"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "Transaction Processor Package",
         ),
       )
    └─ Set: "description"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "A native package that defines the logic of the processing of manifest instructions and transaction runtime.",
         ),
       )
  ├─ Partition(5): 1 change
    └─ Set: Field(0)
       Value: LOCKED RoleAssignmentOwnerFieldPayload::V1(
         OwnerRoleSubstate {
           rule: AccessRule::DenyAll,
           updater: OwnerRoleUpdater::None,
         },
       )
  ├─ Partition(65): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "TransactionProcessor", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDefinitionEntryPayload::V1(
         BlueprintDefinition {
           interface: BlueprintInterface {
             blueprint_type: BlueprintType::Outer,
             is_transient: true,
             generics: [],
             feature_set: [],
             state: IndexedStateSchema {
               fields: Option::None,
               collections: [],
               num_logical_partitions: 0u8,
             },
             functions: {
               "run" => FunctionSchema {
                 receiver: Option::None,
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("bc0ce86e5bc91369e09cb6104100045b228d397c48befd270c0200df3d2aaed8")),
                     LocalTypeId::SchemaLocalIndex(
                       0u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("bc0ce86e5bc91369e09cb6104100045b228d397c48befd270c0200df3d2aaed8")),
                     LocalTypeId::SchemaLocalIndex(
                       5u64,
                     ),
                   ),
                 ),
               },
             },
             events: {},
             types: {},
           },
           function_exports: {
             "run" => PackageExport {
               code_hash: CodeHash(hex("23ea5de7875c804441e4a8a3997fab3e53341d3106f2c6bdd73e7c1de5029725")),
               export_name: "run",
             },
           },
           hook_exports: {},
         },
       )
  ├─ Partition(66): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "TransactionProcessor", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDependenciesEntryPayload::V1(
         BlueprintDependencies([]),
       )
  ├─ Partition(67): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "TransactionProcessor", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionRoyaltyConfigEntryPayload::V1(
         PackageRoyaltyConfig::Disabled,
       )
  ├─ Partition(68): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "TransactionProcessor", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionAuthConfigEntryPayload::V1(
         AuthConfig {
           function_auth: FunctionAuth::RootOnly,
           method_auth: MethodAuthTemplate::AllowAll,
         },
       )
  ├─ Partition(69): 1 change
    └─ Set: CodeHash(hex("23ea5de7875c804441e4a8a3997fab3e53341d3106f2c6bdd73e7c1de5029725"))
       Value: LOCKED PackageCodeVmTypeEntryPayload::V1(
         PackageCodeVmTypeV1::Native,
       )
  └─ Partition(70): 1 change
    └─ Set: CodeHash(hex("23ea5de7875c804441e4a8a3997fab3e53341d3106f2c6bdd73e7c1de5029725"))
       Value: LOCKED PackageCodeOriginalCodeEntryPayload::V1(
         PackageCodeOriginalCodeV1(hex("0000000000000007")),
       )
├─ package_sim1pkgxxxxxxxxxmtdataxxxxxxxxx005246577269xxxxxxxxx9qjump across 10 partitions
  ├─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxpackgexxxxxxxxx000726633226xxxxxxxxxlk8hc9")),
               blueprint_name: "Package",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::None,
             features: [],
             generic_substitutions: [],
           },
           object_type: ObjectType::Global {
             modules: {
               AttachedModuleId::Metadata => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
               AttachedModuleId::RoleAssignment => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
             },
           },
         },
       )
  ├─ Partition(1): 1 change
    └─ Set: SchemaHash(07bfe5891cd05394fa30c6a67fab9208642f39665ca903f9405aff6b6fefb36a)
       Value: KeyValueEntrySubstate::V1(
         KeyValueEntrySubstateV1 {
           value: Option::Some(
             PackageSchemaEntryPayload::V1(
               SchemaV1 {
                 type_kinds: [
                   TypeKind::Enum {
                     variants: {
                       0u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           1u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(12u8),
                         ),
                       ],
                       1u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(1u8),
                         ),
                       ],
                       2u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(7u8),
                         ),
                       ],
                       3u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(9u8),
                         ),
                       ],
                       4u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(10u8),
                         ),
                       ],
                       5u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(4u8),
                         ),
                       ],
                       6u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(5u8),
                         ),
                       ],
                       7u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(192u8),
                         ),
                       ],
                       8u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(129u8),
                         ),
                       ],
                       9u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(208u8),
                         ),
                       ],
                       10u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(195u8),
                         ),
                       ],
                       11u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(194u8),
                         ),
                       ],
                       12u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(196u8),
                         ),
                       ],
                       13u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(198u8),
                         ),
                       ],
                       14u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(199u8),
                         ),
                       ],
                       15u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(216u8),
                         ),
                       ],
                       128u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           2u64,
                         ),
                       ],
                       129u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           3u64,
                         ),
                       ],
                       130u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(65u8),
                         ),
                       ],
                       131u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           4u64,
                         ),
                       ],
                       132u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           5u64,
                         ),
                       ],
                       133u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           6u64,
                         ),
                       ],
                       134u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           7u64,
                         ),
                       ],
                       135u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           8u64,
                         ),
                       ],
                       136u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           9u64,
                         ),
                       ],
                       137u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           10u64,
                         ),
                       ],
                       138u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           11u64,
                         ),
                       ],
                       139u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           12u64,
                         ),
                       ],
                       140u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           13u64,
                         ),
                       ],
                       141u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           14u64,
                         ),
                       ],
                       142u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           15u64,
                         ),
                       ],
                       143u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           16u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(12u8),
                     ),
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(1u8),
                     ),
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(9u8),
                     ),
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(10u8),
                     ),
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(4u8),
                     ),
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(5u8),
                     ),
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(192u8),
                     ),
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(129u8),
                     ),
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(208u8),
                     ),
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(195u8),
                     ),
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(194u8),
                     ),
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(196u8),
                     ),
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(198u8),
                     ),
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(199u8),
                     ),
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(216u8),
                     ),
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         19u64,
                       ),
                     ],
                   },
                   TypeKind::Map {
                     key_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(12u8),
                     ),
                     value_type: LocalTypeId::SchemaLocalIndex(
                       20u64,
                     ),
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         21u64,
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(1u8),
                       ),
                     ],
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           1u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(12u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         1u64,
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(12u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(12u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(12u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(12u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         1u64,
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(12u8),
                       ),
                     ],
                   },
                 ],
                 type_metadata: [
                   TypeMetadata {
                     type_name: Option::Some(
                       "MetadataEntryEntryPayload",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "V1",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "GenericMetadataValue",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "String",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Bool",
                             ),
                             child_names: Option::None,
                           },
                           2u8 => TypeMetadata {
                             type_name: Option::Some(
                               "U8",
                             ),
                             child_names: Option::None,
                           },
                           3u8 => TypeMetadata {
                             type_name: Option::Some(
                               "U32",
                             ),
                             child_names: Option::None,
                           },
                           4u8 => TypeMetadata {
                             type_name: Option::Some(
                               "U64",
                             ),
                             child_names: Option::None,
                           },
                           5u8 => TypeMetadata {
                             type_name: Option::Some(
                               "I32",
                             ),
                             child_names: Option::None,
                           },
                           6u8 => TypeMetadata {
                             type_name: Option::Some(
                               "I64",
                             ),
                             child_names: Option::None,
                           },
                           7u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Decimal",
                             ),
                             child_names: Option::None,
                           },
                           8u8 => TypeMetadata {
                             type_name: Option::Some(
                               "GlobalAddress",
                             ),
                             child_names: Option::None,
                           },
                           9u8 => TypeMetadata {
                             type_name: Option::Some(
                               "PublicKey",
                             ),
                             child_names: Option::None,
                           },
                           10u8 => TypeMetadata {
                             type_name: Option::Some(
                               "NonFungibleGlobalId",
                             ),
                             child_names: Option::None,
                           },
                           11u8 => TypeMetadata {
                             type_name: Option::Some(
                               "NonFungibleLocalId",
                             ),
                             child_names: Option::None,
                           },
                           12u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Instant",
                             ),
                             child_names: Option::None,
                           },
                           13u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Url",
                             ),
                             child_names: Option::None,
                           },
                           14u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Origin",
                             ),
                             child_names: Option::None,
                           },
                           15u8 => TypeMetadata {
                             type_name: Option::Some(
                               "PublicKeyHash",
                             ),
                             child_names: Option::None,
                           },
                           128u8 => TypeMetadata {
                             type_name: Option::Some(
                               "StringArray",
                             ),
                             child_names: Option::None,
                           },
                           129u8 => TypeMetadata {
                             type_name: Option::Some(
                               "BoolArray",
                             ),
                             child_names: Option::None,
                           },
                           130u8 => TypeMetadata {
                             type_name: Option::Some(
                               "U8Array",
                             ),
                             child_names: Option::None,
                           },
                           131u8 => TypeMetadata {
                             type_name: Option::Some(
                               "U32Array",
                             ),
                             child_names: Option::None,
                           },
                           132u8 => TypeMetadata {
                             type_name: Option::Some(
                               "U64Array",
                             ),
                             child_names: Option::None,
                           },
                           133u8 => TypeMetadata {
                             type_name: Option::Some(
                               "I32Array",
                             ),
                             child_names: Option::None,
                           },
                           134u8 => TypeMetadata {
                             type_name: Option::Some(
                               "I64Array",
                             ),
                             child_names: Option::None,
                           },
                           135u8 => TypeMetadata {
                             type_name: Option::Some(
                               "DecimalArray",
                             ),
                             child_names: Option::None,
                           },
                           136u8 => TypeMetadata {
                             type_name: Option::Some(
                               "GlobalAddressArray",
                             ),
                             child_names: Option::None,
                           },
                           137u8 => TypeMetadata {
                             type_name: Option::Some(
                               "PublicKeyArray",
                             ),
                             child_names: Option::None,
                           },
                           138u8 => TypeMetadata {
                             type_name: Option::Some(
                               "NonFungibleGlobalIdArray",
                             ),
                             child_names: Option::None,
                           },
                           139u8 => TypeMetadata {
                             type_name: Option::Some(
                               "NonFungibleLocalIdArray",
                             ),
                             child_names: Option::None,
                           },
                           140u8 => TypeMetadata {
                             type_name: Option::Some(
                               "InstantArray",
                             ),
                             child_names: Option::None,
                           },
                           141u8 => TypeMetadata {
                             type_name: Option::Some(
                               "UrlArray",
                             ),
                             child_names: Option::None,
                           },
                           142u8 => TypeMetadata {
                             type_name: Option::Some(
                               "OriginArray",
                             ),
                             child_names: Option::None,
                           },
                           143u8 => TypeMetadata {
                             type_name: Option::Some(
                               "PublicKeyHashArray",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "MetadataCreateInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "MetadataCreateWithDataInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "data",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "KeyValueStoreInit",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "KeyValueStoreInitEntry",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "value",
                           "lock",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "Option",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "None",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Some",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "MetadataSetInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "key",
                           "value",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "MetadataLockInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "key",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "MetadataGetInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "key",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "MetadataRemoveInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "key",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "SetMetadataEvent",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "key",
                           "value",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "RemoveMetadataEvent",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "key",
                         ],
                       ),
                     ),
                   },
                 ],
                 type_validations: [
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                 ],
               },
             ),
           ),
           lock_status: LockStatus::Locked,
         },
       )
  ├─ Partition(2): 2 changes
    ├─ Set: "name"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "Metadata Package",
         ),
       )
    └─ Set: "description"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "A native package that defines the logic of the metadata module that is used by resources, components, and packages.",
         ),
       )
  ├─ Partition(5): 1 change
    └─ Set: Field(0)
       Value: LOCKED RoleAssignmentOwnerFieldPayload::V1(
         OwnerRoleSubstate {
           rule: AccessRule::DenyAll,
           updater: OwnerRoleUpdater::None,
         },
       )
  ├─ Partition(65): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "Metadata", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDefinitionEntryPayload::V1(
         BlueprintDefinition {
           interface: BlueprintInterface {
             blueprint_type: BlueprintType::Outer,
             is_transient: true,
             generics: [],
             feature_set: [],
             state: IndexedStateSchema {
               fields: Option::None,
               collections: [
                 Tuple(
                   PartitionDescription::Logical(
                     PartitionOffset(
                       0u8,
                     ),
                   ),
                   BlueprintCollectionSchema::KeyValueStore(
                     BlueprintKeyValueSchema {
                       key: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("07bfe5891cd05394fa30c6a67fab9208642f39665ca903f9405aff6b6fefb36a")),
                           LocalTypeId::WellKnown(
                             WellKnownTypeId(12u8),
                           ),
                         ),
                       ),
                       value: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("07bfe5891cd05394fa30c6a67fab9208642f39665ca903f9405aff6b6fefb36a")),
                           LocalTypeId::SchemaLocalIndex(
                             0u64,
                           ),
                         ),
                       ),
                       allow_ownership: false,
                     },
                   ),
                 ),
               ],
               num_logical_partitions: 1u8,
             },
             functions: {
               "create" => FunctionSchema {
                 receiver: Option::None,
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("07bfe5891cd05394fa30c6a67fab9208642f39665ca903f9405aff6b6fefb36a")),
                     LocalTypeId::SchemaLocalIndex(
                       17u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("07bfe5891cd05394fa30c6a67fab9208642f39665ca903f9405aff6b6fefb36a")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(160u8),
                     ),
                   ),
                 ),
               },
               "create_with_data" => FunctionSchema {
                 receiver: Option::None,
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("07bfe5891cd05394fa30c6a67fab9208642f39665ca903f9405aff6b6fefb36a")),
                     LocalTypeId::SchemaLocalIndex(
                       18u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("07bfe5891cd05394fa30c6a67fab9208642f39665ca903f9405aff6b6fefb36a")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(160u8),
                     ),
                   ),
                 ),
               },
               "set" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("07bfe5891cd05394fa30c6a67fab9208642f39665ca903f9405aff6b6fefb36a")),
                     LocalTypeId::SchemaLocalIndex(
                       22u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("07bfe5891cd05394fa30c6a67fab9208642f39665ca903f9405aff6b6fefb36a")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "lock" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("07bfe5891cd05394fa30c6a67fab9208642f39665ca903f9405aff6b6fefb36a")),
                     LocalTypeId::SchemaLocalIndex(
                       23u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("07bfe5891cd05394fa30c6a67fab9208642f39665ca903f9405aff6b6fefb36a")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "get" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRef,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("07bfe5891cd05394fa30c6a67fab9208642f39665ca903f9405aff6b6fefb36a")),
                     LocalTypeId::SchemaLocalIndex(
                       24u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("07bfe5891cd05394fa30c6a67fab9208642f39665ca903f9405aff6b6fefb36a")),
                     LocalTypeId::SchemaLocalIndex(
                       21u64,
                     ),
                   ),
                 ),
               },
               "remove" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("07bfe5891cd05394fa30c6a67fab9208642f39665ca903f9405aff6b6fefb36a")),
                     LocalTypeId::SchemaLocalIndex(
                       25u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("07bfe5891cd05394fa30c6a67fab9208642f39665ca903f9405aff6b6fefb36a")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(1u8),
                     ),
                   ),
                 ),
               },
             },
             events: {
               "SetMetadataEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("07bfe5891cd05394fa30c6a67fab9208642f39665ca903f9405aff6b6fefb36a")),
                   LocalTypeId::SchemaLocalIndex(
                     26u64,
                   ),
                 ),
               ),
               "RemoveMetadataEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("07bfe5891cd05394fa30c6a67fab9208642f39665ca903f9405aff6b6fefb36a")),
                   LocalTypeId::SchemaLocalIndex(
                     27u64,
                   ),
                 ),
               ),
             },
             types: {},
           },
           function_exports: {
             "create" => PackageExport {
               code_hash: CodeHash(hex("5b54e1568c083ea34de562f76acb923258c5ddc792e8e38009c666aa56a637ec")),
               export_name: "create",
             },
             "create_with_data" => PackageExport {
               code_hash: CodeHash(hex("5b54e1568c083ea34de562f76acb923258c5ddc792e8e38009c666aa56a637ec")),
               export_name: "create_with_data",
             },
             "set" => PackageExport {
               code_hash: CodeHash(hex("5b54e1568c083ea34de562f76acb923258c5ddc792e8e38009c666aa56a637ec")),
               export_name: "set",
             },
             "lock" => PackageExport {
               code_hash: CodeHash(hex("5b54e1568c083ea34de562f76acb923258c5ddc792e8e38009c666aa56a637ec")),
               export_name: "lock",
             },
             "get" => PackageExport {
               code_hash: CodeHash(hex("5b54e1568c083ea34de562f76acb923258c5ddc792e8e38009c666aa56a637ec")),
               export_name: "get",
             },
             "remove" => PackageExport {
               code_hash: CodeHash(hex("5b54e1568c083ea34de562f76acb923258c5ddc792e8e38009c666aa56a637ec")),
               export_name: "remove",
             },
           },
           hook_exports: {},
         },
       )
  ├─ Partition(66): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "Metadata", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDependenciesEntryPayload::V1(
         BlueprintDependencies([]),
       )
  ├─ Partition(67): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "Metadata", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionRoyaltyConfigEntryPayload::V1(
         PackageRoyaltyConfig::Disabled,
       )
  ├─ Partition(68): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "Metadata", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionAuthConfigEntryPayload::V1(
         AuthConfig {
           function_auth: FunctionAuth::AllowAll,
           method_auth: MethodAuthTemplate::StaticRoleDefinition(
             StaticRoleDefinition {
               roles: RoleSpecification::Normal(
                 {
                   RoleKey("metadata_setter") => RoleList([
                     RoleKey("metadata_setter_updater"),
                   ]),
                   RoleKey("metadata_setter_updater") => RoleList([
                     RoleKey("metadata_setter_updater"),
                   ]),
                   RoleKey("metadata_locker") => RoleList([
                     RoleKey("metadata_locker_updater"),
                   ]),
                   RoleKey("metadata_locker_updater") => RoleList([
                     RoleKey("metadata_locker_updater"),
                   ]),
                 },
               ),
               methods: {
                 MethodKey("set") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("metadata_setter"),
                   ]),
                 ),
                 MethodKey("remove") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("metadata_setter"),
                   ]),
                 ),
                 MethodKey("lock") => MethodAccessibility::RoleProtected(
                   RoleList([
                     RoleKey("metadata_locker"),
                   ]),
                 ),
                 MethodKey("get") => MethodAccessibility::Public,
               },
             },
           ),
         },
       )
  ├─ Partition(69): 1 change
    └─ Set: CodeHash(hex("5b54e1568c083ea34de562f76acb923258c5ddc792e8e38009c666aa56a637ec"))
       Value: LOCKED PackageCodeVmTypeEntryPayload::V1(
         PackageCodeVmTypeV1::Native,
       )
  └─ Partition(70): 1 change
    └─ Set: CodeHash(hex("5b54e1568c083ea34de562f76acb923258c5ddc792e8e38009c666aa56a637ec"))
       Value: LOCKED PackageCodeOriginalCodeEntryPayload::V1(
         PackageCodeOriginalCodeV1(hex("000000000000000a")),
       )
├─ package_sim1pkgxxxxxxxxxarulesxxxxxxxxx002304462983xxxxxxxxxrgr7fv across 10 partitions
  ├─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxpackgexxxxxxxxx000726633226xxxxxxxxxlk8hc9")),
               blueprint_name: "Package",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::None,
             features: [],
             generic_substitutions: [],
           },
           object_type: ObjectType::Global {
             modules: {
               AttachedModuleId::Metadata => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
               AttachedModuleId::RoleAssignment => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
             },
           },
         },
       )
  ├─ Partition(1): 1 change
    └─ Set: SchemaHash(a06c16caa26e2fbc01ba2b9fe564a3f02d8f426c4580fcafebdff5464fefbde8)
       Value: KeyValueEntrySubstate::V1(
         KeyValueEntrySubstateV1 {
           value: Option::Some(
             PackageSchemaEntryPayload::V1(
               SchemaV1 {
                 type_kinds: [
                   TypeKind::Enum {
                     variants: {
                       0u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           1u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(224u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         2u64,
                       ),
                     ],
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [],
                       2u8 => [],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(240u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(231u8),
                       ),
                     ],
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(224u8),
                         ),
                       ],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         6u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         7u64,
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(224u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         2u64,
                       ),
                     ],
                   },
                   TypeKind::Map {
                     key_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(240u8),
                     ),
                     value_type: LocalTypeId::SchemaLocalIndex(
                       8u64,
                     ),
                   },
                   TypeKind::Map {
                     key_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(231u8),
                     ),
                     value_type: LocalTypeId::SchemaLocalIndex(
                       9u64,
                     ),
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(224u8),
                         ),
                       ],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(224u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(240u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(231u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(224u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(240u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(231u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(224u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(231u8),
                       ),
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(224u8),
                       ),
                     ],
                   },
                   TypeKind::Tuple {
                     field_types: [],
                   },
                 ],
                 type_metadata: [
                   TypeMetadata {
                     type_name: Option::Some(
                       "RoleAssignmentOwnerFieldPayload",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "V1",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "OwnerRoleSubstate",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "rule",
                           "updater",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "OwnerRoleUpdater",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "None",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Owner",
                             ),
                             child_names: Option::None,
                           },
                           2u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Object",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ModuleRoleKey",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "module",
                           "key",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "RoleAssignmentAccessRuleEntryPayload",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "V1",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "RoleAssignmentCreateInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "owner_role",
                           "roles",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "OwnerRoleEntry",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "rule",
                           "updater",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "RoleAssignmentInit",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "Option",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "None",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Some",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "RoleAssignmentSetOwnerInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "rule",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "RoleAssignmentLockOwnerInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "RoleAssignmentSetInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "module",
                           "role_key",
                           "rule",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "RoleAssignmentGetInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "module",
                           "role_key",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "SetOwnerRoleEvent",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "rule",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "SetRoleEvent",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "role_key",
                           "rule",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "LockOwnerRoleEvent",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [],
                       ),
                     ),
                   },
                 ],
                 type_validations: [
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                 ],
               },
             ),
           ),
           lock_status: LockStatus::Locked,
         },
       )
  ├─ Partition(2): 2 changes
    ├─ Set: "name"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "Access Rules Package",
         ),
       )
    └─ Set: "description"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "A native package that defines the logic of the access rules module that is used by resources, components, and packages.",
         ),
       )
  ├─ Partition(5): 1 change
    └─ Set: Field(0)
       Value: LOCKED RoleAssignmentOwnerFieldPayload::V1(
         OwnerRoleSubstate {
           rule: AccessRule::DenyAll,
           updater: OwnerRoleUpdater::None,
         },
       )
  ├─ Partition(65): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "RoleAssignment", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDefinitionEntryPayload::V1(
         BlueprintDefinition {
           interface: BlueprintInterface {
             blueprint_type: BlueprintType::Outer,
             is_transient: true,
             generics: [],
             feature_set: [],
             state: IndexedStateSchema {
               fields: Option::Some(
                 Tuple(
                   PartitionDescription::Logical(
                     PartitionOffset(
                       0u8,
                     ),
                   ),
                   [
                     FieldSchema {
                       field: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("a06c16caa26e2fbc01ba2b9fe564a3f02d8f426c4580fcafebdff5464fefbde8")),
                           LocalTypeId::SchemaLocalIndex(
                             0u64,
                           ),
                         ),
                       ),
                       condition: Condition::Always,
                       transience: FieldTransience::NotTransient,
                     },
                   ],
                 ),
               ),
               collections: [
                 Tuple(
                   PartitionDescription::Logical(
                     PartitionOffset(
                       1u8,
                     ),
                   ),
                   BlueprintCollectionSchema::KeyValueStore(
                     BlueprintKeyValueSchema {
                       key: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("a06c16caa26e2fbc01ba2b9fe564a3f02d8f426c4580fcafebdff5464fefbde8")),
                           LocalTypeId::SchemaLocalIndex(
                             3u64,
                           ),
                         ),
                       ),
                       value: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("a06c16caa26e2fbc01ba2b9fe564a3f02d8f426c4580fcafebdff5464fefbde8")),
                           LocalTypeId::SchemaLocalIndex(
                             4u64,
                           ),
                         ),
                       ),
                       allow_ownership: false,
                     },
                   ),
                 ),
               ],
               num_logical_partitions: 2u8,
             },
             functions: {
               "create" => FunctionSchema {
                 receiver: Option::None,
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a06c16caa26e2fbc01ba2b9fe564a3f02d8f426c4580fcafebdff5464fefbde8")),
                     LocalTypeId::SchemaLocalIndex(
                       5u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a06c16caa26e2fbc01ba2b9fe564a3f02d8f426c4580fcafebdff5464fefbde8")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(160u8),
                     ),
                   ),
                 ),
               },
               "set_owner" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a06c16caa26e2fbc01ba2b9fe564a3f02d8f426c4580fcafebdff5464fefbde8")),
                     LocalTypeId::SchemaLocalIndex(
                       10u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a06c16caa26e2fbc01ba2b9fe564a3f02d8f426c4580fcafebdff5464fefbde8")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "lock_owner" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a06c16caa26e2fbc01ba2b9fe564a3f02d8f426c4580fcafebdff5464fefbde8")),
                     LocalTypeId::SchemaLocalIndex(
                       11u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a06c16caa26e2fbc01ba2b9fe564a3f02d8f426c4580fcafebdff5464fefbde8")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "set" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a06c16caa26e2fbc01ba2b9fe564a3f02d8f426c4580fcafebdff5464fefbde8")),
                     LocalTypeId::SchemaLocalIndex(
                       12u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a06c16caa26e2fbc01ba2b9fe564a3f02d8f426c4580fcafebdff5464fefbde8")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "get" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a06c16caa26e2fbc01ba2b9fe564a3f02d8f426c4580fcafebdff5464fefbde8")),
                     LocalTypeId::SchemaLocalIndex(
                       13u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a06c16caa26e2fbc01ba2b9fe564a3f02d8f426c4580fcafebdff5464fefbde8")),
                     LocalTypeId::SchemaLocalIndex(
                       9u64,
                     ),
                   ),
                 ),
               },
             },
             events: {
               "SetOwnerRoleEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("a06c16caa26e2fbc01ba2b9fe564a3f02d8f426c4580fcafebdff5464fefbde8")),
                   LocalTypeId::SchemaLocalIndex(
                     14u64,
                   ),
                 ),
               ),
               "SetRoleEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("a06c16caa26e2fbc01ba2b9fe564a3f02d8f426c4580fcafebdff5464fefbde8")),
                   LocalTypeId::SchemaLocalIndex(
                     15u64,
                   ),
                 ),
               ),
               "LockOwnerRoleEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("a06c16caa26e2fbc01ba2b9fe564a3f02d8f426c4580fcafebdff5464fefbde8")),
                   LocalTypeId::SchemaLocalIndex(
                     16u64,
                   ),
                 ),
               ),
             },
             types: {},
           },
           function_exports: {
             "create" => PackageExport {
               code_hash: CodeHash(hex("c8b1092f20e8f357553eb468fabc5a332515e3454f06d240b1cd782f200410b2")),
               export_name: "create",
             },
             "set_owner" => PackageExport {
               code_hash: CodeHash(hex("c8b1092f20e8f357553eb468fabc5a332515e3454f06d240b1cd782f200410b2")),
               export_name: "set_owner",
             },
             "lock_owner" => PackageExport {
               code_hash: CodeHash(hex("c8b1092f20e8f357553eb468fabc5a332515e3454f06d240b1cd782f200410b2")),
               export_name: "lock_owner",
             },
             "set" => PackageExport {
               code_hash: CodeHash(hex("c8b1092f20e8f357553eb468fabc5a332515e3454f06d240b1cd782f200410b2")),
               export_name: "set",
             },
             "get" => PackageExport {
               code_hash: CodeHash(hex("c8b1092f20e8f357553eb468fabc5a332515e3454f06d240b1cd782f200410b2")),
               export_name: "get",
             },
           },
           hook_exports: {},
         },
       )
  ├─ Partition(66): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "RoleAssignment", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDependenciesEntryPayload::V1(
         BlueprintDependencies([]),
       )
  ├─ Partition(67): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "RoleAssignment", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionRoyaltyConfigEntryPayload::V1(
         PackageRoyaltyConfig::Disabled,
       )
  ├─ Partition(68): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "RoleAssignment", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionAuthConfigEntryPayload::V1(
         AuthConfig {
           function_auth: FunctionAuth::AllowAll,
           method_auth: MethodAuthTemplate::AllowAll,
         },
       )
  ├─ Partition(69): 1 change
    └─ Set: CodeHash(hex("c8b1092f20e8f357553eb468fabc5a332515e3454f06d240b1cd782f200410b2"))
       Value: LOCKED PackageCodeVmTypeEntryPayload::V1(
         PackageCodeVmTypeV1::Native,
       )
  └─ Partition(70): 1 change
    └─ Set: CodeHash(hex("c8b1092f20e8f357553eb468fabc5a332515e3454f06d240b1cd782f200410b2"))
       Value: LOCKED PackageCodeOriginalCodeEntryPayload::V1(
         PackageCodeOriginalCodeV1(hex("000000000000000c")),
       )
└─ package_sim1phua8spmaxapwq56stduucrvztk92gxzjy9c98h0qemfjec00a6qza across 10 partitions
  ├─ Partition(0): 1 change
    └─ Set: TypeInfo
       Value: TypeInfoSubstate::Object(
         ObjectInfo {
           blueprint_info: BlueprintInfo {
             blueprint_id: BlueprintId {
               package_address: PackageAddress(Reference("package_sim1pkgxxxxxxxxxpackgexxxxxxxxx000726633226xxxxxxxxxlk8hc9")),
               blueprint_name: "Package",
             },
             blueprint_version: BlueprintVersion {
               major: 1u32,
               minor: 0u32,
               patch: 0u32,
             },
             outer_obj_info: OuterObjectInfo::None,
             features: [],
             generic_substitutions: [],
           },
           object_type: ObjectType::Global {
             modules: {
               AttachedModuleId::Metadata => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
               AttachedModuleId::RoleAssignment => BlueprintVersion {
                 major: 1u32,
                 minor: 0u32,
                 patch: 0u32,
               },
             },
           },
         },
       )
  ├─ Partition(1): 1 change
    └─ Set: SchemaHash(f6c61e04013e4ca24a907d7204b3f6f7907c2d20c8853961f014bec27f2ffd29)
       Value: KeyValueEntrySubstate::V1(
         KeyValueEntrySubstateV1 {
           value: Option::Some(
             PackageSchemaEntryPayload::V1(
               SchemaV1 {
                 type_kinds: [
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(12u8),
                       ),
                     ],
                   },
                 ],
                 type_metadata: [
                   TypeMetadata {
                     type_name: Option::Some(
                       "TestUtilsPanicInput",
                     ),
                     child_names: Option::None,
                   },
                 ],
                 type_validations: [
                   TypeValidation::None,
                 ],
               },
             ),
           ),
           lock_status: LockStatus::Locked,
         },
       )
  ├─ Partition(2): 2 changes
    ├─ Set: "name"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "Test Utils Package",
         ),
       )
    └─ Set: "description"
       Value: LOCKED MetadataEntryEntryPayload::V1(
         GenericMetadataValue::String(
           "A native package that contains a set of useful functions to use in testing.",
         ),
       )
  ├─ Partition(5): 1 change
    └─ Set: Field(0)
       Value: LOCKED RoleAssignmentOwnerFieldPayload::V1(
         OwnerRoleSubstate {
           rule: AccessRule::DenyAll,
           updater: OwnerRoleUpdater::None,
         },
       )
  ├─ Partition(65): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "TestUtils", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDefinitionEntryPayload::V1(
         BlueprintDefinition {
           interface: BlueprintInterface {
             blueprint_type: BlueprintType::Outer,
             is_transient: false,
             generics: [],
             feature_set: [],
             state: IndexedStateSchema {
               fields: Option::None,
               collections: [],
               num_logical_partitions: 0u8,
             },
             functions: {
               "panic" => FunctionSchema {
                 receiver: Option::None,
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("f6c61e04013e4ca24a907d7204b3f6f7907c2d20c8853961f014bec27f2ffd29")),
                     LocalTypeId::SchemaLocalIndex(
                       0u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("f6c61e04013e4ca24a907d7204b3f6f7907c2d20c8853961f014bec27f2ffd29")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
             },
             events: {},
             types: {},
           },
           function_exports: {
             "panic" => PackageExport {
               code_hash: CodeHash(hex("5c569d18788e7abbe7bb4010fb9ae1c265419a2faed13ffccf2d0cb043c30e07")),
               export_name: "panic",
             },
           },
           hook_exports: {},
         },
       )
  ├─ Partition(66): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "TestUtils", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDependenciesEntryPayload::V1(
         BlueprintDependencies([]),
       )
  ├─ Partition(67): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "TestUtils", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionRoyaltyConfigEntryPayload::V1(
         PackageRoyaltyConfig::Disabled,
       )
  ├─ Partition(68): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "TestUtils", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionAuthConfigEntryPayload::V1(
         AuthConfig {
           function_auth: FunctionAuth::AllowAll,
           method_auth: MethodAuthTemplate::StaticRoleDefinition(
             StaticRoleDefinition {
               roles: RoleSpecification::Normal(
                 {},
               ),
               methods: {},
             },
           ),
         },
       )
  ├─ Partition(69): 1 change
    └─ Set: CodeHash(hex("5c569d18788e7abbe7bb4010fb9ae1c265419a2faed13ffccf2d0cb043c30e07"))
       Value: LOCKED PackageCodeVmTypeEntryPayload::V1(
         PackageCodeVmTypeV1::Native,
       )
  └─ Partition(70): 1 change
    └─ Set: CodeHash(hex("5c569d18788e7abbe7bb4010fb9ae1c265419a2faed13ffccf2d0cb043c30e07"))
       Value: LOCKED PackageCodeOriginalCodeEntryPayload::V1(
         PackageCodeOriginalCodeV1(hex("000000000000000f")),
       )

OUTPUTS: 0

BALANCE CHANGES: 0

NEW ENTITIES: 7
├─ Package: package_sim1pkgxxxxxxxxxpackgexxxxxxxxx000726633226xxxxxxxxxlk8hc9
├─ Package: package_sim1pkgxxxxxxxxxryaltyxxxxxxxxx003849573396xxxxxxxxxa0z7mc
├─ Package: package_sim1pkgxxxxxxxxxresrcexxxxxxxxx000538436477xxxxxxxxxaj0zg9
├─ Package: package_sim1pkgxxxxxxxxxtxnpxrxxxxxxxxx002962227406xxxxxxxxx4dvqkl
├─ Package: package_sim1pkgxxxxxxxxxmtdataxxxxxxxxx005246577269xxxxxxxxx9qjump
├─ Package: package_sim1pkgxxxxxxxxxarulesxxxxxxxxx002304462983xxxxxxxxxrgr7fv
└─ Package: package_sim1phua8spmaxapwq56stduucrvztk92gxzjy9c98h0qemfjec00a6qza