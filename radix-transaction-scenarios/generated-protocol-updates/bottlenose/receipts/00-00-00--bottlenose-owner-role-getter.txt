TRANSACTION STATUS: COMMITTED SUCCESS

TRANSACTION COST: 0 XRD
├─ Network execution: 0 XRD, 0 execution cost units
├─ Network finalization: 0 XRD, 0 finalization cost units
├─ Tip: 0 XRD
├─ Network Storage: 0 XRD
└─ Royalties: 0 XRD

LOGS: 0

EVENTS: 0

STATE UPDATES: 1 entity
└─ package_sim1pkgxxxxxxxxxarulesxxxxxxxxx002304462983xxxxxxxxxrgr7fv across 4 partitions
  ├─ Partition(65): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "RoleAssignment", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDefinitionEntryPayload::V1(
         BlueprintDefinition {
           interface: BlueprintInterface {
             blueprint_type: BlueprintType::Outer,
             is_transient: true,
             generics: [],
             feature_set: [],
             state: IndexedStateSchema {
               fields: Option::Some(
                 Tuple(
                   PartitionDescription::Logical(
                     PartitionOffset(
                       0u8,
                     ),
                   ),
                   [
                     FieldSchema {
                       field: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("a06c16caa26e2fbc01ba2b9fe564a3f02d8f426c4580fcafebdff5464fefbde8")),
                           LocalTypeId::SchemaLocalIndex(
                             0u64,
                           ),
                         ),
                       ),
                       condition: Condition::Always,
                       transience: FieldTransience::NotTransient,
                     },
                   ],
                 ),
               ),
               collections: [
                 Tuple(
                   PartitionDescription::Logical(
                     PartitionOffset(
                       1u8,
                     ),
                   ),
                   BlueprintCollectionSchema::KeyValueStore(
                     BlueprintKeyValueSchema {
                       key: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("a06c16caa26e2fbc01ba2b9fe564a3f02d8f426c4580fcafebdff5464fefbde8")),
                           LocalTypeId::SchemaLocalIndex(
                             3u64,
                           ),
                         ),
                       ),
                       value: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("a06c16caa26e2fbc01ba2b9fe564a3f02d8f426c4580fcafebdff5464fefbde8")),
                           LocalTypeId::SchemaLocalIndex(
                             4u64,
                           ),
                         ),
                       ),
                       allow_ownership: false,
                     },
                   ),
                 ),
               ],
               num_logical_partitions: 2u8,
             },
             functions: {
               "create" => FunctionSchema {
                 receiver: Option::None,
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a06c16caa26e2fbc01ba2b9fe564a3f02d8f426c4580fcafebdff5464fefbde8")),
                     LocalTypeId::SchemaLocalIndex(
                       5u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a06c16caa26e2fbc01ba2b9fe564a3f02d8f426c4580fcafebdff5464fefbde8")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(160u8),
                     ),
                   ),
                 ),
               },
               "set_owner" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a06c16caa26e2fbc01ba2b9fe564a3f02d8f426c4580fcafebdff5464fefbde8")),
                     LocalTypeId::SchemaLocalIndex(
                       10u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a06c16caa26e2fbc01ba2b9fe564a3f02d8f426c4580fcafebdff5464fefbde8")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "lock_owner" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a06c16caa26e2fbc01ba2b9fe564a3f02d8f426c4580fcafebdff5464fefbde8")),
                     LocalTypeId::SchemaLocalIndex(
                       11u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a06c16caa26e2fbc01ba2b9fe564a3f02d8f426c4580fcafebdff5464fefbde8")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "set" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a06c16caa26e2fbc01ba2b9fe564a3f02d8f426c4580fcafebdff5464fefbde8")),
                     LocalTypeId::SchemaLocalIndex(
                       12u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a06c16caa26e2fbc01ba2b9fe564a3f02d8f426c4580fcafebdff5464fefbde8")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "get" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a06c16caa26e2fbc01ba2b9fe564a3f02d8f426c4580fcafebdff5464fefbde8")),
                     LocalTypeId::SchemaLocalIndex(
                       13u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("a06c16caa26e2fbc01ba2b9fe564a3f02d8f426c4580fcafebdff5464fefbde8")),
                     LocalTypeId::SchemaLocalIndex(
                       9u64,
                     ),
                   ),
                 ),
               },
               "get_owner_role" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRef,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("2d99002dba2cabdeb95fc2fe6f96669fe34eadf597635a34514edd62c61f9364")),
                     LocalTypeId::SchemaLocalIndex(
                       0u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("2d99002dba2cabdeb95fc2fe6f96669fe34eadf597635a34514edd62c61f9364")),
                     LocalTypeId::SchemaLocalIndex(
                       1u64,
                     ),
                   ),
                 ),
               },
             },
             events: {
               "SetOwnerRoleEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("a06c16caa26e2fbc01ba2b9fe564a3f02d8f426c4580fcafebdff5464fefbde8")),
                   LocalTypeId::SchemaLocalIndex(
                     14u64,
                   ),
                 ),
               ),
               "SetRoleEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("a06c16caa26e2fbc01ba2b9fe564a3f02d8f426c4580fcafebdff5464fefbde8")),
                   LocalTypeId::SchemaLocalIndex(
                     15u64,
                   ),
                 ),
               ),
               "LockOwnerRoleEvent" => BlueprintPayloadDef::Static(
                 ScopedTypeId(
                   SchemaHash(hex("a06c16caa26e2fbc01ba2b9fe564a3f02d8f426c4580fcafebdff5464fefbde8")),
                   LocalTypeId::SchemaLocalIndex(
                     16u64,
                   ),
                 ),
               ),
             },
             types: {},
           },
           function_exports: {
             "create" => PackageExport {
               code_hash: CodeHash(hex("c8b1092f20e8f357553eb468fabc5a332515e3454f06d240b1cd782f200410b2")),
               export_name: "create",
             },
             "set_owner" => PackageExport {
               code_hash: CodeHash(hex("c8b1092f20e8f357553eb468fabc5a332515e3454f06d240b1cd782f200410b2")),
               export_name: "set_owner",
             },
             "lock_owner" => PackageExport {
               code_hash: CodeHash(hex("c8b1092f20e8f357553eb468fabc5a332515e3454f06d240b1cd782f200410b2")),
               export_name: "lock_owner",
             },
             "set" => PackageExport {
               code_hash: CodeHash(hex("c8b1092f20e8f357553eb468fabc5a332515e3454f06d240b1cd782f200410b2")),
               export_name: "set",
             },
             "get" => PackageExport {
               code_hash: CodeHash(hex("c8b1092f20e8f357553eb468fabc5a332515e3454f06d240b1cd782f200410b2")),
               export_name: "get",
             },
             "get_owner_role" => PackageExport {
               code_hash: CodeHash(hex("bddc4d71f2abb013a65cac97ce2ce7f02d7c1a5fb9f50598d43a466d34a84955")),
               export_name: "get_owner_role",
             },
           },
           hook_exports: {},
         },
       )
  ├─ Partition(69): 1 change
    └─ Set: CodeHash(hex("bddc4d71f2abb013a65cac97ce2ce7f02d7c1a5fb9f50598d43a466d34a84955"))
       Value: LOCKED PackageCodeVmTypeEntryPayload::V1(
         PackageCodeVmTypeV1::Native,
       )
  ├─ Partition(70): 1 change
    └─ Set: CodeHash(hex("bddc4d71f2abb013a65cac97ce2ce7f02d7c1a5fb9f50598d43a466d34a84955"))
       Value: LOCKED PackageCodeOriginalCodeEntryPayload::V1(
         PackageCodeOriginalCodeV1(hex("0000000000000012")),
       )
  └─ Partition(1): 1 change
    └─ Set: SchemaHash(2d99002dba2cabdeb95fc2fe6f96669fe34eadf597635a34514edd62c61f9364)
       Value: KeyValueEntrySubstate::V1(
         KeyValueEntrySubstateV1 {
           value: Option::Some(
             PackageSchemaEntryPayload::V1(
               SchemaV1 {
                 type_kinds: [
                   TypeKind::Tuple {
                     field_types: [],
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::WellKnown(
                         WellKnownTypeId(224u8),
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         2u64,
                       ),
                     ],
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [],
                       2u8 => [],
                     },
                   },
                 ],
                 type_metadata: [
                   TypeMetadata {
                     type_name: Option::Some(
                       "RoleAssignmentGetOwnerRoleInput",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "OwnerRoleEntry",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "rule",
                           "updater",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "OwnerRoleUpdater",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "None",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Owner",
                             ),
                             child_names: Option::None,
                           },
                           2u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Object",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                 ],
                 type_validations: [
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                 ],
               },
             ),
           ),
           lock_status: LockStatus::Locked,
         },
       )

OUTPUTS: 0

BALANCE CHANGES: 0

NEW ENTITIES: 0