TRANSACTION STATUS: COMMITTED SUCCESS

TRANSACTION COST: 0 XRD
├─ Network execution: 0 XRD, 0 execution cost units
├─ Network finalization: 0 XRD, 0 finalization cost units
├─ Tip: 0 XRD
├─ Network Storage: 0 XRD
└─ Royalties: 0 XRD

LOGS: 0

EVENTS: 0

STATE UPDATES: 1 entity
└─ package_sim1pkgxxxxxxxxxresrcexxxxxxxxx000538436477xxxxxxxxxaj0zg9 across 5 partitions
  ├─ Partition(65): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "Worktop", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionDefinitionEntryPayload::V1(
         BlueprintDefinition {
           interface: BlueprintInterface {
             blueprint_type: BlueprintType::Outer,
             is_transient: true,
             generics: [],
             feature_set: [],
             state: IndexedStateSchema {
               fields: Option::Some(
                 Tuple(
                   PartitionDescription::Logical(
                     PartitionOffset(
                       0u8,
                     ),
                   ),
                   [
                     FieldSchema {
                       field: BlueprintPayloadDef::Static(
                         ScopedTypeId(
                           SchemaHash(hex("8dd3b61b086ed5767ccd95fb1477c3ea463ad5006118891e3b38ff9ff1f9a1df")),
                           LocalTypeId::SchemaLocalIndex(
                             0u64,
                           ),
                         ),
                       ),
                       condition: Condition::Always,
                       transience: FieldTransience::NotTransient,
                     },
                   ],
                 ),
               ),
               collections: [],
               num_logical_partitions: 1u8,
             },
             functions: {
               "Worktop_drop" => FunctionSchema {
                 receiver: Option::None,
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("8dd3b61b086ed5767ccd95fb1477c3ea463ad5006118891e3b38ff9ff1f9a1df")),
                     LocalTypeId::SchemaLocalIndex(
                       2u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("8dd3b61b086ed5767ccd95fb1477c3ea463ad5006118891e3b38ff9ff1f9a1df")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "Worktop_put" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("8dd3b61b086ed5767ccd95fb1477c3ea463ad5006118891e3b38ff9ff1f9a1df")),
                     LocalTypeId::SchemaLocalIndex(
                       4u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("8dd3b61b086ed5767ccd95fb1477c3ea463ad5006118891e3b38ff9ff1f9a1df")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "Worktop_take" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("8dd3b61b086ed5767ccd95fb1477c3ea463ad5006118891e3b38ff9ff1f9a1df")),
                     LocalTypeId::SchemaLocalIndex(
                       5u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("8dd3b61b086ed5767ccd95fb1477c3ea463ad5006118891e3b38ff9ff1f9a1df")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(161u8),
                     ),
                   ),
                 ),
               },
               "Worktop_take_non_fungibles" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("8dd3b61b086ed5767ccd95fb1477c3ea463ad5006118891e3b38ff9ff1f9a1df")),
                     LocalTypeId::SchemaLocalIndex(
                       6u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("8dd3b61b086ed5767ccd95fb1477c3ea463ad5006118891e3b38ff9ff1f9a1df")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(161u8),
                     ),
                   ),
                 ),
               },
               "Worktop_take_all" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("8dd3b61b086ed5767ccd95fb1477c3ea463ad5006118891e3b38ff9ff1f9a1df")),
                     LocalTypeId::SchemaLocalIndex(
                       8u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("8dd3b61b086ed5767ccd95fb1477c3ea463ad5006118891e3b38ff9ff1f9a1df")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(161u8),
                     ),
                   ),
                 ),
               },
               "Worktop_assert_contains" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("8dd3b61b086ed5767ccd95fb1477c3ea463ad5006118891e3b38ff9ff1f9a1df")),
                     LocalTypeId::SchemaLocalIndex(
                       9u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("8dd3b61b086ed5767ccd95fb1477c3ea463ad5006118891e3b38ff9ff1f9a1df")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "Worktop_assert_contains_amount" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("8dd3b61b086ed5767ccd95fb1477c3ea463ad5006118891e3b38ff9ff1f9a1df")),
                     LocalTypeId::SchemaLocalIndex(
                       10u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("8dd3b61b086ed5767ccd95fb1477c3ea463ad5006118891e3b38ff9ff1f9a1df")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "Worktop_assert_contains_non_fungibles" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("8dd3b61b086ed5767ccd95fb1477c3ea463ad5006118891e3b38ff9ff1f9a1df")),
                     LocalTypeId::SchemaLocalIndex(
                       11u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("8dd3b61b086ed5767ccd95fb1477c3ea463ad5006118891e3b38ff9ff1f9a1df")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "Worktop_drain" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRefMut,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("8dd3b61b086ed5767ccd95fb1477c3ea463ad5006118891e3b38ff9ff1f9a1df")),
                     LocalTypeId::SchemaLocalIndex(
                       12u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("8dd3b61b086ed5767ccd95fb1477c3ea463ad5006118891e3b38ff9ff1f9a1df")),
                     LocalTypeId::SchemaLocalIndex(
                       13u64,
                     ),
                   ),
                 ),
               },
               "Worktop_assert_resources_include" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRef,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("d864dc25e8ee1e5dad8df5b6c8b32c54681d2150a914530d33f898c7feafc2a2")),
                     LocalTypeId::SchemaLocalIndex(
                       0u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("d864dc25e8ee1e5dad8df5b6c8b32c54681d2150a914530d33f898c7feafc2a2")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
               "Worktop_assert_resources_only" => FunctionSchema {
                 receiver: Option::Some(
                   ReceiverInfo {
                     receiver: Receiver::SelfRef,
                     ref_types: RefTypes {
                       bits: 1u32,
                     },
                   },
                 ),
                 input: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("d864dc25e8ee1e5dad8df5b6c8b32c54681d2150a914530d33f898c7feafc2a2")),
                     LocalTypeId::SchemaLocalIndex(
                       8u64,
                     ),
                   ),
                 ),
                 output: BlueprintPayloadDef::Static(
                   ScopedTypeId(
                     SchemaHash(hex("d864dc25e8ee1e5dad8df5b6c8b32c54681d2150a914530d33f898c7feafc2a2")),
                     LocalTypeId::WellKnown(
                       WellKnownTypeId(66u8),
                     ),
                   ),
                 ),
               },
             },
             events: {},
             types: {},
           },
           function_exports: {
             "Worktop_drop" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "Worktop_drop",
             },
             "Worktop_put" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "Worktop_put",
             },
             "Worktop_take" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "Worktop_take",
             },
             "Worktop_take_non_fungibles" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "Worktop_take_non_fungibles",
             },
             "Worktop_take_all" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "Worktop_take_all",
             },
             "Worktop_assert_contains" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "Worktop_assert_contains",
             },
             "Worktop_assert_contains_amount" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "Worktop_assert_contains_amount",
             },
             "Worktop_assert_contains_non_fungibles" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "Worktop_assert_contains_non_fungibles",
             },
             "Worktop_drain" => PackageExport {
               code_hash: CodeHash(hex("12dd0a6a7d0e222a97926da03adb5a7768d31cc7c5c2bd6828e14a7d25fa3a60")),
               export_name: "Worktop_drain",
             },
             "Worktop_assert_resources_include" => PackageExport {
               code_hash: CodeHash(hex("e3393b47e9316487de0d70a2d52cd8ef3a0c55c3258d92025de823d3a3039a4a")),
               export_name: "Worktop_assert_resources_include",
             },
             "Worktop_assert_resources_only" => PackageExport {
               code_hash: CodeHash(hex("e3393b47e9316487de0d70a2d52cd8ef3a0c55c3258d92025de823d3a3039a4a")),
               export_name: "Worktop_assert_resources_only",
             },
           },
           hook_exports: {},
         },
       )
  ├─ Partition(69): 1 change
    └─ Set: CodeHash(hex("e3393b47e9316487de0d70a2d52cd8ef3a0c55c3258d92025de823d3a3039a4a"))
       Value: LOCKED PackageCodeVmTypeEntryPayload::V1(
         PackageCodeVmTypeV1::Native,
       )
  ├─ Partition(70): 1 change
    └─ Set: CodeHash(hex("e3393b47e9316487de0d70a2d52cd8ef3a0c55c3258d92025de823d3a3039a4a"))
       Value: LOCKED PackageCodeOriginalCodeEntryPayload::V1(
         PackageCodeOriginalCodeV1(hex("000000000000001a")),
       )
  ├─ Partition(1): 1 change
    └─ Set: SchemaHash(d864dc25e8ee1e5dad8df5b6c8b32c54681d2150a914530d33f898c7feafc2a2)
       Value: KeyValueEntrySubstate::V1(
         KeyValueEntrySubstateV1 {
           value: Option::Some(
             PackageSchemaEntryPayload::V1(
               SchemaV1 {
                 type_kinds: [
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         1u64,
                       ),
                     ],
                   },
                   TypeKind::Map {
                     key_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(133u8),
                     ),
                     value_type: LocalTypeId::SchemaLocalIndex(
                       2u64,
                     ),
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(192u8),
                         ),
                       ],
                       2u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(192u8),
                         ),
                       ],
                       3u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           3u64,
                         ),
                       ],
                       4u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           3u64,
                         ),
                       ],
                       5u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           4u64,
                         ),
                       ],
                     },
                   },
                   TypeKind::Array {
                     element_type: LocalTypeId::WellKnown(
                       WellKnownTypeId(194u8),
                     ),
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         3u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         5u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         6u64,
                       ),
                       LocalTypeId::SchemaLocalIndex(
                         7u64,
                       ),
                     ],
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [],
                       1u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(192u8),
                         ),
                       ],
                     },
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [
                         LocalTypeId::WellKnown(
                           WellKnownTypeId(192u8),
                         ),
                       ],
                       1u8 => [],
                     },
                   },
                   TypeKind::Enum {
                     variants: {
                       0u8 => [
                         LocalTypeId::SchemaLocalIndex(
                           3u64,
                         ),
                       ],
                       1u8 => [],
                     },
                   },
                   TypeKind::Tuple {
                     field_types: [
                       LocalTypeId::SchemaLocalIndex(
                         1u64,
                       ),
                     ],
                   },
                 ],
                 type_metadata: [
                   TypeMetadata {
                     type_name: Option::Some(
                       "WorktopAssertResourcesIncludeInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "constraints",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ManifestResourceConstraints",
                     ),
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "ManifestResourceConstraint",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "NonZeroAmount",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "ExactAmount",
                             ),
                             child_names: Option::None,
                           },
                           2u8 => TypeMetadata {
                             type_name: Option::Some(
                               "AtLeastAmount",
                             ),
                             child_names: Option::None,
                           },
                           3u8 => TypeMetadata {
                             type_name: Option::Some(
                               "ExactNonFungibles",
                             ),
                             child_names: Option::None,
                           },
                           4u8 => TypeMetadata {
                             type_name: Option::Some(
                               "AtLeastNonFungibles",
                             ),
                             child_names: Option::None,
                           },
                           5u8 => TypeMetadata {
                             type_name: Option::Some(
                               "General",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::None,
                     child_names: Option::None,
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "GeneralResourceConstraint",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "required_ids",
                           "lower_bound",
                           "upper_bound",
                           "allowed_ids",
                         ],
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "LowerBound",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "NonZero",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Inclusive",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "UpperBound",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Inclusive",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Unbounded",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "AllowedIds",
                     ),
                     child_names: Option::Some(
                       ChildNames::EnumVariants(
                         {
                           0u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Allowlist",
                             ),
                             child_names: Option::None,
                           },
                           1u8 => TypeMetadata {
                             type_name: Option::Some(
                               "Any",
                             ),
                             child_names: Option::None,
                           },
                         },
                       ),
                     ),
                   },
                   TypeMetadata {
                     type_name: Option::Some(
                       "WorktopAssertResourcesOnlyInput",
                     ),
                     child_names: Option::Some(
                       ChildNames::NamedFields(
                         [
                           "constraints",
                         ],
                       ),
                     ),
                   },
                 ],
                 type_validations: [
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                   TypeValidation::None,
                 ],
               },
             ),
           ),
           lock_status: LockStatus::Locked,
         },
       )
  └─ Partition(68): 1 change
    └─ Set: BlueprintVersionKey { blueprint: "Worktop", version: BlueprintVersion { major: 1u32, minor: 0u32, patch: 0u32 } }
       Value: LOCKED PackageBlueprintVersionAuthConfigEntryPayload::V1(
         AuthConfig {
           function_auth: FunctionAuth::AllowAll,
           method_auth: MethodAuthTemplate::AllowAll,
         },
       )

OUTPUTS: 0

BALANCE CHANGES: 0

NEW ENTITIES: 0